<Script:our $MstTableRec=${TblPrfx} . ${ModuleName} :Script>noprint}
<Script:our $MstInpFormRec=${SRInpPrfx} . ${ModuleName} :Script>noprint
<Script:our $MstSavFormRec=${SRSavPrfx} . ${ModuleName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
@GlobalDef
@ModuleDef
<AddRqrmnt:fgl::common/generic_functions.4gl:AddRqrmnt> 
# module  generated by Querix Ffg(c) 
# Generated on ${GenerationTS}
# template ${TemplateFile} 

DATABASE ${DatabaseName}
	DEFINE ${ModuleVarPrefix}program CHAR(30)

	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent",".*","all","false","","\t\t")  :Script>
	END RECORD

	DEFINE ${MstSavFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent",".*","all","false","","\t\t")  :Script>
	END RECORD

<Script: if ( $ParentLookupTables > 0 ) { 
	$IndentLevel=1;
	$OutLineNum=ffg_print($SRCHANDLE,"DEFINE ${MstLkUpRec} RECORD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
	$IndentLevel++;
	define_form_fields($SRCHANDLE,$MainFormName,".*",".*","all","true","","\t\t");  
	$OutLineNum=ffg_print($SRCHANDLE,"\n\tEND RECORD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 	
}:Script>

MAIN
@Define
@Init 
	DEFER INTERRUPT
	OPTIONS
	help file "${ModuleName}.iem",
	help key ${Helpkey}

	# WHENEVER ERROR CALL ${ErrorMngmtFunction}
	# CALL ui_init(0) 
	LET ${ModuleVarPrefix}program="p_${ModuleName}_${ParentTable}"

	CALL main_${ModuleName}_${ParentTable}()

END MAIN

#######################################################
FUNCTION mc_${ModuleName}_sccs()
# definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION

FUNCTION main_${ModuleName}_${ParentTable} ()

	CALL init_program("${DatabaseName}",${ModuleVarPrefix}program)
	
	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}" attributes(border)

	CALL ${SqlPrepareQueriesFct}_${ModuleName}_${ParentTable} () # initialize all cursors on master table
	<Script: if ( $ChildTable ne "" ) { 
		$Line = sprintf "CALL ${SqlPrepareQueriesFct}_${ModuleName}_${ChildTable}\(\)\n";# initialize allcursors on Child table \n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
	}:Script>

	CALL menu_${ModuleName}_${ParentTable}()      

	CLOSE WINDOW ${MainFormName}

END FUNCTION

######################################################################
FUNCTION menu_${ModuleName}_${ParentTable} ()
## menu_${ModuleName}_${ParentTable}
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nbsel_${ParentTable} INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE record_num INTEGER
	DEFINE action smallint
	DEFINE xnumber smallint
	DEFINE arr_elem_num smallint
	DEFINE ${PrmryKeyPrefix}_${ParentTable} RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	LET nbsel_${ParentTable} = 0
	MENU "${ParentTable}"
	BEFORE MENU
		HIDE OPTION "${NextOption}","${PreviousOption}","${ViewArrayMessage}${ChildTable}","${EditArrayMessage}${ChildTable}"
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable}"
		HELP 1000
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		DISPLAY BY NAME ${MstInpFormRec}.*
		HIDE OPTION "${NextOption}","${PreviousOption}"

		<Script: if ( $ParentLookupTables > 0 ) { 
			$Line = sprintf "INITIALIZE ${MstLkUpRec}.* TO NULL\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) 
		} :Script>

		CALL ${FrmFctPrefix}_${QueryOption}_${ParentTable}() RETURNING nbsel_${ParentTable}
		IF nbsel_${ParentTable} <>0 THEN 
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
			LET record_num = 1
			DISPLAY BY NAME ${MstInpFormRec}.*
			IF nbsel_${ParentTable} > 1 THEN
			   SHOW OPTION "${NextOption}"
			   NEXT OPTION "${NextOption}"
			END IF
			<Script: if ( $ParentLookupTables > 0 ) { 
				$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n" ;
				$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			} :Script>
			<Script: if ( defined($ChildTable) ) { 
				$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
				$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
				$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (${PrmryKeyPrefix}_${ParentTable}.*,False)\n"; 				
				$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
				$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
				$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			} :Script>
		ELSE 
			ERROR "${NorowsSelected}"
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${NextOption}" "${NextCom} ${ParentTable}"
		HELP 2000
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		DISPLAY BY NAME ${MstInpFormRec}.*
		<Script: if ( $ParentLookupTables > 0 ) { 
			$Line = sprintf "INITIALIZE ${MstLkUpRec}.* TO NULL\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) 
		} :Script>

		IF record_num < nbsel_${ParentTable} THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
			CASE 
			WHEN sql_stmt_status = 0 
				ERROR "${Lastrow} ${ParentTable}"
			WHEN sql_stmt_status = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN sql_stmt_status = 1
				LET record_num = record_num + 1
				DISPLAY BY NAME ${MstInpFormRec}.*
				IF record_num >= nbsel_${ParentTable} THEN
				   HIDE OPTION "${NextOption}"
				END IF
                IF record_num > 1 THEN
                	SHOW OPTION "${PreviousOption}"
                ELSE
                	HIDE OPTION "${PreviousOption}"
				END IF
				<Script: if ( $ParentLookupTables > 0 ) { 
					$Line=sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n"; 
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
				} :Script>
				<Script: if ( defined($ChildTable) ) {
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
					$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
				} :Script>
			END CASE
		ELSE
			ERROR " ${SelectFirst}  ${ParentTable} "
			NEXT OPTION "${QueryOption}" 
		END IF

	COMMAND "${PreviousOption}" "${PreviousCom} ${ParentTable}"
		HELP 3000
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		DISPLAY BY NAME ${MstInpFormRec}.*
		<Script: if ( $ParentLookupTables > 0 ) { 
			$Line = sprintf "INITIALIZE ${MstLkUpRec}.* TO NULL\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) 
		}:Script>

		IF record_num > 1  THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(-1) RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
			CASE 
			WHEN sql_stmt_status = 0
				ERROR "${FirstRow} ${ParentTable}"
			WHEN sql_stmt_status < -1
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN sql_stmt_status = 1
				LET record_num = record_num - 1
				CALL ${SetFormRecordFct}${ModuleName}_${MainFormName}(${MstTableRec}.*)
				RETURNING ${MstInpFormRec}.*
				DISPLAY BY NAME ${MstInpFormRec}.*
				IF record_num = 1  THEN
				   HIDE OPTION "${PreviousOption}"
				END IF
                IF record_num < nbsel_${ParentTable} THEN
                	SHOW OPTION "${NextOption}"
                ELSE
                	HIDE OPTION "${NextOption}"
				END IF
				<Script: if ( $ParentLookupTables > 0 ) { 
					$Line=sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n"; 
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) 
				}:Script>
				<Script: if ( defined($ChildTable) ) {
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;				
					$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
				} :Script>
			END CASE
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
		
		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
	} :Script>

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		HELP 3000
		MESSAGE ""
		CALL ${FrmAddRecordFct}_${ParentTable}() RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
		MESSAGE ""
		<Script: if ( defined($ChildTable) ) {
			$Line = "SHOW OPTION \"${EditArrayMessage}${ChildTable}\"";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;				
			$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;				
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
		} :Script>

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		HELP 4000
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			ELSE
				LET sql_stmt_status = ${FrmEditRecordFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*)
			END IF
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		HELP 5000
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			END IF
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		ELSE
			ERROR "${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${Quit}" "${QuitCom}"
		HELP 9000
		MESSAGE ""
		EXIT MENU
	END MENU
END FUNCTION

##############################################################################################
FUNCTION ${FrmFctPrefix}_${QueryOption}_${ParentTable}()
# ${FrmFctPrefix}_${QueryOption}_${ParentTable} : Query By Example on table ${ParentTable}
# Input selection criteria,
# prepare the query,
# open the data set
	DEFINE ${RecordPrefix}${ParentTable},where_clause STRING
	DEFINE xnumber,sql_stmt_status INTEGER
	DEFINE l_pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	INITIALIZE ${MstInpFormRec}.* TO NULL
	DISPLAY BY NAME ${MstInpFormRec}.*
	<Script: if ( $ParentLookupTables > 0 ) { 
		$Line = sprintf "INITIALIZE ${MstLkUpRec}.* TO NULL\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) 
	}:Script>

	CONSTRUCT BY NAME where_clause ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",$ParentTable,"all","false","=tabname","\t\t")  :Script>
	
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			$Line=sprin tf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
		 }:Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT field_touched(${ParentTable}.*) AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		MESSAGE "${CancelCom}"
		LET int_flag=0
	ELSE
		LET xnumber = ${SqlGetQBECountFct}_${ParentTable}(where_clause)
		IF xnumber > 0 THEN
			LET sql_stmt_status = ${SqlOpenPKyScrCrsFct}${ParentTable}(where_clause)
		ELSE
			RETURN -1
		END IF
			
	END IF
	RETURN xnumber
END FUNCTION		## ${QueryOption}_${ParentTable}

###################################################################################
FUNCTION ${FrmAddRecordFct}_${ParentTable}()
## ${FrmAddRecordFct}_${ParentTable}: add a new ${ParentTable} row
	DEFINE sql_stmt_status SMALLINT
	DEFINE row_count SMALLINT
	DEFINE nbre_${ParentTable} ,action SMALLINT
	<Script: if ( $ParentLookupTables > 0 ) {
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
	}:Script>
	#INITIALIZE ${PrmryKeyPrefix}_${ParentTable}.* TO NULL
	INITIALIZE ${MstTableRec}.* TO NULL
	INITIALIZE ${MstInpFormRec}.* TO NULL
	INITIALIZE ${MstSavFormRec}.* TO NULL
	<Script: if ( $ParentLookupTables > 0 ) {
		$OutLineNum=ffg_print($SRCHANDLE,"INITIALIZE ${MstLkUpRec}.* TO NULL\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
	}:Script>
	WHILE true
		LET int_flag = false
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",".*","all","false",${MstInpFormRec},"\t\t\t")  :Script>
		WITHOUT DEFAULTS
		<Script: print_input_events($SRCHANDLE,$MainFormName,${ParentTable},${KeyMode},"master","       " ):Script>
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"fkey","master","       " )
		}:Script>
		
		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")  # Call online help\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		END INPUT
		IF int_flag = TRUE THEN
			# Resign from input
			LET int_flag=false
			LET  ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY BY NAME ${MstInpFormRec}.*
			MESSAGE "${CancelCom} ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(3,10,"${AddOption}") RETURNING action
		CASE action
		WHEN 1            # I want to edit the input, remains displayed 'as is'
			CONTINUE WHILE   # On laisse tout affiche comme tel
			
		WHEN 2            # On valide la transaction
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			}:Script>
			CALL ${SetTableRecordFct}${ModuleName}_${ParentTable}(1,${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			CALL ${SqlInsertFct}_${ParentTable}() returning sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"pkey","",$MstTableRec,"flat","",""); :Script>

			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${AddOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${AddOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE

		WHEN 0
			EXIT WHILE
		END CASE
	END WHILE
	# ${MstTableRec}
	RETURN sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"pkey","",$MstTableRec,"flat","",""); :Script>
END FUNCTION		## ${FrmAddRecordFct}_${ParentTable}

################################################################################
FUNCTION ${FrmEditRecordFct}_${ParentTable}(pky)
# ${FrmEditRecordFct}_${ParentTable} : Edit a ${ParentTable} RECORD
# inbound: table primary key
	DEFINE action SMALLINT  
	DEFINE sql_stmt_status SMALLINT
	<Script: if ( $ParentLookupTables > 0 ) {
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
	}:Script>
	DEFINE row_count SMALLINT
	DEFINE pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	## check if record can be accessed
	WHILE true
		LET int_flag = false
		# Save Screen Record values before altering
		LET ${MstSavFormRec}.* = ${MstInpFormRec}.* 
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		}:Script>
		
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",".*","attr","false",${MstInpFormRec},"         ")  :Script>
		WITHOUT DEFAULTS
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"fkey","master","       " )
		}:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
					
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
		}:Script>
		END INPUT
		IF int_flag = TRUE THEN
			LET int_flag=false
			# Restore previous value
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY BY NAME ${MstInpFormRec}.*
			MESSAGE "$CancelCom ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(4,10,"${EditOption}") RETURNING action

		CASE 
		WHEN action = 0 
			# Resign, restore previous values
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY BY NAME ${MstInpFormRec}.*
			EXIT WHILE   # Cancel operation

		WHEN action = 1 
			# Redo
			CONTINUE WHILE

		WHEN action = 2   
			# confirm update
			CALL ${SetTableRecordFct}${ModuleName}_${ParentTable}(2,${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			LET sql_stmt_status = ${SqlUpdateFct}_${ParentTable}(pky.*) 
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${EditOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${EditOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmEditRecordFct}_${ParentTable}(pky)


##############################################################################
FUNCTION ${FrmSuppressRecordFct}_${ParentTable}(pky)
## ${FrmSuppressRecordFct}_${ParentTable}: DELETE A ${ParentTable} row
## inbound parameter: table primary key
	DEFINE action SMALLINT
	DEFINE sql_stmt_status SMALLINT
	DEFINE pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	WHILE TRUE
		CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		}:Script>
		CASE 
		WHEN action = 0 OR action = 1 
			EXIT WHILE  # degage abandon
		WHEN action = 2   
			CALL ${SqlDeleteFct}_${ParentTable}(pky.*) RETURNING sql_stmt_status
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${SuppressOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
				INITIALIZE ${MstInpFormRec}.* TO NULL
				DISPLAY BY NAME ${MstInpFormRec}.*
				<Script: if ( $ParentLookupTables > 0 ) {
					$Line = sprintf "INITIALIZE ${MstLkUpRec}.* TO NULL\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
					$Line = sprintf "DISPLAY BY NAME ${MstLkUpRec}.*\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) } 
				:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${SuppressOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmSuppressRecordFct}_${ParentTable}(pky)

##################################################################################
FUNCTION ${SqlPrepareQueriesFct}_${ModuleName}_${ParentTable} ()
# ${SqlPrepareQueriesFct}_${ModuleName}_${ParentTable}:  Build, prepare, declare and initialize main queries and cursors
	DEFINE query_text STRING

	# PREPARE cursor for full master table row contents, access by primary key
	LET query_text=
	"SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"all","","","flat","",""):Script>",
	" FROM ${ParentTable} ",
	"WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_mrw_${CursorSufx} FROM query_text
	DECLARE crs_row_${CursorSufx} CURSOR FOR sel_mrw_${CursorSufx}

	# PREPARE cursor for row test / check if locked
	let query_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_${PrmryKeyPrefix}_${CursorSufx} FROM query_text
	DECLARE crs_${PrmryKeyPrefix}_${CursorSufx} CURSOR FOR sel_${PrmryKeyPrefix}_${CursorSufx}

	# PREPARE INSERT statement
	LET query_text =
	"INSERT INTO ${ParentTable} (<Script:print_table_columns($SRCHANDLE,${ParentTable},"all","","","flat","",""):Script>)",
	" VALUES ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"all","placeholders","","flat","",1); :Script>)" 
	PREPARE pr_ins_${CursorSufx} FROM query_text

	# PREPARE UPDATE statement
	let query_text=
	"UPDATE ${ParentTable} ",
	"SET ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"attr","","","flat","",""); :Script>)",
	" = ( <Script:print_table_columns ($SRCHANDLE,${ParentTable},"attr","placeholders","","flat","",""); :Script>)",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 
	PREPARE pr_upd_${CursorSufx} FROM query_text

	# PREPARE DELETE statement
	let query_text= "DELETE FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 

	PREPARE pr_del_${CursorSufx} FROM query_text

END FUNCTION		## ${SqlPrepareQueriesFct}_${ModuleName}_${ParentTable}

################################################################
FUNCTION ${SqlGetQBECountFct}_${ParentTable}(qry_stmt)
## ${SqlGetQBECountFct}_${ParentTable}: Open the QBE cursor,
## counts returned rows_count,
## open the data set,
## fetch first row
## inbound parameter: query predicate
## outbound parameters: number of rows retried
	DEFINE qry_stmt STRING
	DEFINE ${RecordPrefix}${ParentTable} STRING
	DEFINE row_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	LET ${RecordPrefix}${ParentTable} = 
		"SELECT count(*) FROM ${ParentTable}",
		" WHERE ",qry_stmt CLIPPED

	PREPARE prp_cnt_${ParentTable} FROM ${RecordPrefix}${ParentTable}
	DECLARE crs_cnt_${ParentTable} CURSOR for prp_cnt_${ParentTable}

	OPEN crs_cnt_${ParentTable}
	SET ISOLATION TO DIRTY READ
	WHENEVER ERROR CONTINUE
	FETCH crs_cnt_${ParentTable} INTO row_count
	WHENEVER ERROR CALL ${ErrorMngmtFunction}
	SET ISOLATION TO COMMITTED READ

	# if FETCH fails, count = 0, the, get back to query
	IF sqlca.sqlcode OR row_count = 0 THEN
		let row_count =0
	END IF
	FREE crs_cnt_${ParentTable}
	RETURN row_count
END FUNCTION		## ${SqlGetQBECountFct}_${ParentTable}

#########################################################
FUNCTION ${SqlOpenPKyScrCrsFct}${ParentTable}(qry_stmt)
## ${SqlOpenPKyScrCrsFct}${ParentTable}: Build the query generated by CONSTRUCT BY NAME,
## Declare and open the cursor
## inbound param: query predicate
## outbound parameter: query status
	DEFINE qry_stmt STRING
	DEFINE ${RecordPrefix}${ParentTable} STRING
	DEFINE row_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	# display the selected columns

	LET ${RecordPrefix}${ParentTable} = "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},${KeyMode},"record","","flat","    "); :Script>",
	" FROM ${ParentTable} ",
	"WHERE ",qry_stmt clipped,
	" ORDER BY <Script:print_table_columns($SRCHANDLE,${ParentTable},${KeyMode},"","","flat","",$endline,1); :Script>"
	
	PREPARE rech_${CursorSufx} FROM ${RecordPrefix}${ParentTable}

	# crs_scrl_${CursorSufx} : the first cursor selects all the primary keys (not all the table columns)

	DECLARE crs_scrl_${CursorSufx} SCROLL CURSOR <Script: if ( $DoTransactions eq 'true' ) { $OutLineNum=ffg_print($SRCHANDLE,"WITH HOLD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,1); }:Script> FOR rech_${CursorSufx}

	WHENEVER ERROR CONTINUE
	OPEN crs_scrl_${CursorSufx}
	WHENEVER ERROR CALL ${ErrorMngmtFunction}

	RETURN sqlca.sqlcode
END FUNCTION		## ${SqlOpenPKyScrCrsFct}${ParentTable}

#######################################################################
FUNCTION ${SqlNextPrevFct}_${ParentTable}(offset)
## ${SqlNextPrevFct}_${ParentTable} : FETCH NEXT OR PREVIOUS RECORD
	DEFINE offset SMALLINT
	define lsql_stmt_status,record_found integer
	DEFINE pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

WHENEVER ERROR CONTINUE
	FETCH RELATIVE offset crs_scrl_${CursorSufx} INTO pky.*
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	CASE 
	WHEN sqlca.sqlcode = 100 
		LET record_found = 0
	WHEN sqlca.sqlcode < 0 
		LET record_found = -1
	OTHERWISE
		LET lsql_stmt_status = 1
		CALL ${SqlFetchFullRowFct}_${ParentTable} (pky.*)
		RETURNING record_found
		
	END CASE
	RETURN record_found,pky.*
END FUNCTION		## ${SqlNextPrevFct}_${ParentTable}

######################################################################################
FUNCTION ${SqlFetchFullRowFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable})
## ${SqlFetchFullRowFct}_${ParentTable} : read a complete row accessing by primary key
## inbound parameter : primary key
## outbound parameter: sql_stmt_status and row contents
	DEFINE sql_stmt_status smallint
	DEFINE ${PrmryKeyPrefix}_${ParentTable} RECORD 
	<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	<Script: if ( $ParentLookupTables > 0 ) {
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
	}:Script>

	# read the table, access on primary key
WHENEVER ERROR CONTINUE
	OPEN crs_row_${CursorSufx} 
	USING ${PrmryKeyPrefix}_${ParentTable}.*

	FETCH crs_row_${CursorSufx}  INTO ${MstTableRec}.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	CASE
	WHEN  sqlca.sqlcode = 100 
		LET sql_stmt_status = 0
	WHEN  sqlca.sqlcode < 0 
		LET sql_stmt_status = -1
	OTHERWISE
		LET sql_stmt_status = 1
		CALL ${SetFormRecordFct}${ModuleName}_${MainFormName}(${MstTableRec}.*)
		RETURNING ${MstInpFormRec}.*
		<Script: if ($ParentLookupTables > 0 ) {
			bld_lookup_calls ($ParentTable,$MstTableRec);
		}:Script>
	END CASE
	RETURN sql_stmt_status
END FUNCTION		## ${SqlFetchFullRowFct}_${ParentTable}

########################################################################
FUNCTION ${SqlInsertFct}_${ParentTable}()
## ${SqlInsertFct}_${ParentTable}: INSERT in table ${ParentTable} 
	DEFINE lsql_stmt_status integer
	DEFINE row_count SMALLINT
	DEFINE pky RECORD
		 <Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
WHENEVER ERROR CONTINUE
	EXECUTE pr_ins_${CursorSufx} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"all","",${MstTableRec},"","    ",""):Script>
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
		<Script:catch_last_serial_value($SRCHANDLE,${ParentTable},"pky"):Script>
		
	END IF
	RETURN lsql_stmt_status,pky.*
END FUNCTION		## ${SqlInsertFct}_${ParentTable}

################################################################################
FUNCTION ${SqlUpdateFct}_${ParentTable}(pky)
## ${SqlUpdateFct}_${ParentTable} :update ${ParentTable} record
	DEFINE lsql_stmt_status integer
	DEFINE pky RECORD 
	<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
END RECORD

WHENEVER ERROR CONTINUE
	EXECUTE pr_upd_${CursorSufx} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"attr","",${MstTableRec},"","    ",$endline,1):Script>,
	pky.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlUpdateFct}_${ParentTable}

#############################################################################################
FUNCTION ${SqlDeleteFct}_${ParentTable}(pky)
## ${SqlDeleteFct}_${ParentTable} :delete current row in table ${ParentTable} 
	DEFINE lsql_stmt_status smallint
	DEFINE pky RECORD 
	<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
END RECORD

WHENEVER ERROR CONTINUE
	EXECUTE pr_del_${CursorSufx} 
	USING pky.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE
		LET lsql_stmt_status=0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlDeleteFct}_${ParentTable}

################################################################################
FUNCTION ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky)
##   ${SqlCheckPrimaryKeyFct}_${ParentTable} : Check if primary key exists
## inbound parameter : record of primary key
## outbound parameter:  status > 0  if exists, 0 if no record, < 0 if error
	DEFINE pky RECORD 
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE pk_status INTEGER

WHENEVER ERROR CONTINUE
	OPEN crs_${PrmryKeyPrefix}_${CursorSufx} USING  pky.*
	FETCH crs_${PrmryKeyPrefix}_${CursorSufx} 
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	CASE sqlca.sqlcode
	WHEN 0 
		let pk_status = 1
	WHEN 100
		let pk_status = 0
	WHEN sqlca.sqlerrd[2] = 104
		let pk_status = -1		# record locked
	WHEN sqlca.sqlcode < 0
		let pk_status = sqlca.sqlcode
	END CASE

	RETURN pk_status
END FUNCTION		## ${SqlCheckPrimaryKeyFct}${ParentTable}

################################################################################################
FUNCTION ${SetFormRecordFct}${ModuleName}_${MainFormName}(tbl_contents)
## ${SetFormRecordFct}${ModuleName}_${MainFormName}: assigns table values to form fields values
	DEFINE frm_contents RECORD
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent",".*","all","false","","\t\t")  :Script>
	END RECORD

	DEFINE tbl_contents RECORD
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	INITIALIZE frm_contents.* TO NULL
	<Script:set_form_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents",$MstTableRec) :Script>
	RETURN frm_contents.*
END FUNCTION		## ${SetFormRecordFct}${ModuleName}_${MainFormName}

################################################################################################
FUNCTION ${SetTableRecordFct}${ModuleName}_${ParentTable}(sql_stmt,frm_contents)
## ${SetTableRecordFct}${ModuleName}_${ParentTable}: assigns form fields value to table values
	DEFINE sql_stmt SMALLINT					# 1 => Insert, 2 => Update
	DEFINE frm_contents RECORD
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent",".*","all","false","","\t\t")  :Script>
	END RECORD

	DEFINE tbl_contents RECORD
		<Script:define_table_variables ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	INITIALIZE tbl_contents.* TO NULL
	<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},"tbl_contents",$MstInpFormRec) :Script>

	RETURN tbl_contents.*
END FUNCTION		## ${SetTableRecordFct}${ModuleName}_${ParentTable}

<Script: if ($ParentLookupTables > 0 ) {
##################################################################################################
## builds lookup queries
	bld_lookup_functions ( $ParentTable );
}:Script>

<Script: if ( $ParentLookupTables > 0 && $DoPickListWindows eq "true" ) { 
	bld_picklist_windows($ModuleName) ;
} :Script>

<Script: if ($DoHelp eq 'true') {
	build_fct_Help(${MainFormName},${ParentTable});
   build_doc_Help(${MainFormName},$mstr_clnt_module)
}:Script>

<Script: if ( defined($ChildTable) && defined($ChildTemplate)) {
	if (defined($ChildFormFile)) {
		bld_child_module($ModuleName,$ChildFormFile,$ChildTemplate) ;
	} else {
		bld_child_module($ModuleName,$MainFormFile,$ChildTemplate) ;
	}
}:Script>