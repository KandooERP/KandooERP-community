<Script:our $MstTableRec=${TblPrfx} . ${ModuleName} :Script>noprint}
<Script:our $MstInpFormRec=${SRInpPrfx} . ${ModuleName} :Script>noprint
<Script:our $MstSavFormRec=${SRSavPrfx} . ${ModuleName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
@GlobalDef
@ModuleDef
<AddRqrmnt:fgl::common/generic_functions.4gl:AddRqrmnt> 
# module  generated by Querix Ffg(c) 
# Generated on ${GenerationTS}
# Main template ${MainModuleTemplate} 

<Script: $QxWidgetsCount=define_Widgets ($SRCHANDLE,$MainFormName,".*",".*") :Script> 
DATABASE ${DatabaseName}
DEFINE ${ModuleVarPrefix}program CHAR(30)

<Script: if ( $ParentLookupTables > 0 ) { 
	$IndentLevel=1;
	define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
}:Script>
	DEFINE g_${ParentTable} RECORD LIKE ${ParentTable}.*

MAIN
@Define
@Init 
	DEFER INTERRUPT
	
	<Script: if ($DoHelp eq 'true') {
	OPTIONS
		$line="help file \"${ModuleName}.iem\",";
		$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
		$line="help key ${Helpkey}";
		$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
	} :Script>
	# WHENEVER ERROR CALL ${ErrorMngmtFunction}
	# CALL ui_init(0) 
	LET ${ModuleVarPrefix}program="p_${ModuleName}_${ParentTable}"

	CALL main_${ModuleName}_${ParentTable}()

END MAIN

##########################################################################
FUNCTION mc_${ModuleName}_sccs()
## definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION
##########################################################################
FUNCTION main_${ModuleName}_${ParentTable} ()
## this module's main function called by MAIN
	CALL init_program("${DatabaseName}",${ModuleVarPrefix}program)
	
	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}"
	<Script: if ( $QxWidgetsCount > 0 ) { 
		$line=sprintf "CALL %s_%s()\n",${InitWidgetsFct},$ModuleName;
		$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE); 
		}  :Script>

	CALL ${SqlPrepareQueriesFct}_${ModuleName}_parent () # initialize all cursors on master table

	CALL menu_${ModuleName}_${ParentTable}()      

	CLOSE WINDOW ${MainFormName}

END FUNCTION

######################################################################
FUNCTION menu_${ModuleName}_${ParentTable} ()
## menu_${ModuleName}_${ParentTable}
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nbsel_${ParentTable} INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE record_num INTEGER
	DEFINE action smallint
	DEFINE xnumber smallint
	DEFINE arr_elem_num smallint
	DEFINE ${PrmryKeyPrefix}_${ParentTable} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD
	
	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD
	
	DEFINE record_found INTEGER
	DEFINE lookup_status INTEGER

	LET nbsel_${ParentTable} = 0
	MENU "${ParentTable}"
	BEFORE MENU
		HIDE OPTION "${NextOption}","${PreviousOption}","${EditOption}","${SuppressOption}"
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 1000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		CLEAR FORM
		DISPLAY BY NAME ${MstInpFormRec}.*
		HIDE OPTION "${NextOption}","${PreviousOption}"

		CALL ${FrmConstructDatasetFct}_${ModuleName}() RETURNING nbsel_${ParentTable}
		IF nbsel_${ParentTable} > 0 THEN 
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*

			CASE
			WHEN record_found = 1
				LET record_num = 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			END CASE
			IF nbsel_${ParentTable} > 1 THEN
			   SHOW OPTION "${NextOption}"
			   NEXT OPTION "${NextOption}"
			END IF
			SHOW OPTION "${EditOption}","${SuppressOption}"
		ELSE 
			ERROR "${NorowsSelected}"
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${NextOption}" "${NextCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 2000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num <= nbsel_${ParentTable} THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*

			CASE 
			WHEN record_found = 0 
				ERROR "${Lastrow} ${ParentTable}"
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num + 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)

				IF record_num >= nbsel_${ParentTable} THEN
				   HIDE OPTION "${NextOption}"
				END IF
                IF record_num > 1 THEN
                	SHOW OPTION "${PreviousOption}"
                ELSE
                	HIDE OPTION "${PreviousOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst}  ${ParentTable} "
			NEXT OPTION "${QueryOption}" 
		END IF

	COMMAND "${PreviousOption}" "${PreviousCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 3000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num >= 1  THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(-1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*
			CASE 
			WHEN record_found = 0
				ERROR "${FirstRow} ${ParentTable}"
			WHEN record_found < -1
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num - 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				
				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)

				IF record_num = 1  THEN
				   HIDE OPTION "${PreviousOption}"
				END IF
                IF record_num < nbsel_${ParentTable} THEN
                	SHOW OPTION "${NextOption}"
                ELSE
                	HIDE OPTION "${NextOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 4000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CALL ${FrmAddRecordFct}_${ModuleName}() RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
		MESSAGE ""

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 5000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			ELSE
				CALL ${FrmEditRecordFct}_${ModuleName}(${PrmryKeyPrefix}_${ParentTable}.*,${MstInpFormRec}.*)
				RETURNING sql_stmt_status
			END IF
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 6000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			END IF
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_${ModuleName}(${PrmryKeyPrefix}_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		ELSE
			ERROR "${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${Quit}" "${QuitCom}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 9000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		EXIT MENU
	END MENU
END FUNCTION

#######################################################################
FUNCTION ${FrmConstructDatasetFct}_${ModuleName}()
## ${FrmConstructDatasetFct}_${ModuleName}_${MainFormName} : Query By Example on table ${ParentTable}
## Input selection criteria,
## prepare the query,
## open the data set
	DEFINE ${RecordPrefix}${ParentTable},where_clause STRING
	DEFINE xnumber,sql_stmt_status INTEGER
	DEFINE l_pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD
	
	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL
	DISPLAY BY NAME ${MstInpFormRec}.*
	

	CONSTRUCT BY NAME where_clause ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",$ParentTable,".*",".*","false","tabname","\t\t","","","reset"):Script>
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			$Line=sprin tf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
		 }:Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT field_touched(${ParentTable}.*) AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		MESSAGE "${CancelCom}"
		LET int_flag=0
	ELSE
		LET xnumber = ${SqlGetQBECountFct}_${ParentTable}(where_clause)
		IF xnumber > 0 THEN
			LET sql_stmt_status = ${SqlOpenPKyScrCrsFct}_${ParentTable}(where_clause)
		ELSE
			RETURN -1
		END IF
			
	END IF
	RETURN xnumber
END FUNCTION		## ${QueryOption}_${ParentTable}

#######################################################################
# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName} : displays the form record after reading and displays lookup records if any
# inbound: Form record.*
FUNCTION ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec})
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>
	CLEAR FORM
	DISPLAY BY NAME ${MstInpFormRec}.*

	<Script: if ( $ParentLookupTables > 0 ) {
		$IndentLevel=0;
		bld_lookup_calls ($FormName,"parent",$ParentTable,$MstInpFormRec);
		$IndentLevel=1;
		$Line = sprintf "\nDISPLAY BY NAME " ;
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
		print_form_fields ($SRCHANDLE,$MainFormName,"parent",".*","lookup",".*",".*",${SRLUpPrfx}."tabname","",'skip') ;
	}:Script>

END FUNCTION		# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}


####################################################################
## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}: add a new ${ParentTable} row
FUNCTION ${FrmAddRecordFct}_${ModuleName}()
	DEFINE sql_stmt_status SMALLINT
	DEFINE rows_count SMALLINT
	DEFINE nbre_${ParentTable} ,action SMALLINT
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD

	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD
	
	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL

	WHILE true
		LET int_flag = false
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",$ParentTable,".*",".*","false",${MstInpFormRec},"\t\t\t","","","reset"):Script>
		WITHOUT DEFAULTS
		<Script: 
		print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","pkey|fkey",${MstInpFormRec},"       ","reset" )
		:Script>
		
		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")  # Call online help\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		} :Script>
		END INPUT
		IF int_flag = TRUE THEN
			# Resign from input
			LET int_flag=false
			DISPLAY BY NAME ${MstInpFormRec}.*
			MESSAGE "${CancelCom} ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(3,10,"${AddOption}") RETURNING action
		CASE action
		WHEN 0            # I want to edit the input, remains displayed 'as is'
			CONTINUE WHILE   # On laisse tout affiche comme tel
			
		WHEN 2            # On valide la transaction
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			}:Script>
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}(1,${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			CALL ${SqlInsertFct}_${ParentTable}(${MstTableRec}.*) 
			returning sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","pkey","",$MstTableRec,"flat","",""); :Script>

			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${AddOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${AddOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE

		WHEN 0
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			}:Script>
			EXIT WHILE
		END CASE
	END WHILE
	# ${MstTableRec}
	RETURN sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","pkey","",$MstTableRec,"flat","",""); :Script>
END FUNCTION		## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}


#######################################################################
# ${FrmEditRecordFct}_${ModuleName}_${MainFormName} : Edit a ${ParentTable} RECORD
# inbound: table primary key
FUNCTION ${FrmEditRecordFct}_${ModuleName}(pky,${MstInpFormRec})
	DEFINE action SMALLINT  
	DEFINE sql_stmt_status,dummy SMALLINT

	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD

	DEFINE ${MstSavFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD
	<Script: if ( $ParentLookupTables > 0 ) {
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
	}:Script>
	DEFINE rows_count SMALLINT
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	## check if record can be accessed
	WHILE true
		LET int_flag = false
		# Save Screen Record values before altering
		LET ${MstSavFormRec}.* = ${MstInpFormRec}.* 
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER ERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN crs_upd_%s USING pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH crs_upd_%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER ERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		}:Script>
		
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,"parent",$ParentTable,".*","attr","false",${MstInpFormRec},"         ","","","reset")  :Script>
		WITHOUT DEFAULTS
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","fkey",${MstInpFormRec},"       ","reset" );
		}:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
					
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON KEY (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE) ;
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
		}:Script>
		END INPUT
		IF int_flag = TRUE THEN
			LET int_flag=false
			# Restore previous value
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY BY NAME ${MstInpFormRec}.*
			<Script: if ( $ParentLookupTables > 0 ) {
					bld_lookup_calls ($FormName,"parent",$ParentTable,$MstInpFormRec);
					$Line = sprintf "DISPLAY BY NAME " ;
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,0,0) ;
					print_form_fields ($SRCHANDLE,$MainFormName,"parent",".*","lookup",".*",".*",${SRLUpPrfx}."tabname","",'skip') ;
			}:Script>
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
			ROLLBACK WORK
			MESSAGE "$CancelCom ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(4,10,"${EditOption}") RETURNING action

		CASE 
		WHEN action = 0
			# Redo, leave values as modified
			CONTINUE WHILE
		WHEN action = 1 
			# Resign, restore original values
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY BY NAME ${MstInpFormRec}.*
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
			ROLLBACK WORK
			EXIT WHILE   # Cancel operation

		WHEN action = 2   
			# confirm update
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}(2,${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			
			# Perform the prepared update statement
			LET sql_stmt_status = ${SqlUpdateFct}_${ParentTable}(pky.*,${MstTableRec}.*) 
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${EditOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO COMMITTED READ\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${EditOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO COMMITTED READ\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmEditRecordFct}_${ModuleName}(pky)


#######################################################################
# DELETE A ${ParentTable} row
# inbound: table primary key
FUNCTION ${FrmSuppressRecordFct}_${ModuleName}(pky)
	DEFINE action SMALLINT
	DEFINE dummy SMALLINT
	DEFINE sql_stmt_status SMALLINT
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	WHILE TRUE
		CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER ERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN crs_upd_%s USING pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH crs_upd_%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER ERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		}:Script>
		CASE 
		WHEN action = 0 OR action = 1 
			# can the delete operation
			EXIT WHILE  
		WHEN action = 2
			# Validate the delete operation
			CALL ${SqlDeleteFct}_${ParentTable}(pky.*) RETURNING sql_stmt_status
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${SuppressOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>

			WHEN sql_stmt_status < 0
				CALL display_error("${SuppressOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmSuppressRecordFct}_${ModuleName}(pky)

#########################################################################
#  Build, prepare, declare and initialize main queries and cursors
FUNCTION ${SqlPrepareQueriesFct}_${ModuleName}_parent ()
	DEFINE sql_stmt STRING

	# PREPARE cursor for full master table row contents, access by primary key
	LET sql_stmt=
	"SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","all","","","flat","",""):Script>",
	" FROM ${ParentTable} ",
	"WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_mrw_${ParentTable} FROM sql_stmt
	DECLARE crs_row_${ParentTable} CURSOR FOR sel_mrw_${ParentTable}

	# PREPARE cursor for row test / check if locked
	let sql_stmt= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_${PrmryKeyPrefix}_${ParentTable} FROM sql_stmt
	DECLARE crs_${PrmryKeyPrefix}_${ParentTable} CURSOR FOR sel_${PrmryKeyPrefix}_${ParentTable}
	
	# PREPARE cursor for SELECT FOR UPDATE
	let sql_stmt= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>",
	" FOR UPDATE"

	PREPARE sel_upd_${ParentTable} FROM sql_stmt
	DECLARE crs_upd_${ParentTable} CURSOR FOR sel_upd_${ParentTable}

	# PREPARE INSERT statement
	LET sql_stmt =
	"INSERT INTO ${ParentTable} (<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","all","","","flat","",""):Script>)",
	" VALUES ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","all","placeholders","","flat","",1); :Script>)" 
	PREPARE pr_ins_${ParentTable} FROM sql_stmt

	# PREPARE UPDATE statement
	let sql_stmt=
	"UPDATE ${ParentTable} ",
	"SET ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","attr","","","flat","",""); :Script>)",
	" = ( <Script:print_table_columns ($SRCHANDLE,${ParentTable},"","","attr","placeholders","","flat","",""); :Script>)",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 
	PREPARE pr_upd_${ParentTable} FROM sql_stmt

	# PREPARE DELETE statement
	let sql_stmt= "DELETE FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 

	PREPARE pr_del_${ParentTable} FROM sql_stmt

END FUNCTION		## ${SqlPrepareQueriesFct}_${ModuleName}_parent


#########################################################
# Open the QBE cursor,
# counts returned rows_count,
# open the data set,
# fetch first row
# inbound parameter: query predicate
# outbound parameters: number of rows retried
FUNCTION ${SqlGetQBECountFct}_${ParentTable}(qry_stmt)
	DEFINE qry_stmt STRING
	DEFINE ${RecordPrefix}${ParentTable} STRING
	DEFINE rows_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	LET ${RecordPrefix}${ParentTable} = 
		"SELECT count(*) FROM ${ParentTable}",
		" WHERE ",qry_stmt CLIPPED
		

	PREPARE prp_cnt_${ParentTable} FROM ${RecordPrefix}${ParentTable}
	DECLARE crs_cnt_${ParentTable} CURSOR for prp_cnt_${ParentTable}

	OPEN crs_cnt_${ParentTable}
	SET ISOLATION TO DIRTY READ
	WHENEVER ERROR CONTINUE
	FETCH crs_cnt_${ParentTable} INTO rows_count
	WHENEVER ERROR CALL ${ErrorMngmtFunction}
	SET ISOLATION TO COMMITTED READ

	# if FETCH fails, count = 0, the, get back to query
	IF sqlca.sqlcode OR rows_count = 0 THEN
		let rows_count =0
	END IF
	FREE crs_cnt_${ParentTable}
	RETURN rows_count
END FUNCTION		## ${SqlGetQBECountFct}_${ParentTable}

#########################################################
FUNCTION ${SqlOpenPKyScrCrsFct}_${ParentTable}(qry_stmt)
## Build the query generated by CONSTRUCT BY NAME,
## Declare and open the cursor
## inbound param: query predicate
## outbound parameter: query status
	DEFINE qry_stmt STRING
	DEFINE ${RecordPrefix}${ParentTable} STRING
	DEFINE rows_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD

	# display the selected columns

	LET ${RecordPrefix}${ParentTable} = "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","",${KeyMode},"record","","flat","    "); :Script>",
	" FROM ${ParentTable} ",
	"WHERE ",qry_stmt clipped,
	" ORDER BY <Script:print_table_columns($SRCHANDLE,${ParentTable},"","",${KeyMode},"","","flat","",$endline,1); :Script>"
	
	PREPARE rech_${CursorSufx} FROM ${RecordPrefix}${ParentTable}

	# crs_scrl_${CursorSufx} : the first cursor selects all the primary keys (not all the table columns)

	DECLARE crs_scrl_${CursorSufx} SCROLL CURSOR <Script: if ( $DoTransactions eq 'true' ) { $OutLineNum=ffg_print($SRCHANDLE,"WITH HOLD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE,1); }:Script> FOR rech_${CursorSufx}

	WHENEVER ERROR CONTINUE
	OPEN crs_scrl_${CursorSufx}
	WHENEVER ERROR CALL ${ErrorMngmtFunction}

	RETURN sqlca.sqlcode
END FUNCTION		## ${SqlOpenPKyScrCrsFct}_${ParentTable}

#######################################################################
FUNCTION ${SqlNextPrevFct}_${ParentTable}(offset)
## ${SqlNextPrevFct}_${ParentTable} : FETCH NEXT OR PREVIOUS RECORD
	DEFINE offset SMALLINT
	define lsql_stmt_status,record_found integer
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD

WHENEVER ERROR CONTINUE
	FETCH RELATIVE offset crs_scrl_${CursorSufx} INTO pky.*
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	CASE 
	WHEN sqlca.sqlcode = 100 
		LET record_found = 0
		
	WHEN sqlca.sqlcode < 0 
		LET record_found = -1
	OTHERWISE
		LET lsql_stmt_status = 1
		LET record_found = 1
		#CALL ${SqlFetchFullRowFct}_${ParentTable} (pky.*)
		#RETURNING record_found,${MstInpFormRec}.*
		
	END CASE
	RETURN record_found,pky.*
END FUNCTION		## ${SqlNextPrevFct}_${ParentTable}

#########################################################################################
FUNCTION ${SqlFetchFullRowFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable})
# ${SqlFetchFullRowFct}_${ParentTable} : read a complete row accessing by primary key
# inbound parameter : primary key
# outbound parameter: sql_stmt_status and row contents
	DEFINE sql_stmt_status smallint
	DEFINE ${PrmryKeyPrefix}_${ParentTable} RECORD 
	<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD
	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",${ParentTable},"all","false","","\t\t")  :Script>
	END RECORD

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$InLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	# read the table, access on primary key
WHENEVER ERROR CONTINUE
	OPEN crs_row_${ParentTable} 
	USING ${PrmryKeyPrefix}_${ParentTable}.*

	FETCH crs_row_${ParentTable}  INTO ${MstTableRec}.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	CASE
	WHEN  sqlca.sqlcode = 100 
		LET sql_stmt_status = 0
	WHEN  sqlca.sqlcode < 0 
		LET sql_stmt_status = -1
	OTHERWISE
		LET sql_stmt_status = 1
		CALL ${SetFormRecordFct}_${ModuleName}(${MstTableRec}.*)
		RETURNING ${MstInpFormRec}.*
	END CASE
	RETURN sql_stmt_status,${MstInpFormRec}.*
END FUNCTION		## ${SqlFetchFullRowFct}_${ParentTable}

########################################################################
FUNCTION ${SqlInsertFct}_${ParentTable}(${MstTableRec})
## INSERT in table ${ParentTable} 
	DEFINE lsql_stmt_status integer
	DEFINE rows_count SMALLINT
	DEFINE pky RECORD
		 <Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD
WHENEVER ERROR CONTINUE
	EXECUTE pr_ins_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","all","",${MstTableRec},"","    ",""):Script>
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
		<Script:catch_last_serial_value($SRCHANDLE,${ParentTable},"pky"):Script>
		
	END IF
	RETURN lsql_stmt_status,pky.*
END FUNCTION		## ${SqlInsertFct}_${ParentTable}

########################################################################
FUNCTION ${SqlUpdateFct}_${ParentTable}(pky,${MstTableRec})
## ${SqlUpdateFct}_${ParentTable} :update ${ParentTable} record
	DEFINE lsql_stmt_status integer
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE ${MstTableRec} RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

WHENEVER ERROR CONTINUE
	EXECUTE pr_upd_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","attr","",${MstTableRec},"","    ",$endline,1):Script>,
	pky.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlUpdateFct}_${ParentTable}

##############################################################################################
FUNCTION ${SqlDeleteFct}_${ParentTable}(pky)
## ${SqlDeleteFct}_${ParentTable} :delete current row in table ${ParentTable} 
	DEFINE lsql_stmt_status smallint
	DEFINE pky RECORD 
	<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
END RECORD

WHENEVER ERROR CONTINUE
   EXECUTE pr_del_${ParentTable} 
   USING pky.*

WHENEVER ERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE
		LET lsql_stmt_status=0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlDeleteFct}_${ParentTable}

################################################################################
FUNCTION ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky)  
##   ${SqlCheckPrimaryKeyFct}_${ParentTable} : Check if primary key exists
## inbound parameter : record of primary key
## outbound parameter:  status > 0  if exists, 0 if no record, < 0 if error
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	DEFINE pk_status INTEGER

WHENEVER ERROR CONTINUE
	OPEN crs_${PrmryKeyPrefix}_${ParentTable} USING  pky.*
	FETCH crs_${PrmryKeyPrefix}_${ParentTable} 
WHENEVER ERROR CALL ${ErrorMngmtFunction}

	CASE sqlca.sqlcode
	WHEN 0 
		let pk_status = 1
	WHEN 100
		let pk_status = 0
	WHEN sqlca.sqlerrd[2] = 104
		let pk_status = -1		# record locked
	WHEN sqlca.sqlcode < 0
		let pk_status = sqlca.sqlcode
	END CASE

	RETURN pk_status
END FUNCTION		## ${SqlCheckPrimaryKeyFct}_${ParentTable}

################################################################################################
FUNCTION ${SetFormRecordFct}_${ModuleName}(tbl_contents)
## ${SetFormRecordFct}_${ModuleName}_${MainFormName}: assigns table values to form fields values
	DEFINE frm_contents RECORD
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",".*","all","false","","\t\t")  :Script>
	END RECORD

	DEFINE tbl_contents RECORD
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	INITIALIZE frm_contents.* TO NULL
	<Script:set_form_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents","tbl_contents") :Script>
	RETURN frm_contents.*
END FUNCTION		## ${SetFormRecordFct}${ModuleName}_${MainFormName}

################################################################################################
FUNCTION ${SetTableRecordFct}_${MainFormName}_${ParentTable}(sql_stmt,frm_contents)
## ${SetTableRecordFct}_${MainFormName}_${ParentTable}: assigns form fields value to table values
	DEFINE sql_stmt SMALLINT					# 1 => Insert, 2 => Update
	DEFINE pky RECORD 
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},${KeyMode},"record","pky","    "):Script>
	END RECORD
	
	DEFINE frm_contents RECORD
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"parent","parent",".*","all","false","","\t\t")  :Script>
	END RECORD

	DEFINE tbl_contents RECORD
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"all","record",$MstTableRec,"    "):Script>
	END RECORD

	INITIALIZE tbl_contents.* TO NULL
	<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents","tbl_contents") :Script>

	RETURN tbl_contents.*
END FUNCTION		## ${SetTableRecordFct}${MainFormName}_${ParentTable}

<Script: if ($ParentLookupTables > 0 ) {
	bld_lookup_functions ( ${MainFormName},$ParentTable,"parent" );
}:Script>

<Script: if ( $QxWidgetsCount > 0 ) { 
	bld_populate_widgets_calls_function($SRCHANDLE,$MainFormName,".*",".*") ;
	bld_populate_widgets_functions($SRCHANDLE,$MainFormName,".*",".*") ;
}  :Script>

<Script: if ( $ParentLookupTables > 0 && $DoPickListWindows eq "true" ) { 
	bld_picklist_windows($ModuleName) ;
} :Script>

<Script: if ($DoHelp eq 'true') {
	build_fct_Help(${MainFormName},${ParentTable});
   build_doc_Help(${MainFormName},$mstr_clnt_module)
}:Script>