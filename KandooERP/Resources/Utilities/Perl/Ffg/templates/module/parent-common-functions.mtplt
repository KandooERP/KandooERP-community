#######################################################################
# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName} : displays the form record after reading and displays lookup records if any
# inbound: Form record.*
FUNCTION ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(p_${MstInpFormRec})
	DEFINE p_${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}
	
	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	DISPLAY <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false",p_${MstInpFormRec},"\t\t\t","","","reset"):Script>
	TO <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false","TblName","\t\t\t","","","reset"):Script>
	<Script: if ( $ParentLookupTables > 0 ) {
		bld_lookup_calls ($FormName,"parent",$ParentTable,${MstInpFormRecAsParam},"display");
	}:Script>

END FUNCTION		# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}


####################################################################
## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}: add a new ${ParentTable} row
FUNCTION ${FrmAddRecordFct}_${ModuleName}_${MainFormName}()
	DEFINE sql_stmt_status SMALLINT
	DEFINE rows_count SMALLINT
	DEFINE nbre_${ParentTable} ,action SMALLINT

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL

	WHILE true
		LET int_flag = false
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,".*","parent",".*","false","false",${MstInpFormRec},"\t\t\t","","","reset"):Script>						
		WITHOUT DEFAULTS
		<Script: 
		print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","pkey|fkey",${MstInpFormRec},"       ",$GlobalReferenceRecord )
		:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")  # Call online help\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		END INPUT
		IF int_flag = TRUE THEN
			# Resign from input
			LET int_flag=false
			INITIALIZE ${MstInpFormRec}.* TO NULL
			CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRec}.*)
			EXIT WHILE
		END IF 

		CALL confirm_operation(3,10,"${AddOption}") RETURNING action
		CASE action
		WHEN 0            # I want to edit the input, remains displayed 'as is'
			CONTINUE WHILE   # Nothing is done, leave as is
			
		WHEN 2            # We confirm the transaction
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			}:Script>
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}('+',${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			CALL ${SqlInsertFct}_${ParentTable}_${ModuleName}(${MstTableRec}.*) 
			returning sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>

			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${AddOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${AddOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE

		WHEN 0
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			}:Script>
			EXIT WHILE
		END CASE
	END WHILE
	# ${MstTableRec}
	RETURN sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>
END FUNCTION		## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}


#######################################################################
# ${FrmEditRecordFct}_${ModuleName}_${MainFormName} : Edit a ${ParentTable} RECORD
# inbound: table primary key
FUNCTION ${FrmEditRecordFct}_${ModuleName}_${MainFormName}(p_pky,${MstInpFormRecAsParam})
	DEFINE action SMALLINT  
	DEFINE sql_stmt_status,dummy SMALLINT

	DEFINE ${MstInpFormRecAsParam} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstSavFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record to save the data
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE p_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}									#Primary key record 
	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>
	DEFINE rows_count SMALLINT

	WHILE true
		LET int_flag = false
		# Save Screen Record values before altering
		LET ${MstSavFormRec}.* = p_${MstInpFormRec}.* 
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel} \"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN ${UpdCursorPrefix}%s USING p_pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH ${UpdCursorPrefix}%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		}:Script>
	
		INPUT BY NAME <Script: print_form_fields (  $SRCHANDLE,$MainFormName,".*","parent",".*", "false","attr", ${MstInpFormRecAsParam},"\t\t\t","","","reset"):Script>
		WITHOUT DEFAULTS
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","fkey",${MstInpFormRecAsParam},"       ",$GlobalReferenceRecord );
		}:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
					
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,0,0) ;
		}:Script>
		END INPUT
		IF int_flag = TRUE THEN
			LET int_flag=false
			# Restore previous value
			LET ${MstInpFormRecAsParam}.* = ${MstSavFormRec}.*
			CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRecAsParam}.*)
			EXECUTE IMMEDIATE "SET ISOLATION TO ${DefaultIsolationLevel}"
			ROLLBACK WORK
			MESSAGE "${CancelCom} ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(4,10,"${EditOption}") RETURNING action

		CASE 
		WHEN action = 0
			# Redo, leave values as modified
			CONTINUE WHILE
		WHEN action = 1 
			# Resign, restore original values
			LET ${MstInpFormRecAsParam}.* = ${MstSavFormRec}.*
			CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRecAsParam}.*)
			EXECUTE IMMEDIATE "SET ISOLATION TO ${DefaultIsolationLevel}"
			ROLLBACK WORK
			EXIT WHILE   # Cancel operation
 
		WHEN action = 2   
			# confirm update: set the table record from the input record
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}("U",p_${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			
			# Perform the prepared update statement
			LET sql_stmt_status = ${SqlUpdateFct}_${ParentTable}_${ModuleName}(p_pky.*,${MstTableRec}.*) 
			CASE 
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] > 0 
				MESSAGE "${EditOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] = 0 
				MESSAGE "${EditOption} ${ParentTable} Could not find rows"

			WHEN sql_stmt_status < 0
				CALL display_error("${EditOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmEditRecordFct}_${ModuleName}_${MainFormName}(p_pky)


#######################################################################
# DELETE A ${ParentTable} row
# inbound: table primary key
FUNCTION ${FrmSuppressRecordFct}_${ModuleName}_${MainFormName}(pky)
	DEFINE action SMALLINT
	DEFINE dummy SMALLINT
	DEFINE sql_stmt_status SMALLINT
	DEFINE pky 	${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record  

	WHILE TRUE
		CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN ${UpdCursorPrefix}%s USING pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH ${UpdCursorPrefix}%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		}:Script>
		CASE 
		WHEN action = 0 OR action = 1 
			# cancel the delete operation
			EXIT WHILE  
		WHEN action = 2
			# Validate the delete operation
			CALL ${SqlDeleteFct}_${ParentTable}_${ModuleName}(pky.*) RETURNING sql_stmt_status
			CASE 
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] > 0 
				MESSAGE "${SuppressOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] = 0 
				MESSAGE "${SuppressOption} ${ParentTable} Could not find rows"
			WHEN sql_stmt_status < 0
				CALL display_error("${SuppressOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmSuppressRecordFct}_${ModuleName}_${MainFormName}(pky)

#########################################################################
#  Build, prepare, declare and initialize main queries and cursors
FUNCTION ${SqlPrepareQueriesFct}_${ModuleName}_parent ()
	DEFINE sql_stmt_text STRING

	# PREPARE cursor for full master table row contents, access by primary key
	LET sql_stmt_text=
	"SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","all","","","flat","",""):Script>",
	" FROM ${ParentTable} ",
	"WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_mrw_${ParentTable} FROM sql_stmt_text
	DECLARE ${FullRowCursorPrefix}${ParentTable} CURSOR FOR sel_mrw_${ParentTable}

	# PREPARE cursor for row test / check if locked
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_${PrmryKeyPrefix}_${ParentTable} FROM sql_stmt_text
	DECLARE ${PkyCursorPrefix}${ParentTable} CURSOR FOR sel_${PrmryKeyPrefix}_${ParentTable}
	
	# PREPARE cursor for SELECT FOR UPDATE
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>",
	" FOR UPDATE"

	PREPARE sel_upd_${ParentTable} FROM sql_stmt_text
	DECLARE ${UpdCursorPrefix}${ParentTable} CURSOR FOR sel_upd_${ParentTable}

	# PREPARE INSERT statement
	LET sql_stmt_text =
	"INSERT INTO ${ParentTable} (<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","","","flat","",""):Script>)",
	" VALUES ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","placeholders","","flat","",1); :Script>)" 
	PREPARE pr_ins_${ParentTable} FROM sql_stmt_text

	# PREPARE UPDATE statement
	let sql_stmt_text=
	"UPDATE ${ParentTable} ",
	"SET ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","","","flat","",""); :Script>)",
	" = ( <Script:print_table_columns ($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","placeholders","","flat","",""); :Script>)",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 
	PREPARE pr_upd_${ParentTable} FROM sql_stmt_text

	# PREPARE DELETE statement
	let sql_stmt_text= "DELETE FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 

	PREPARE pr_del_${ParentTable} FROM sql_stmt_text

END FUNCTION		## ${SqlPrepareQueriesFct}_${ModuleName}_parent

#########################################################
FUNCTION ${SqlDeclarePkyScrCrsFct}_${ParentTable}_${ModuleName}(p_where_clause)
## Build the query generated by CONSTRUCT BY NAME,
## Declare and open the cursor
## inbound param: query predicate
## outbound parameter: query status
	DEFINE p_where_clause STRING
	DEFINE qbe_statement STRING
	DEFINE rows_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   

	LET qbe_statement = 
		"SELECT count(*) FROM ${ParentTable}",
		" WHERE ",p_where_clause CLIPPED,
		<Script: 
		if (defined($GlobalReferenceWhereClause)) { 
			$OutLineNum=ffg_print($SRCHANDLE,$GlobalReferenceWhereClause,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1);
		} else {
			$OutLineNum=ffg_print($SRCHANDLE," AND 1 = 1",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1);
		}:Script> 

	PREPARE prp_cnt_${ParentTable} FROM qbe_statement
	DECLARE crs_cnt_${ParentTable} CURSOR for prp_cnt_${ParentTable}

	OPEN crs_cnt_${ParentTable}
	SET ISOLATION TO ${LooseIsolationLevel}
	WHENEVER SQLERROR CONTINUE
	FETCH crs_cnt_${ParentTable} INTO rows_count
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	SET ISOLATION TO ${DefaultIsolationLevel}

	# if FETCH fails, count = 0, the, get back to query
	IF sqlca.sqlcode OR rows_count = 0 THEN
		let rows_count =0
	END IF
	FREE crs_cnt_${ParentTable}

	# display the selected columns

	LET qbe_statement = "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"record","","flat","    "); :Script>",
	" FROM ${ParentTable} ",
	"WHERE ",p_where_clause clipped,
	<Script: if (defined($GlobalReferenceWhereClause)) { $OutLineNum=ffg_print($SRCHANDLE,$GlobalReferenceWhereClause . "," ,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1); }:Script> 
	" ORDER BY <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","","flat","",$endline,1); :Script>"

	PREPARE prp_scrl_${PrmryKeyPrefix}_${ParentTable} FROM qbe_statement

	# ${ScrollCursorPrefix}_${PrmryKeyPrefix}_${ParentTable} : the first cursor selects all the primary keys (not all the table columns)
	DECLARE ${ScrollCursorPrefix}_${PrmryKeyPrefix}_${ParentTable} SCROLL CURSOR <Script: if ( $DoTransactions eq 'true' ) { $OutLineNum=ffg_print($SRCHANDLE,"WITH HOLD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1); }:Script> 
	FOR prp_scrl_${PrmryKeyPrefix}_${ParentTable}

	WHENEVER SQLERROR CONTINUE
	OPEN ${ScrollCursorPrefix}_${PrmryKeyPrefix}_${ParentTable}
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	RETURN rows_count,sqlca.sqlcode
END FUNCTION		## ${SqlDeclarePkyScrCrsFct}_${ParentTable}_${ModuleName}

#######################################################################
FUNCTION ${SqlNextPrevFct}_${ParentTable}(p_offset)
## ${SqlNextPrevFct}_${ParentTable} : FETCH NEXT OR PREVIOUS RECORD
	DEFINE p_offset SMALLINT
	define lsql_stmt_status,record_found integer
	DEFINE pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}


WHENEVER SQLERROR CONTINUE
	FETCH RELATIVE p_offset ${ScrollCursorPrefix}_${PrmryKeyPrefix}_${ParentTable} INTO pky.*
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE 
	WHEN sqlca.sqlcode = 100 
		LET record_found = 0
		
	WHEN sqlca.sqlcode < 0 
		LET record_found = -1
	OTHERWISE
		LET lsql_stmt_status = 1
		LET record_found = 1
		#CALL ${SqlFetchFullRowFct}_parent_${ModuleName} (pky.*)
		#RETURNING record_found,${MstInpFormRec}.*
		
	END CASE
	RETURN record_found,pky.*
END FUNCTION		## ${SqlNextPrevFct}_${ParentTable}

#########################################################################################
FUNCTION ${SqlFetchFullRowFct}_parent_${ModuleName}(p_pky)
# ${SqlFetchFullRowFct}_parent_${ModuleName} : read a complete row accessing by primary key
# inbound parameter : primary key
# outbound parameter: sql_stmt_status and row contents
	DEFINE sql_stmt_status smallint
	DEFINE p_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}	# Form image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	# read the table, access on primary key
WHENEVER SQLERROR CONTINUE
	OPEN ${FullRowCursorPrefix}${ParentTable} 
	USING p_pky.*

	FETCH ${FullRowCursorPrefix}${ParentTable}  INTO ${MstTableRec}.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	CASE
	WHEN  sqlca.sqlcode = 100 
		LET sql_stmt_status = 0
	WHEN  sqlca.sqlcode < 0 
		LET sql_stmt_status = -1
	OTHERWISE
		LET sql_stmt_status = 1
		CALL ${SetFormRecordFct}_${ParentTable}_${MainFormName}(${MstTableRec}.*)
		RETURNING ${MstInpFormRec}.*
	END CASE
	RETURN sql_stmt_status,${MstInpFormRec}.*
END FUNCTION		## ${SqlFetchFullRowFct}_parent_${ModuleName}

########################################################################
FUNCTION ${SqlInsertFct}_${ParentTable}_${ModuleName}(p_${MstTableRec})
## INSERT in table ${ParentTable} 
	DEFINE lsql_stmt_status integer
	DEFINE rows_count SMALLINT
	DEFINE pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record
	DEFINE p_${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record


WHENEVER SQLERROR CONTINUE
	EXECUTE pr_ins_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","",p_${MstTableRec},"","    ",""):Script>
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
		<Script:catch_last_serial_value($SRCHANDLE,${ParentTable},"pky"):Script>
		
	END IF
	RETURN lsql_stmt_status,pky.*
END FUNCTION		## ${SqlInsertFct}_${ParentTable}_${ModuleName}

########################################################################
FUNCTION ${SqlUpdateFct}_${ParentTable}_${ModuleName}(p_pky,p_${MstTableRec})
## ${SqlUpdateFct}_${ParentTable}_${ModuleName} :update ${ParentTable} record
	DEFINE sql_stmt_status integer
	DEFINE p_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   
	DEFINE p_${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

WHENEVER SQLERROR CONTINUE
	EXECUTE pr_upd_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","",p_${MstTableRec},"","    ",$endline,1):Script>,
	p_pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		
		LET sql_stmt_status = -1
	ELSE 
		LET sql_stmt_status = 0
	END IF
	RETURN sql_stmt_status
END FUNCTION		## ${SqlUpdateFct}_${ParentTable}_${ModuleName}

##############################################################################################
FUNCTION ${SqlDeleteFct}_${ParentTable}_${ModuleName}(p_pky)
## ${SqlDeleteFct}_${ParentTable}_${ModuleName} :delete current row in table ${ParentTable} 
	DEFINE lsql_stmt_status smallint
	DEFINE p_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   

WHENEVER SQLERROR CONTINUE
   EXECUTE pr_del_${ParentTable} 
   USING p_pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE
		LET lsql_stmt_status=0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlDeleteFct}_${ParentTable}_${ModuleName}

################################################################################
FUNCTION ${SqlCheckPrimaryKeyFct}_${ParentTable}(p_pky)  
##   ${SqlCheckPrimaryKeyFct}_${ParentTable} : Check if primary key exists
## inbound parameter : record of primary key
## outbound parameter:  status > 0  if exists, 0 if no record, < 0 if error
	DEFINE p_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   
	DEFINE pk_status INTEGER

WHENEVER SQLERROR CONTINUE
	OPEN ${PkyCursorPrefix}${ParentTable} USING  p_pky.*
	FETCH ${PkyCursorPrefix}${ParentTable} 
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE sqlca.sqlcode
	WHEN 0 
		let pk_status = 1
	WHEN 100
		let pk_status = 0
	WHEN sqlca.sqlerrd[2] = 104
		let pk_status = -1		# record locked
	WHEN sqlca.sqlcode < 0
		let pk_status = sqlca.sqlcode
	END CASE

	RETURN pk_status
END FUNCTION		## ${SqlCheckPrimaryKeyFct}_${ParentTable}

################################################################################################
FUNCTION ${SetFormRecordFct}_${ParentTable}_${MainFormName}(p_tbl_contents)
## ${SetFormRecordFct}_${ParentTable}_${MainFormName}_${MainFormName}: assigns table values to form fields values
	DEFINE frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE p_tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE frm_contents.* TO NULL
	<Script:set_form_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents","p_tbl_contents") :Script>
	RETURN frm_contents.*
END FUNCTION		## ${SetFormRecordFct}${ModuleName}_${MainFormName}

################################################################################################
FUNCTION ${SetTableRecordFct}_${MainFormName}_${ParentTable}(p_sql_stmt_type,p_frm_contents)
## ${SetTableRecordFct}_${MainFormName}_${ParentTable}: assigns form fields value to table values
	DEFINE p_sql_stmt_type CHAR(1)					# + => Insert, # => Update
	DEFINE pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable}					#Primary key record   
	DEFINE p_frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE tbl_contents.* TO NULL
	CASE p_sql_stmt_type
	WHEN "I"			# Prepare record for INSERT
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},${Section},"p_frm_contents","tbl_contents","I") :Script>
	WHEN "U"			# Prepare record for UPDATE
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},${Section},"p_frm_contents","tbl_contents","U") :Script>
	END CASE

	RETURN tbl_contents.*
END FUNCTION		## ${SetTableRecordFct}${MainFormName}_${ParentTable}

<Script: if ($ParentLookupTables > 0 ) {
	bld_lookup_functions ( ${MainFormName},$ParentTable,"parent" );
}:Script>

<Script: if ( $QxWidgetsCount > 0 ) { 
	bld_populate_widgets_calls_function($SRCHANDLE,$MainFormName,".*",".*") ;
	bld_populate_widgets_functions($SRCHANDLE,$MainFormName,".*",".*") ;
}  :Script>

<Script: if ( $ParentLookupTables > 0 && $DoPickListWindows eq "true" ) { 
	bld_picklist_windows($ModuleName) ;
} :Script>

<Script: if ($DoHelp eq 'true') {
	build_fct_Help(${MainFormName},${ParentTable});
   build_doc_Help(${MainFormName},$mstr_clnt_module)
}:Script>

<Script: if ( defined($ChildTable) && defined($ChildTemplate)) {
	if (defined($ChildFormFile)) {
		bld_child_module($ModuleName,$ChildFormFile,$ChildTemplate) ;
	} else {
		bld_child_module($ModuleName,$MainFormFile,$ChildTemplate) ;
	}
}:Script>
