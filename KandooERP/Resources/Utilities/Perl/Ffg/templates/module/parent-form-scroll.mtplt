<Script:our $FormShortName=$FormName; $FormShortName=~ s/^f_//; :Script>noprint
<Script:our $MstTableRec=${TblPrfx}${RecordPrefix}${ParentTable} :Script>noprint}
<Script:our $MstInpFormRec=${FrmPrfx}${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstSavFormRec=sav_${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
@GlobalDef
@ModuleDef
<AddRqrmnt:lib::lib_security:AddRqrmnt> 
<AddRqrmnt:lib::lib_tool:AddRqrmnt> 

# module  generated by KandooERP Ffg(c)
# Generated on ${GenerationTS}
# Main template ${MainModuleTemplate} 

<Script: $QxWidgetsCount=define_Widgets ($SRCHANDLE,$MainFormName,".*",".*") :Script> 
DATABASE ${DatabaseName}
GLOBALS
	DEFINE ${GlobalVarPrefix}${ParentTable} RECORD LIKE ${ParentTable}.*
END GLOBALS

	DEFINE ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} TYPE AS RECORD 		# This is the TYPE for form image record
		<Script:define_form_fields($SRCHANDLE,$MainFormName,".*","parent",".*","true|false","all","","\t\t")  :Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} TYPE AS RECORD 			# This is the TYPE for table image record
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"","","all","record",$MstTableRec,"    "):Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}pky_${ParentTable} TYPE AS RECORD 
		<Script:define_PK_columns ($SRCHANDLE,${ParentTable},"pky",$DefineStyle):Script>
	END RECORD
	
	DEFINE ${ModuleVarPrefix}program CHAR(30)

<Script: if ( $ParentLookupTables > 0 ) { 
	$IndentLevel=1;
	define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
}:Script>
	DEFINE g_${ParentTable} RECORD LIKE ${ParentTable}.*

MAIN
@Define
@Init 
	DEFER INTERRUPT
	
	<Script: if ($DoHelp eq 'true') {
	OPTIONS
		 print "help file \"${ModuleName}.iem\",";
		 print "help key ${Helpkey}";
	} :Script>
	
	-- WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	CALL setModuleId("ProgramName")			# put program name here (1 letter 2 or 3 digits)
	CALL ui_init(0)		#Initial UI Init

	DEFER QUIT
	DEFER INTERRUPT

	CALL security(getModuleId()) #authenticate
	--CALL init_u_ut() #init utility module	# put Business module letter + 2 letters

	--SELECT * INTO pr_company.* FROM company
	-- WHERE cmpy_code = glob_kandoouser.cmpy_code

	CALL main_${ModuleName}_${ParentTable}()

END MAIN

##########################################################################
FUNCTION mc_${ModuleName}_sccs()
## definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION
##########################################################################
FUNCTION main_${ModuleName}_${ParentTable} ()
## this module's main function called by MAIN

	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}"
	<Script: if ( $QxWidgetsCount > 0 ) { 
		print "CALL ${InitWidgetsFct}_$ModuleName()";
		}  :Script>

	CALL ${SqlPrepareQueriesFct}_${ModuleName}_parent () # initialize all cursors on master table
	<Script: if ( $ChildTable ne "" ) { 
		print "CALL ${SqlPrepareQueriesFct}_${ModuleName}_child\()      # initialize allcursors on Child table";
	}:Script>

	CALL menu_${ModuleName}_${ParentTable}()      

	CLOSE WINDOW ${MainFormName}

END FUNCTION

######################################################################
FUNCTION menu_${ModuleName}_${ParentTable} ()
## menu_${ModuleName}_${ParentTable}
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nbsel_${ParentTable} INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE record_num INTEGER
	DEFINE action smallint
	DEFINE xnumber smallint
	DEFINE arr_elem_num smallint
	DEFINE pky_${ParentTable} ${TypeDataPrefix}pky_${ParentTable} 					# Primary key record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	DEFINE where_clause STRING
	DEFINE record_found INTEGER
	DEFINE lookup_status INTEGER

	LET nbsel_${ParentTable} = 0
	MENU "${ParentTable}"
	BEFORE MENU
		<Script:
		printNoLF "HIDE OPTION \"${NextOption}\",\"${PreviousOption}\",\"${EditOption}\",\"${SuppressOption}\"";
		if ( defined($ChildTable) ) { 
			 printNoLF ",\"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
			 print "\n";
		} :Script>
		
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 1000";
		} :Script>
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		CLEAR FORM
		DISPLAY BY NAME ${MstInpFormRec}.*
		HIDE OPTION "${NextOption}","${PreviousOption}"

		# Build the QBE where clause
		CALL ${FrmConstructDatasetFct}_${ModuleName}() RETURNING where_clause   

		# Call the function that counts matching rows and opens the scroll cursor on primary key
		CALL ${SqlDeclarePkyScrCrsFct}_${ParentTable}(where_clause)
		RETURNING nbsel_${ParentTable},sql_stmt_status
		
		IF nbsel_${ParentTable} > 0 THEN 
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			pky_${ParentTable}.*

			CASE
			WHEN record_found = 1
				LET record_num = 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)

				<Script: if ( defined($ChildTable) ) { 
					print "CALL ${InitializeArrayFct}_${ChildTable}()";
					print "LET arr_elem_num = ${PopulateArrayFct}$ChildTable (pky_${ParentTable}.*)"; 				
					print "SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
				} :Script>
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			END CASE
			IF nbsel_${ParentTable} > 1 THEN
			   SHOW OPTION "${NextOption}"
			   NEXT OPTION "${NextOption}"
			END IF
			SHOW OPTION "${EditOption}","${SuppressOption}"
		ELSE 
			ERROR "${NorowsSelected}"
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${NextOption}" "${NextCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 2000";
		} :Script>
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num <= nbsel_${ParentTable} THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			pky_${ParentTable}.*

			CASE 
			WHEN record_found = 0 
				ERROR "${Lastrow} ${ParentTable}"
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num + 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					print "CALL ${InitializeArrayFct}_${ChildTable}()";
					print "LET arr_elem_num = ${PopulateArrayFct}$ChildTable (pky_${ParentTable}.*)";
					print "IF arr_elem_num > 0 THEN";
					print "\tCALL ${DisplayArrayFct}${ChildTable}(True)";
					print "END IF";
					print "SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
				} :Script>

				IF record_num >= nbsel_${ParentTable} THEN
				   HIDE OPTION "${NextOption}"
				END IF
                IF record_num > 1 THEN
                	SHOW OPTION "${PreviousOption}"
                ELSE
                	HIDE OPTION "${PreviousOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst}  ${ParentTable} "
			NEXT OPTION "${QueryOption}" 
		END IF

	COMMAND "${PreviousOption}" "${PreviousCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 3000";
		} :Script>
		
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num >= 1  THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(-1) RETURNING record_found,
			pky_${ParentTable}.*
			CASE 
			WHEN record_found = 0
				ERROR "${FirstRow} ${ParentTable}"
			WHEN record_found < -1
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num - 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				
				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					print "CALL ${InitializeArrayFct}_${ChildTable}()";
					print "LET arr_elem_num = ${PopulateArrayFct}$ChildTable (pky_${ParentTable}.*)";
					print "IF arr_elem_num > 0 THEN";
					print "\tCALL ${DisplayArrayFct}${ChildTable}(True)";
					print "END IF";
					print "SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
				} :Script>

				IF record_num = 1  THEN
				   HIDE OPTION "${PreviousOption}"
				END IF
                IF record_num < nbsel_${ParentTable} THEN
                	SHOW OPTION "${NextOption}"
                ELSE
                	HIDE OPTION "${NextOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 4000";
		} :Script>
		MESSAGE ""
		CALL ${FrmAddRecordFct}_${ModuleName}() RETURNING sql_stmt_status,pky_${ParentTable}.*
		MESSAGE ""
		<Script: if ( defined($ChildTable) ) {
			print "SHOW OPTION \"${EditArrayMessage}${ChildTable}\"";
			print "CALL ${InitializeArrayFct}_${ChildTable}()";
#			print "CALL ${PopulateArrayFct}${ChildTable} (pky_${ParentTable}.*)" ;
		} :Script>

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 5000";
		} :Script>
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			ELSE
				CALL ${FrmEditRecordFct}_${ModuleName}(pky_${ParentTable}.*,${MstInpFormRec}.*)
				RETURNING sql_stmt_status
			END IF
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 6000";
		} :Script>
		MESSAGE ""
		IF nbsel_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			END IF
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_${ModuleName}(pky_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		ELSE
			ERROR "${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	<Script: if ( defined($ChildTable) ) { 
	print "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"";
	print "\tCALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,False)"; 
	
	print "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"";
	print "\tCALL ${EditArrayFct}${ChildTable} (pky_${ParentTable}.*)";
	} :Script>
	
	COMMAND "${Quit}" "${QuitCom}"
		<Script: if ($DoHelp eq 'true') {
			print "		HELP 9000";
		} :Script>
		MESSAGE ""
		EXIT MENU
	END MENU
END FUNCTION

#######################################################################
FUNCTION ${FrmConstructDatasetFct}_${ModuleName}()
## ${FrmConstructDatasetFct}_${ModuleName}_${MainFormName} : Query By Example on table ${ParentTable}
## Input selection criteria,
## prepare the query,
## open the data set
	DEFINE qbe_statement,where_clause STRING
	DEFINE xnumber,sql_stmt_status INTEGER
	DEFINE l_pky ${TypeDataPrefix}pky_${ParentTable} 

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record

	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL
	DISPLAY BY NAME ${MstInpFormRec}.* 

	CONSTRUCT BY NAME where_clause ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*","false",".*","TblName","\t\t","","","reset"):Script>
		<Script: if (defined($do_build_help) ) {  
			print "ON KEY (\"$Helpkey\")";
			print "\tCALL help_${ParentTable}()";
		 }:Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT field_touched(${ParentTable}.*) AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		LET where_clause = NULL
		MESSAGE "${CancelCom}"
		LET int_flag=0
	END IF
	RETURN where_clause
END FUNCTION		## ${FrmConstructDatasetFct}_${ModuleName}

#######################################################################
# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName} : displays the form record after reading and displays lookup records if any
# inbound: Form record.*
FUNCTION ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec})
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 
/#		<Script:define_form_fields($SRCHANDLE,$MainFormName,${ParentTable},"parent","parent","false","all","","\t\t")  :Script>
/#	END RECORD

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		print "DEFINE lookup_status INTEGER";
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	DISPLAY BY NAME <Script:print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*","false|true",".*",${MstInpFormRec},"\t\t\t","","","reset"):Script>
	<Script: if ( $ParentLookupTables > 0 ) {
			bld_lookup_calls ($FormName,"parent",$ParentTable,$MstInpFormRec);
			printNoLF "DISPLAY " ;
			print_form_fields ($SRCHANDLE,$MainFormName,".*","parent","lookup",".*",".*",${SRLUpPrfx}."TblName","",'skip') ;
			printNoLF "\nTO ";
			print_form_fields ($SRCHANDLE,$MainFormName,".*","parent","lookup",".*",".*","TblName","",'skip') ;
	}:Script>

END FUNCTION		# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}


####################################################################
## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}: add a new ${ParentTable} row
FUNCTION ${FrmAddRecordFct}_${ModuleName}()
	DEFINE sql_stmt_status SMALLINT
	DEFINE rows_count SMALLINT
	DEFINE nbre_${ParentTable} ,action SMALLINT

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		print "DEFINE lookup_status INTEGER";
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL

	WHILE true
		LET int_flag = false
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*","false",".*",${MstInpFormRec},"\t\t\t","","","reset"):Script>
		WITHOUT DEFAULTS
		<Script: 
		print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","pkey|fkey",${MstInpFormRec},"       ",${GlobalAlternateRecord} )
		:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
		<Script: if (defined($do_build_help) ) {  
			print "ON KEY (\"$Helpkey\")  # Call online help" ;
			print "\tCALL help_${ParentTable}()";
		} :Script>
		END INPUT
		IF int_flag = TRUE THEN
			# Resign from input
			LET int_flag=false
			DISPLAY ${MstInpFormRec}.*  TO ${ParentTable}.*
			MESSAGE "${CancelCom} ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(3,10,"${AddOption}") RETURNING action
		CASE action
		WHEN 0            # I want to edit the input, remains displayed 'as is'
			CONTINUE WHILE   # leave display as is
			
		WHEN 2            # transaction is committed
			BEGIN WORK
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}('+',${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			CALL ${SqlInsertFct}_${ParentTable}(${MstTableRec}.*) 
			returning sql_stmt_status,
			<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>

			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${AddOption} ${ParentTable} ${Successful}"
				COMMIT WORK

			WHEN sql_stmt_status < 0
				CALL display_error("${AddOption} ${ParentTable}:${Failed} ")
				ROLLBACK WORK

			END CASE
			EXIT WHILE

		WHEN 0
			ROLLBACK WORK
			EXIT WHILE
		END CASE
	END WHILE
	# ${MstTableRec}
	RETURN sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>
END FUNCTION		## ${FrmAddRecordFct}_${ModuleName}_${MainFormName}


#######################################################################
# ${FrmEditRecordFct}_${ModuleName}_${MainFormName} : Edit a ${ParentTable} RECORD
# inbound: table primary key
FUNCTION ${FrmEditRecordFct}_${ModuleName}(pky,${MstInpFormRec})
	DEFINE action SMALLINT  
	DEFINE sql_stmt_status,dummy SMALLINT

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstSavFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record to save the data
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}									#Primary key record 
	<Script: if ( $ParentLookupTables > 0 ) {
		print "DEFINE lookup_status INTEGER"
	}:Script>
	DEFINE rows_count SMALLINT

	## check if record can be accessed
	WHILE true
		LET int_flag = false
		# Save Screen Record values before altering
		LET ${MstSavFormRec}.* = ${MstInpFormRec}.* 
		BEGIN WORK
		EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS"
		WHENEVER SQLERROR CONTINUE
		OPEN crs_upd_${ParentTable} USING pky.*
		FETCH crs_upd_${ParentTable} INTO dummy
		IF sqlca.sqlcode = -244 THEN
			ERROR "THIS ROW IS BEING MODIFIED"
			ROLLBACK WORK
			EXIT WHILE
		END IF

		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*","false","attr",${MstInpFormRec},"         ","","","reset")  :Script>
		WITHOUT DEFAULTS
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","fkey",${MstInpFormRec},"       ",${GlobalAlternateRecord} );
		}:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
					
		<Script: if (defined($do_build_help) ) {  
			print "ON KEY (\"$Helpkey\")";
			print "\tCALL help_${ParentTable}()";
		}:Script>
		END INPUT
		IF int_flag = TRUE THEN
			LET int_flag=false
			# Restore previous value
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY ${MstInpFormRec}.*  TO ${ParentTable}.*
			<Script: if ( $ParentLookupTables > 0 ) {
				bld_lookup_calls ($FormName,"parent",$ParentTable,$MstInpFormRec);
				printNoLF "DISPLAY " ;
				print_form_fields ($SRCHANDLE,$MainFormName,".*","parent","lookup",".*",".*",${SRLUpPrfx}."TblName","\t","skip","") ;
				printNoLF "\nTO " ;
				print_form_fields ($SRCHANDLE,$MainFormName,".*","parent","lookup",".*",".*","TblName","\t","skip","") ;
			}:Script>
			
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
			ROLLBACK WORK
			MESSAGE "$CancelCom ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(4,10,"${EditOption}") RETURNING action

		CASE 
		WHEN action = 0
			# Redo, leave values as modified
			CONTINUE WHILE
		WHEN action = 1 
			# Resign, restore original values
			LET ${MstInpFormRec}.* = ${MstSavFormRec}.*
			DISPLAY ${MstInpFormRec}.*  TO ${ParentTable}.*
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
			ROLLBACK WORK
			EXIT WHILE   # Cancel operation

		WHEN action = 2   
			# confirm update
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}("U",${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			
			# Perform the prepared update statement
			LET sql_stmt_status = ${SqlUpdateFct}_${ParentTable}(pky.*,${MstTableRec}.*) 
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${EditOption} ${ParentTable} ${Successful}"
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
				COMMIT WORK

			WHEN sql_stmt_status < 0
				CALL display_error("${EditOption} ${ParentTable}:${Failed} ")
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"
				ROLLBACK WORK

			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmEditRecordFct}_${ModuleName}(pky)


#######################################################################
# DELETE A ${ParentTable} row
# inbound: table primary key
FUNCTION ${FrmSuppressRecordFct}_${ModuleName}(pky)
	DEFINE action SMALLINT
	DEFINE dummy SMALLINT
	DEFINE sql_stmt_status SMALLINT
	DEFINE pky 	${TypeDataPrefix}pky_${ParentTable}					#Primary key record  

	WHILE TRUE
		CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
		BEGIN WORK
		EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS"
		WHENEVER SQLERROR CONTINUE
		OPEN crs_upd_${ParentTable} USING pky.*
		FETCH crs_upd_${ParentTable} INTO dummy
		IF sqlca.sqlcode = -244 THEN
			ERROR "THIS ROW IS BEING MODIFIED"
			ROLLBACK WORK
			EXIT WHILE
		END IF

		CASE 
		WHEN action = 0 OR action = 1 
			# can the delete operation
			EXIT WHILE  
		WHEN action = 2
			# Validate the delete operation
			CALL ${SqlDeleteFct}_${ParentTable}(pky.*) RETURNING sql_stmt_status
			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${SuppressOption} ${ParentTable} ${Successful}"
				COMMIT WORK

			WHEN sql_stmt_status < 0
				CALL display_error("${SuppressOption} ${ParentTable}:${Failed} ")
				ROLLBACK WORK

			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmSuppressRecordFct}_${ModuleName}(pky)

#########################################################################
#  Build, prepare, declare and initialize main queries and cursors
FUNCTION ${SqlPrepareQueriesFct}_${ModuleName}_parent ()
	DEFINE sql_stmt_text STRING

	# PREPARE cursor for full master table row contents, access by primary key
	LET sql_stmt_text=
	"SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","all","","","flat","",""):Script>",
	" FROM ${ParentTable} ",
	"WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_mrw_${ParentTable} FROM sql_stmt_text
	DECLARE crs_row_${ParentTable} CURSOR FOR sel_mrw_${ParentTable}

	# PREPARE cursor for row test / check if locked
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_pky_${ParentTable} FROM sql_stmt_text
	DECLARE crs_pky_${ParentTable} CURSOR FOR sel_pky_${ParentTable}
	
	# PREPARE cursor for SELECT FOR UPDATE
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>",
	" FOR UPDATE"

	PREPARE sel_upd_${ParentTable} FROM sql_stmt_text
	DECLARE crs_upd_${ParentTable} CURSOR FOR sel_upd_${ParentTable}

	# PREPARE INSERT statement
	LET sql_stmt_text =
	"INSERT INTO ${ParentTable} (<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","","","flat","",""):Script>)",
	" VALUES ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","all","placeholders","","flat","",1); :Script>)" 
	PREPARE pr_ins_${ParentTable} FROM sql_stmt_text

	# PREPARE UPDATE statement
	let sql_stmt_text=
	"UPDATE ${ParentTable} ",
	"SET ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","false","attr","","","flat","",""); :Script>)",
	" = ( <Script:print_table_columns ($SRCHANDLE,${ParentTable},"","","false","attr","placeholders","","flat","",""); :Script>)",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 
	PREPARE pr_upd_${ParentTable} FROM sql_stmt_text

	# PREPARE DELETE statement
	let sql_stmt_text= "DELETE FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 

	PREPARE pr_del_${ParentTable} FROM sql_stmt_text

END FUNCTION		## ${SqlPrepareQueriesFct}_${ModuleName}_parent

#########################################################
FUNCTION ${SqlDeclarePkyScrCrsFct}_${ParentTable}(where_clause)
## Build the query generated by CONSTRUCT BY NAME,
## Declare and open the cursor
## inbound param: query predicate
## outbound parameter: query status
	DEFINE where_clause STRING
	DEFINE qbe_statement STRING
	DEFINE rows_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   

	LET qbe_statement = 
		"SELECT count(*) FROM ${ParentTable}",
		" WHERE ",where_clause CLIPPED

	PREPARE prp_cnt_${ParentTable} FROM qbe_statement
	DECLARE crs_cnt_${ParentTable} CURSOR for prp_cnt_${ParentTable}

	OPEN crs_cnt_${ParentTable}
	SET ISOLATION TO DIRTY READ
	WHENEVER SQLERROR CONTINUE
	FETCH crs_cnt_${ParentTable} INTO rows_count
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	SET ISOLATION TO COMMITTED READ

	# if FETCH fails, count = 0, the, get back to query
	IF sqlca.sqlcode OR rows_count = 0 THEN
		let rows_count =0
	END IF
	FREE crs_cnt_${ParentTable}

	# display the selected columns

	LET qbe_statement = "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"record","","flat","    "); :Script>",
	" FROM ${ParentTable} ",
	"WHERE ",where_clause clipped,
	" ORDER BY <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","","flat","",$endline,1); :Script>"

	PREPARE prp_scrl_pky_${ParentTable} FROM qbe_statement

	# crs_scrl_pky_${ParentTable} : the first cursor selects all the primary keys (not all the table columns)
	DECLARE crs_scrl_pky_${ParentTable} SCROLL CURSOR WITH HOLD
	FOR prp_scrl_pky_${ParentTable}

	WHENEVER SQLERROR CONTINUE
	OPEN crs_scrl_pky_${ParentTable}
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	RETURN rows_count,sqlca.sqlcode
END FUNCTION		## ${SqlDeclarePkyScrCrsFct}_${ParentTable}

#######################################################################
FUNCTION ${SqlNextPrevFct}_${ParentTable}(offset)
## ${SqlNextPrevFct}_${ParentTable} : FETCH NEXT OR PREVIOUS RECORD
	DEFINE offset SMALLINT
	define lsql_stmt_status,record_found integer
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   

	DEFINE ${MstInpFormRec} RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,${ParentTable},"parent","parent","false","all","","\t\t")  :Script>
	END RECORD

	WHENEVER SQLERROR CONTINUE
	FETCH RELATIVE offset crs_scrl_pky_${ParentTable} INTO pky.*
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE 
	WHEN sqlca.sqlcode = 100 
		LET record_found = 0
		
	WHEN sqlca.sqlcode < 0 
		LET record_found = -1
	OTHERWISE
		LET lsql_stmt_status = 1
		LET record_found = 1
		#CALL ${SqlFetchFullRowFct}_${ParentTable} (pky.*)
		#RETURNING record_found,${MstInpFormRec}.*
		
	END CASE
	RETURN record_found,pky.*
END FUNCTION		## ${SqlNextPrevFct}_${ParentTable}

#########################################################################################
FUNCTION ${SqlFetchFullRowFct}_${ParentTable}(pky_${ParentTable})
# ${SqlFetchFullRowFct}_${ParentTable} : read a complete row accessing by primary key
# inbound parameter : primary key
# outbound parameter: sql_stmt_status and row contents
	DEFINE sql_stmt_status smallint
	DEFINE pky_${ParentTable} ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}	# Form image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		print "DEFINE lookup_status INTEGER" ;
		define_lookup_fields ($MainFormName,"parent",$Prefix,$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	# read the table, access on primary key
WHENEVER SQLERROR CONTINUE
	OPEN crs_row_${ParentTable} 
	USING pky_${ParentTable}.*

	FETCH crs_row_${ParentTable}  INTO ${MstTableRec}.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	CASE
	WHEN  sqlca.sqlcode = 100 
		LET sql_stmt_status = 0
	WHEN  sqlca.sqlcode < 0 
		LET sql_stmt_status = -1
	OTHERWISE
		LET sql_stmt_status = 1
		CALL ${SetFormRecordFct}_${ModuleName}(${MstTableRec}.*)
		RETURNING ${MstInpFormRec}.*
	END CASE
	RETURN sql_stmt_status,${MstInpFormRec}.*
END FUNCTION		## ${SqlFetchFullRowFct}_${ParentTable}

########################################################################
FUNCTION ${SqlInsertFct}_${ParentTable}(${MstTableRec})
## INSERT in table ${ParentTable} 
	DEFINE lsql_stmt_status integer
	DEFINE rows_count SMALLINT
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record


	WHENEVER SQLERROR CONTINUE
	EXECUTE pr_ins_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","all","",${MstTableRec},"","    ",""):Script>
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
		<Script:catch_last_serial_value($SRCHANDLE,${ParentTable},${MstTableRec}):Script>
		
	END IF
	RETURN lsql_stmt_status,pky.*
END FUNCTION		## ${SqlInsertFct}_${ParentTable}

########################################################################
FUNCTION ${SqlUpdateFct}_${ParentTable}(pky,${MstTableRec})
## ${SqlUpdateFct}_${ParentTable} :update ${ParentTable} record
	DEFINE lsql_stmt_status integer
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	WHENEVER SQLERROR CONTINUE
	EXECUTE pr_upd_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","false","attr","",${MstTableRec},"","    ",$endline,1):Script>,
	pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlUpdateFct}_${ParentTable}

##############################################################################################
FUNCTION ${SqlDeleteFct}_${ParentTable}(pky)
## ${SqlDeleteFct}_${ParentTable} :delete current row in table ${ParentTable} 
	DEFINE lsql_stmt_status smallint
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   

	WHENEVER SQLERROR CONTINUE
	EXECUTE pr_del_${ParentTable} 
	USING pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE
		LET lsql_stmt_status=0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlDeleteFct}_${ParentTable}

################################################################################
FUNCTION ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky)  
##   ${SqlCheckPrimaryKeyFct}_${ParentTable} : Check if primary key exists
## inbound parameter : record of primary key
## outbound parameter:  status > 0  if exists, 0 if no record, < 0 if error
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE pk_status INTEGER

	WHENEVER SQLERROR CONTINUE
	OPEN crs_pky_${ParentTable} USING  pky.*
	FETCH crs_pky_${ParentTable} 
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE sqlca.sqlcode
	WHEN 0 
		let pk_status = 1
	WHEN 100
		let pk_status = 0
	WHEN sqlca.sqlerrd[2] = 104
		let pk_status = -1		# record locked
	WHEN sqlca.sqlcode < 0
		let pk_status = sqlca.sqlcode
	END CASE

	RETURN pk_status
END FUNCTION		## ${SqlCheckPrimaryKeyFct}_${ParentTable}

################################################################################################
FUNCTION ${SetFormRecordFct}_${ModuleName}(tbl_contents)
## ${SetFormRecordFct}_${ModuleName}_${MainFormName}: assigns table values to form fields values
	DEFINE frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE frm_contents.* TO NULL
	<Script:
	set_form_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents","tbl_contents") 
	:Script>
	RETURN frm_contents.*
END FUNCTION		## ${SetFormRecordFct}${ModuleName}_${MainFormName}

################################################################################################
FUNCTION ${SetTableRecordFct}_${MainFormName}_${ParentTable}(sql_stmt_type,frm_contents)
## ${SetTableRecordFct}_${MainFormName}_${ParentTable}: assigns form fields value to table values
	DEFINE sql_stmt_type CHAR(1)					# + => Insert, # => Update
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE tbl_contents.* TO NULL
	CASE sql_stmt_type
	WHEN "I"			# Prepare record for INSERT
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},"parent","frm_contents","tbl_contents","I") :Script>
	WHEN "U"			# Prepare record for UPDATE
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},"parent","frm_contents","tbl_contents","U") :Script>
	END CASE

	RETURN tbl_contents.*
END FUNCTION		## ${SetTableRecordFct}${MainFormName}_${ParentTable}

<Script: if ($ParentLookupTables > 0 ) {
	bld_lookup_functions ( ${MainFormName},$ParentTable,"parent" );
}:Script>

<Script: if ( $QxWidgetsCount > 0 ) { 
	bld_populate_widgets_calls_function($SRCHANDLE,$MainFormName,".*",".*") ;
	bld_populate_widgets_functions($SRCHANDLE,$MainFormName,".*",".*") ;
}  :Script>

<Script: if ( $ParentLookupTables > 0 && $DoPickListWindows eq "true" ) { 
	bld_picklist_windows($ModuleName) ;
} :Script>

<Script: if ($DoHelp eq 'true') {
	build_fct_Help(${MainFormName},${ParentTable});
   build_doc_Help(${MainFormName},$mstr_clnt_module)
}:Script>