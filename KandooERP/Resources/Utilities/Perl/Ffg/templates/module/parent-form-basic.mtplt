<Script:our $FormShortName=$FormName; $FormShortName=~ s/^f_//; :Script>noprint
<Script:our $MstTableRec=${TblPrfx}${RecordPrefix}${ParentTable} :Script>noprint
<Script:our $MstInpFormRec=${FrmPrfx}${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstInpFormRecAsParam=p_${FrmPrfx}${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstSavFormRec=sav_${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
<Script:our $GlobalReferenceTable="company" :Script>noprint
<Script:our $GlobalReferenceRecord=${GlobalVarPrefix} . $GlobalReferenceTable :Script>noprint
<Script:our $GlobalReferenceColumn="cmpy_code" :Script>noprint
<Script:our $GlobalReferenceWhereClause=sprintf " \" AND %s = '\",%s.%s,\"'\"\n",$GlobalReferenceColumn,$GlobalReferenceRecord,$GlobalReferenceColumn :Script>noprint
@GlobalDef
@ModuleDef
<AddRqrmnt:lib::lib_security:AddRqrmnt> 
<AddRqrmnt:lib::lib_tool:AddRqrmnt> 

# module  generated by KandooERP Ffg(c)
# Generated on ${GenerationTS}
# Main template ${MainModuleTemplate} 

<Script: $QxWidgetsCount=define_Widgets ($SRCHANDLE,$MainFormName,".*",".*") :Script> 
DATABASE ${DatabaseName}
	DEFINE ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} TYPE AS RECORD 		# This is the TYPE for form image record
		<Script:define_form_fields($SRCHANDLE,$MainFormName,".*","parent","parent","false","false","","\t\t")  :Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} TYPE AS RECORD 			# This is the TYPE for table image record
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"","","all","record",$MstTableRec,"    "):Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}pky_${ParentTable} TYPE AS RECORD 
		<Script:define_PK_columns ($SRCHANDLE,${ParentTable},"pky",$DefineStyle):Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}formonly TYPE AS RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"formonly","parent","parent","true","false","","\t\t")  :Script>
	END RECORD

	DEFINE ${ModuleVarPrefix}program CHAR(30)

<Script: if ( $ParentLookupTables > 0 ) { 
	$IndentLevel=1;
	define_lookup_fields ($MainFormName,"parent","astype",$Tabul,$WriteMode,$isRecord) ;
}:Script>
	<Script: if ( defined($GlobalReferenceRecord)) {
	$line=sprintf "DEFINE %s RECORD LIKE %s.*\n",$GlobalReferenceRecord,$GlobalReferenceTable;
	$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
	}:Script>

MAIN
@Define
@Init 
	DEFER INTERRUPT
	
	-- WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	--CALL setModuleId("${ProgramName}")			# put program name here (1 letter 2 or 3 digits)
	--CALL ui_init(0)		#Initial UI Init

	DEFER QUIT
	DEFER INTERRUPT

	--CALL security(getModuleId()) #authenticate
	--CALL init_u_ut() #init utility module	# put Business module letter + 2 letters

	SELECT * INTO ${GlobalReferenceRecord}.* FROM company
	WHERE cmpy_code = "KA"

	CALL main_${ProgramName}()

END MAIN

##########################################################################
FUNCTION mc_${ModuleName}_sccs()
## definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION
##########################################################################
FUNCTION main_${ProgramName} ()
## this module's main function called by MAIN

	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}"
	<Script: if ( $QxWidgetsCount > 0 ) { 
		$line=sprintf "CALL %s_%s()\n",${InitWidgetsFct},$ModuleName;
		$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		}  :Script>

	CALL ${SqlPrepareQueriesFct}_${ModuleName}_parent () # initialize all cursors on master table
	<Script: if ( $ChildTable ne "" ) { 
		$Line = sprintf "CALL ${SqlPrepareQueriesFct}_${ModuleName}_child\(\)\n";# initialize allcursors on Child table \n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
	}:Script>

	CALL menu_${ProgramName}()      

	CLOSE WINDOW ${MainFormName}

END FUNCTION

######################################################################
FUNCTION menu_${ProgramName} ()
## menu_${ProgramName}
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nb_${RecordPrefix}selected_${ParentTable} INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE record_num INTEGER
	DEFINE action smallint
	DEFINE xnumber smallint
	DEFINE arr_elem_num smallint
	DEFINE pky_${ParentTable} ${TypeDataPrefix}pky_${ParentTable} 		# Primary key record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	DEFINE where_clause STRING
	DEFINE record_found INTEGER
	DEFINE lookup_status INTEGER

	LET nb_${RecordPrefix}selected_${ParentTable} = 0
	MENU "${ParentTable}"
	BEFORE MENU
		<Script:
		$Line="HIDE OPTION \"${NextOption}\",\"${PreviousOption}\",\"${EditOption}\",\"${SuppressOption}\"";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		if ( defined($ChildTable) ) { 
			$Line=",\"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		} :Script>
		
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 1000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		CLEAR FORM
		HIDE OPTION "${NextOption}","${PreviousOption}"

		# Build the QBE where clause
		CALL ${FrmConstructDatasetFct}_${ModuleName}() RETURNING where_clause   

		# Call the function that counts matching rows and opens the scroll cursor on primary key
		CALL ${SqlDeclarePkyScrCrsFct}_${ParentTable}(where_clause)
		RETURNING nb_${RecordPrefix}selected_${ParentTable},sql_stmt_status
		
		IF nb_${RecordPrefix}selected_${ParentTable} > 0 THEN 
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			pky_${ParentTable}.*

			CASE
			WHEN record_found = 1
				LET record_num = 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)

				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (pky_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			END CASE
			IF nb_${RecordPrefix}selected_${ParentTable} > 1 THEN
			   SHOW OPTION "${NextOption}"
			   NEXT OPTION "${NextOption}"
			END IF
			SHOW OPTION "${EditOption}","${SuppressOption}"
		ELSE 
			ERROR "${NorowsSelected}"
			NEXT OPTION "${QueryOption}"
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		
		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
	} :Script>

	COMMAND "${NextOption}" "${NextCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 2000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num <= nb_${RecordPrefix}selected_${ParentTable} THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			pky_${ParentTable}.*

			CASE 
			WHEN record_found = 0 
				ERROR "${Lastrow} ${ParentTable}"
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num + 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (pky_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>

				IF record_num >= nb_${RecordPrefix}selected_${ParentTable} THEN
				   HIDE OPTION "${NextOption}"
				END IF
                IF record_num > 1 THEN
                	SHOW OPTION "${PreviousOption}"
                ELSE
                	HIDE OPTION "${PreviousOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst}  ${ParentTable} "
			NEXT OPTION "${QueryOption}" 
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;

		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		} :Script>

	COMMAND "${PreviousOption}" "${PreviousCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 3000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num >= 1  THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(-1) RETURNING record_found,
			pky_${ParentTable}.*
			CASE 
			WHEN record_found = 0
				ERROR "${FirstRow} ${ParentTable}"
			WHEN record_found < -1
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num - 1
				CALL ${SqlFetchFullRowFct}_${ParentTable} (pky_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				
				CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (pky_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>
				IF record_num = 1  THEN
				   HIDE OPTION "${PreviousOption}"
				END IF
                IF record_num < nb_${RecordPrefix}selected_${ParentTable} THEN
                	SHOW OPTION "${NextOption}"
                ELSE
                	HIDE OPTION "${NextOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		
		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (pky_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
	} :Script>

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 4000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CALL ${FrmAddRecordFct}_${ModuleName}() RETURNING sql_stmt_status,pky_${ParentTable}.*
		MESSAGE ""
		<Script: if ( defined($ChildTable) ) {
			$Line = "SHOW OPTION \"${EditArrayMessage}${ChildTable}\"";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;				
			$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;				
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,False)\n" ;
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (pky_${ParentTable}.*,False)\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		} :Script>

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 5000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nb_${RecordPrefix}selected_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			ELSE
				CALL ${FrmEditRecordFct}_${ModuleName}(pky_${ParentTable}.*,${MstInpFormRec}.*)
				RETURNING sql_stmt_status
			END IF
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 6000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nb_${RecordPrefix}selected_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(pky_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			END IF
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_${ModuleName}(pky_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		ELSE
			ERROR "${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${Quit}" "${QuitCom}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 9000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		EXIT MENU
	END MENU
END FUNCTION

#######################################################################
FUNCTION ${FrmConstructDatasetFct}_${ModuleName}()
## ${FrmConstructDatasetFct}_${ModuleName}_${MainFormName} : Query By Example on table ${ParentTable}
## Input selection criteria,
## prepare the query,
## open the data set
	DEFINE qbe_statement,where_clause STRING
	DEFINE xnumber,sql_stmt_status INTEGER
	DEFINE l_pky ${TypeDataPrefix}pky_${ParentTable} 

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record

	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL
	DISPLAY BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,".*","parent",".*","false","false",${MstInpFormRec},"\t\t\t","","","reset"):Script>

	CONSTRUCT BY NAME where_clause ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false","TblName","\t\t\t","","","reset"):Script>

		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
			$Line=sprin tf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,0,0) ;
		 }:Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT DIALOG.GetFieldTouched("${ParentTable}.*") AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		LET where_clause = NULL
		MESSAGE "${CancelCom}"
		LET int_flag=0
	END IF
	RETURN where_clause
END FUNCTION		## ${FrmConstructDatasetFct}_${ModuleName}

#######################################################################
# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName} : displays the form record after reading and displays lookup records if any
# inbound: Form record.*
FUNCTION ${FrmDisplayRecordFct}_${ModuleName}(p_${MstInpFormRec})
	DEFINE p_${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}
	
	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	DISPLAY <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false",p_${MstInpFormRec},"\t\t\t","","","reset"):Script>
	TO <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false","TblName","\t\t\t","","","reset"):Script>
	<Script: if ( $ParentLookupTables > 0 ) {
		bld_lookup_calls ($FormName,"parent",$ParentTable,${MstInpFormRecAsParam},"display");
	}:Script>

END FUNCTION		# ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}


####################################################################
## ${FrmAddRecordFct}_${ModuleName}: add a new ${ParentTable} row
FUNCTION ${FrmAddRecordFct}_${ModuleName}()
	DEFINE sql_stmt_status SMALLINT
	DEFINE rows_count SMALLINT
	DEFINE nbre_${ParentTable} ,action SMALLINT

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL

	WHILE true
		LET int_flag = false
		INPUT BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,".*","parent",".*","false","false",${MstInpFormRec},"\t\t\t","","","reset"):Script>						
		WITHOUT DEFAULTS
		<Script: 
		print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","pkey|fkey",${MstInpFormRec},"       ",$GlobalReferenceRecord )
		:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")  # Call online help\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		END INPUT
		IF int_flag = TRUE THEN
			# Resign from input
			LET int_flag=false
			INITIALIZE ${MstInpFormRec}.* TO NULL
			CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRec}.*)
			EXIT WHILE
		END IF 

		CALL confirm_operation(3,10,"${AddOption}") RETURNING action
		CASE action
		WHEN 0            # I want to edit the input, remains displayed 'as is'
			CONTINUE WHILE   # Nothing is done, leave as is
			
		WHEN 2            # We confirm the transaction
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			}:Script>
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}('+',${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			CALL ${SqlInsertFct}_${ParentTable}(${MstTableRec}.*) 
			returning sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>

			CASE 
			WHEN sql_stmt_status = 0
				MESSAGE "${AddOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status < 0
				CALL display_error("${AddOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE

		WHEN 0
			<Script:if ( $DoTransactions eq 'true' ) {
				$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			}:Script>
			EXIT WHILE
		END CASE
	END WHILE
	# ${MstTableRec}
	RETURN sql_stmt_status,<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","pkey","",$MstTableRec,"flat","",""); :Script>
END FUNCTION		## ${FrmAddRecordFct}_${ModuleName}


#######################################################################
# ${FrmEditRecordFct}_${ModuleName} : Edit a ${ParentTable} RECORD
# inbound: table primary key
FUNCTION ${FrmEditRecordFct}_${ModuleName}(p_pky,${MstInpFormRecAsParam})
	DEFINE action SMALLINT  
	DEFINE sql_stmt_status,dummy SMALLINT

	DEFINE ${MstInpFormRecAsParam} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstSavFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record to save the data
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE p_pky ${TypeDataPrefix}pky_${ParentTable}									#Primary key record 
	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>
	DEFINE rows_count SMALLINT

	WHILE true
		LET int_flag = false
		# Save Screen Record values before altering
		LET ${MstSavFormRec}.* = p_${MstInpFormRec}.* 
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel} \"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN ${UpdCursorPrefix}%s USING p_pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH ${UpdCursorPrefix}%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		}:Script>
	
		INPUT BY NAME <Script: print_form_fields (  $SRCHANDLE,$MainFormName,".*","parent",".*", "false","attr", ${MstInpFormRecAsParam},"\t\t\t","","","reset"):Script>
		WITHOUT DEFAULTS
		<Script: if ( $ParentLookupTables > 0 ) {
			print_input_events($SRCHANDLE,$MainFormName,${ParentTable},"parent","fkey",${MstInpFormRecAsParam},"       ",$GlobalReferenceRecord );
		}:Script>

		<Script: if ($DoPickListWindows eq 'true' && $ParentLookupTables > 0 ) { 
			bld_picklist_calls($ParentTable) ;
		}:Script>
					
		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
			$Line=sprintf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,0,0) ;
		}:Script>
		END INPUT
		IF int_flag = TRUE THEN
			LET int_flag=false
			# Restore previous value
			LET ${MstInpFormRecAsParam}.* = ${MstSavFormRec}.*
			CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRecAsParam}.*)
			EXECUTE IMMEDIATE "SET ISOLATION TO ${DefaultIsolationLevel}"
			ROLLBACK WORK
			MESSAGE "${CancelCom} ${CancelKey}"
			EXIT WHILE
		END IF 

		CALL confirm_operation(4,10,"${EditOption}") RETURNING action

		CASE 
		WHEN action = 0
			# Redo, leave values as modified
			CONTINUE WHILE
		WHEN action = 1 
			# Resign, restore original values
			LET ${MstInpFormRecAsParam}.* = ${MstSavFormRec}.*
			CALL ${FrmDisplayRecordFct}_${ModuleName}(${MstInpFormRecAsParam}.*)
			EXECUTE IMMEDIATE "SET ISOLATION TO ${DefaultIsolationLevel}"
			ROLLBACK WORK
			EXIT WHILE   # Cancel operation
 
		WHEN action = 2   
			# confirm update: set the table record from the input record
			CALL ${SetTableRecordFct}_${MainFormName}_${ParentTable}("U",p_${MstInpFormRec}.*)
			RETURNING ${MstTableRec}.*
			
			# Perform the prepared update statement
			LET sql_stmt_status = ${SqlUpdateFct}_${ParentTable}(p_pky.*,${MstTableRec}.*) 
			CASE 
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] > 0 
				MESSAGE "${EditOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] = 0 
				MESSAGE "${EditOption} ${ParentTable} Could not find rows"

			WHEN sql_stmt_status < 0
				CALL display_error("${EditOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmEditRecordFct}_${ModuleName}(p_pky)


#######################################################################
# DELETE A ${ParentTable} row
# inbound: table primary key
FUNCTION ${FrmSuppressRecordFct}_${ModuleName}(pky)
	DEFINE action SMALLINT
	DEFINE dummy SMALLINT
	DEFINE sql_stmt_status SMALLINT
	DEFINE pky 	${TypeDataPrefix}pky_${ParentTable}					#Primary key record  

	WHILE TRUE
		CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
		<Script:if ( $DoTransactions eq 'true' ) {
			$OutLineNum=ffg_print($SRCHANDLE,"BEGIN WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"EXECUTE IMMEDIATE \"SET ISOLATION TO ${DefaultIsolationLevel}\"\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR CONTINUE\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "OPEN ${UpdCursorPrefix}%s USING pky.*",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			my $Line=sprintf "FETCH ${UpdCursorPrefix}%s INTO dummy",${ParentTable};
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"IF sqlca.sqlcode = -244 THEN\n\t\t\tERROR \"THIS ROW IS BEING MODIFIED\"\n\t\t\tROLLBACK WORK\n\t\t\tEXIT WHILE\n\t\tEND IF",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
			$OutLineNum=ffg_print($SRCHANDLE,"WHENEVER SQLERROR STOP\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		}:Script>
		CASE 
		WHEN action = 0 OR action = 1 
			# cancel the delete operation
			EXIT WHILE  
		WHEN action = 2
			# Validate the delete operation
			CALL ${SqlDeleteFct}_${ParentTable}(pky.*) RETURNING sql_stmt_status
			CASE 
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] > 0 
				MESSAGE "${SuppressOption} ${ParentTable} ${Successful}"
				<Script:if ( $DoTransactions eq 'true' ) {
					$OutLineNum=ffg_print($SRCHANDLE,"COMMIT WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			
			WHEN sql_stmt_status = 0 AND sqlca.sqlerrd[3] = 0 
				MESSAGE "${SuppressOption} ${ParentTable} Could not find rows"
			WHEN sql_stmt_status < 0
				CALL display_error("${SuppressOption} ${ParentTable}:${Failed} ")
				<Script:if ( $DoTransactions eq 'true' ) {
						$OutLineNum=ffg_print($SRCHANDLE,"ROLLBACK WORK\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
				}:Script>
			END CASE
			EXIT WHILE
		END CASE
	END WHILE
	RETURN sql_stmt_status
END FUNCTION		## ${FrmSuppressRecordFct}_${ModuleName}(pky)

#########################################################################
#  Build, prepare, declare and initialize main queries and cursors
FUNCTION ${SqlPrepareQueriesFct}_${ModuleName}_parent ()
	DEFINE sql_stmt_text STRING

	# PREPARE cursor for full master table row contents, access by primary key
	LET sql_stmt_text=
	"SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","","all","","","flat","",""):Script>",
	" FROM ${ParentTable} ",
	"WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_mrw_${ParentTable} FROM sql_stmt_text
	DECLARE ${FullRowCursorPrefix}${ParentTable} CURSOR FOR sel_mrw_${ParentTable}

	# PREPARE cursor for row test / check if locked
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>"

	PREPARE sel_pky_${ParentTable} FROM sql_stmt_text
	DECLARE ${PkyCursorPrefix}${ParentTable} CURSOR FOR sel_pky_${ParentTable}
	
	# PREPARE cursor for SELECT FOR UPDATE
	let sql_stmt_text= "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","flat","",""); :Script>",
	" FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>",
	" FOR UPDATE"

	PREPARE sel_upd_${ParentTable} FROM sql_stmt_text
	DECLARE ${UpdCursorPrefix}${ParentTable} CURSOR FOR sel_upd_${ParentTable}

	# PREPARE INSERT statement
	LET sql_stmt_text =
	"INSERT INTO ${ParentTable} (<Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","","","flat","",""):Script>)",
	" VALUES ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","placeholders","","flat","",1); :Script>)" 
	PREPARE pr_ins_${ParentTable} FROM sql_stmt_text

	# PREPARE UPDATE statement
	let sql_stmt_text=
	"UPDATE ${ParentTable} ",
	"SET ( <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","","","flat","",""); :Script>)",
	" = ( <Script:print_table_columns ($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","placeholders","","flat","",""); :Script>)",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 
	PREPARE pr_upd_${ParentTable} FROM sql_stmt_text

	# PREPARE DELETE statement
	let sql_stmt_text= "DELETE FROM ${ParentTable} ",
	" WHERE <Script: bld_where_clause($SRCHANDLE,${ParentTable},${KeyMode},"?","","    ") ;:Script>" 

	PREPARE pr_del_${ParentTable} FROM sql_stmt_text

END FUNCTION		## ${SqlPrepareQueriesFct}_${ModuleName}_parent

#########################################################
FUNCTION ${SqlDeclarePkyScrCrsFct}_${ParentTable}(p_where_clause)
## Build the query generated by CONSTRUCT BY NAME,
## Declare and open the cursor
## inbound param: query predicate
## outbound parameter: query status
	DEFINE p_where_clause STRING
	DEFINE qbe_statement STRING
	DEFINE rows_count integer
	DEFINE lsql_stmt_status integer

	# define primary_key record
	DEFINE l_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   

	LET qbe_statement = 
		"SELECT count(*) FROM ${ParentTable}",
		" WHERE ",p_where_clause CLIPPED
		<Script: if (defined($GlobalReferenceWhereClause)) { $OutLineNum=ffg_print($SRCHANDLE,"," . $GlobalReferenceWhereClause,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1); }:Script> 

	PREPARE prp_cnt_${ParentTable} FROM qbe_statement
	DECLARE crs_cnt_${ParentTable} CURSOR for prp_cnt_${ParentTable}

	OPEN crs_cnt_${ParentTable}
	SET ISOLATION TO ${LooseIsolationLevel}
	WHENEVER SQLERROR CONTINUE
	FETCH crs_cnt_${ParentTable} INTO rows_count
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	SET ISOLATION TO ${DefaultIsolationLevel}

	# if FETCH fails, count = 0, the, get back to query
	IF sqlca.sqlcode OR rows_count = 0 THEN
		let rows_count =0
	END IF
	FREE crs_cnt_${ParentTable}

	# display the selected columns

	LET qbe_statement = "SELECT <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"record","","flat","    "); :Script>",
	" FROM ${ParentTable} ",
	"WHERE ",p_where_clause clipped,
	<Script: if (defined($GlobalReferenceWhereClause)) { $OutLineNum=ffg_print($SRCHANDLE,$GlobalReferenceWhereClause . "," ,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1); }:Script> 
	" ORDER BY <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","",${KeyMode},"","","","flat","",$endline,1); :Script>"

	PREPARE prp_scrl_pky_${ParentTable} FROM qbe_statement

	# ${ScrollCursorPrefix}_pky_${ParentTable} : the first cursor selects all the primary keys (not all the table columns)
	DECLARE ${ScrollCursorPrefix}_pky_${ParentTable} SCROLL CURSOR <Script: if ( $DoTransactions eq 'true' ) { $OutLineNum=ffg_print($SRCHANDLE,"WITH HOLD",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,1); }:Script> 
	FOR prp_scrl_pky_${ParentTable}

	WHENEVER SQLERROR CONTINUE
	OPEN ${ScrollCursorPrefix}_pky_${ParentTable}
	WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	RETURN rows_count,sqlca.sqlcode
END FUNCTION		## ${SqlDeclarePkyScrCrsFct}_${ParentTable}

#######################################################################
FUNCTION ${SqlNextPrevFct}_${ParentTable}(p_offset)
## ${SqlNextPrevFct}_${ParentTable} : FETCH NEXT OR PREVIOUS RECORD
	DEFINE p_offset SMALLINT
	define lsql_stmt_status,record_found integer
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}


WHENEVER SQLERROR CONTINUE
	FETCH RELATIVE p_offset ${ScrollCursorPrefix}_pky_${ParentTable} INTO pky.*
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE 
	WHEN sqlca.sqlcode = 100 
		LET record_found = 0
		
	WHEN sqlca.sqlcode < 0 
		LET record_found = -1
	OTHERWISE
		LET lsql_stmt_status = 1
		LET record_found = 1
		#CALL ${SqlFetchFullRowFct}_${ParentTable} (pky.*)
		#RETURNING record_found,${MstInpFormRec}.*
		
	END CASE
	RETURN record_found,pky.*
END FUNCTION		## ${SqlNextPrevFct}_${ParentTable}

#########################################################################################
FUNCTION ${SqlFetchFullRowFct}_${ParentTable}(p_pky)
# ${SqlFetchFullRowFct}_${ParentTable} : read a complete row accessing by primary key
# inbound parameter : primary key
# outbound parameter: sql_stmt_status and row contents
	DEFINE sql_stmt_status smallint
	DEFINE p_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName}	# Form image record

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		$OutLineNum=ffg_print($SRCHANDLE,"DEFINE lookup_status INTEGER\n",$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		define_lookup_fields ($MainFormName,"parent","fromtype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	# read the table, access on primary key
WHENEVER SQLERROR CONTINUE
	OPEN ${FullRowCursorPrefix}${ParentTable} 
	USING p_pky.*

	FETCH ${FullRowCursorPrefix}${ParentTable}  INTO ${MstTableRec}.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	CASE
	WHEN  sqlca.sqlcode = 100 
		LET sql_stmt_status = 0
	WHEN  sqlca.sqlcode < 0 
		LET sql_stmt_status = -1
	OTHERWISE
		LET sql_stmt_status = 1
		CALL ${SetFormRecordFct}_${ParentTable}_${MainFormName}(${MstTableRec}.*)
		RETURNING ${MstInpFormRec}.*
	END CASE
	RETURN sql_stmt_status,${MstInpFormRec}.*
END FUNCTION		## ${SqlFetchFullRowFct}_${ParentTable}

########################################################################
FUNCTION ${SqlInsertFct}_${ParentTable}(p_${MstTableRec})
## INSERT in table ${ParentTable} 
	DEFINE lsql_stmt_status integer
	DEFINE rows_count SMALLINT
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record
	DEFINE p_${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record


WHENEVER SQLERROR CONTINUE
	EXECUTE pr_ins_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","all","",p_${MstTableRec},"","    ",""):Script>
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE 
		LET lsql_stmt_status = 0
		<Script:catch_last_serial_value($SRCHANDLE,${ParentTable},"pky"):Script>
		
	END IF
	RETURN lsql_stmt_status,pky.*
END FUNCTION		## ${SqlInsertFct}_${ParentTable}

########################################################################
FUNCTION ${SqlUpdateFct}_${ParentTable}(p_pky,p_${MstTableRec})
## ${SqlUpdateFct}_${ParentTable} :update ${ParentTable} record
	DEFINE sql_stmt_status integer
	DEFINE p_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE p_${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

WHENEVER SQLERROR CONTINUE
	EXECUTE pr_upd_${ParentTable} 
	USING <Script:print_table_columns($SRCHANDLE,${ParentTable},"","","exclnoentry","attr","",p_${MstTableRec},"","    ",$endline,1):Script>,
	p_pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		
		LET sql_stmt_status = -1
	ELSE 
		LET sql_stmt_status = 0
	END IF
	RETURN sql_stmt_status
END FUNCTION		## ${SqlUpdateFct}_${ParentTable}

##############################################################################################
FUNCTION ${SqlDeleteFct}_${ParentTable}(p_pky)
## ${SqlDeleteFct}_${ParentTable} :delete current row in table ${ParentTable} 
	DEFINE lsql_stmt_status smallint
	DEFINE p_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   

WHENEVER SQLERROR CONTINUE
   EXECUTE pr_del_${ParentTable} 
   USING p_pky.*

WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	IF sqlca.sqlcode < 0 THEN   
		LET lsql_stmt_status = -1
	ELSE
		LET lsql_stmt_status=0
	END IF
	RETURN lsql_stmt_status
END FUNCTION		## ${SqlDeleteFct}_${ParentTable}

################################################################################
FUNCTION ${SqlCheckPrimaryKeyFct}_${ParentTable}(p_pky)  
##   ${SqlCheckPrimaryKeyFct}_${ParentTable} : Check if primary key exists
## inbound parameter : record of primary key
## outbound parameter:  status > 0  if exists, 0 if no record, < 0 if error
	DEFINE p_pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE pk_status INTEGER

WHENEVER SQLERROR CONTINUE
	OPEN ${PkyCursorPrefix}${ParentTable} USING  p_pky.*
	FETCH ${PkyCursorPrefix}${ParentTable} 
WHENEVER SQLERROR CALL ${ErrorMngmtFunction}

	CASE sqlca.sqlcode
	WHEN 0 
		let pk_status = 1
	WHEN 100
		let pk_status = 0
	WHEN sqlca.sqlerrd[2] = 104
		let pk_status = -1		# record locked
	WHEN sqlca.sqlcode < 0
		let pk_status = sqlca.sqlcode
	END CASE

	RETURN pk_status
END FUNCTION		## ${SqlCheckPrimaryKeyFct}_${ParentTable}

################################################################################################
FUNCTION ${SetFormRecordFct}_${ParentTable}_${MainFormName}(p_tbl_contents)
## ${SetFormRecordFct}_${ParentTable}_${MainFormName}_${MainFormName}: assigns table values to form fields values
	DEFINE frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE p_tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE frm_contents.* TO NULL
	<Script:set_form_record ($SRCHANDLE,${ParentTable},${MainFormName},"frm_contents","p_tbl_contents") :Script>
	RETURN frm_contents.*
END FUNCTION		## ${SetFormRecordFct}${ModuleName}_${MainFormName}

################################################################################################
FUNCTION ${SetTableRecordFct}_${MainFormName}_${ParentTable}(p_sql_stmt_type,p_frm_contents)
## ${SetTableRecordFct}_${MainFormName}_${ParentTable}: assigns form fields value to table values
	DEFINE p_sql_stmt_type CHAR(1)					# + => Insert, # => Update
	DEFINE pky ${TypeDataPrefix}pky_${ParentTable}					#Primary key record   
	DEFINE p_frm_contents ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 		# Form image record
	DEFINE tbl_contents ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	INITIALIZE tbl_contents.* TO NULL
	CASE p_sql_stmt_type
	WHEN "I"			# Prepare record for INSERT
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},${Section},"p_frm_contents","tbl_contents","I") :Script>
	WHEN "U"			# Prepare record for UPDATE
		<Script:set_table_record ($SRCHANDLE,${ParentTable},${MainFormName},${Section},"p_frm_contents","tbl_contents","U") :Script>
	END CASE

	RETURN tbl_contents.*
END FUNCTION		## ${SetTableRecordFct}${MainFormName}_${ParentTable}

<Script: if ($ParentLookupTables > 0 ) {
	bld_lookup_functions ( ${MainFormName},$ParentTable,"parent" );
}:Script>

<Script: if ( $QxWidgetsCount > 0 ) { 
	bld_populate_widgets_calls_function($SRCHANDLE,$MainFormName,".*",".*") ;
	bld_populate_widgets_functions($SRCHANDLE,$MainFormName,".*",".*") ;
}  :Script>

<Script: if ( $ParentLookupTables > 0 && $DoPickListWindows eq "true" ) { 
	bld_picklist_windows($ModuleName) ;
} :Script>

<Script: if ($DoHelp eq 'true') {
	build_fct_Help(${MainFormName},${ParentTable});
   build_doc_Help(${MainFormName},$mstr_clnt_module)
}:Script>

<Script: if ( defined($ChildTable) && defined($ChildTemplate)) {
	if (defined($ChildFormFile)) {
		bld_child_module($ModuleName,$ChildFormFile,$ChildTemplate) ;
	} else {
		bld_child_module($ModuleName,$MainFormFile,$ChildTemplate) ;
	}
}:Script>