<Script:our $FormShortName=$FormName; $FormShortName=~ s/^f_//; :Script>noprint
<Script:our $MstTableRec=${TblPrfx} . ${RecordPrefix} . ${ParentTable} :Script>noprint}
<Script:our $LocalMstTableRec=${LocalVarPrefix} . ${TblPrfx} . ${RecordPrefix} . ${ParentTable} :Script>noprint}
<Script:our $InboundMstTableRec=${ArgumentPrefix} . ${TblPrfx} . ${RecordPrefix} . ${ParentTable} :Script>noprint}
<Script:our $MstInpFormRec=${FrmPrfx} . ${RecordPrefix} . ${FormShortName} :Script>noprint
<Script:our $LocalMstInpFormRec=${LocalVarPrefix} . ${FrmPrfx} . ${RecordPrefix} . ${FormShortName} :Script>noprint
<Script:our $InboundMstInpFormRec=${ArgumentPrefix} . ${FrmPrfx} . ${RecordPrefix} . ${FormShortName} :Script>noprint
<Script:our $MstSavFormRec=sav_${RecordPrefix} . ${FormShortName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
<Script:our $GlobalReferenceTable="kandoouser" :Script> noprint
<Script:our $GlobalReferenceRecord=${GlobalVarPrefix} . ${RecordPrefix} . ${GlobalReferenceTable} :Script> noprint
<Script:our $ListTable=${ParentTable} :Script> noprint
<Script:our $BMLetter=substr(${ModuleName},0,1) :Script> noprint
<Script:our $BMCode=substr(${ModuleName},0,2) :Script> noprint
<AddRqrmnt:fgl::../common/glob_GLOBALS.4gl:AddRqrmnt>
<AddRqrmnt:lib::lib_tool:AddRqrmnt> 
<AddRqrmnt:lib::lib_tool_db:AddRqrmnt> 
<AddRqrmnt:lib::lib_tool_windecoration:AddRqrmnt> 

# module  generated by KandooERP Ffg(c)
# Generated on ${GenerationTS}
# Main template ${MainModuleTemplate} 

GLOBALS "../common/glob_GLOBALS.4gl"

<Script: $QxWidgetsCount=define_Widgets ($SRCHANDLE,$MainFormName,".*",".*") :Script> 

	DEFINE ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} TYPE AS RECORD 		# This is the TYPE for form image record
		<Script:define_form_fields($SRCHANDLE,$MainFormName,${ParentTable},"parent","parent","false","all","","\t\t")  :Script>
	END RECORD

	DEFINE ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} TYPE AS RECORD 			# This is the TYPE for table image record
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"","","all","record",$MstTableRec,"    "):Script>
	END RECORD

	DEFINE ${TypeDataPrefix}prykey_${ParentTable} TYPE AS RECORD 
		<Script:define_PK_columns ($SRCHANDLE,${ParentTable},"pky",$DefineStyle):Script>
	END RECORD
	DEFINE ${ModuleVarPrefix}program CHAR(30)

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		define_lookup_fields ($MainFormName,"parent","astype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>

	# Define cursors and prepared statements
	DEFINE crs_row_${ParentTable} CURSOR
	DEFINE crs_pky_${ParentTable} CURSOR
	DEFINE crs_upd_${ParentTable} CURSOR
	DEFINE crs_cnt_${ParentTable} CURSOR
	DEFINE crs_scrl_pky_${ParentTable} CURSOR
	DEFINE pr_ins_${ParentTable} PREPARED
	DEFINE pr_upd_${ParentTable} PREPARED
	DEFINE pr_del_${ParentTable} PREPARED

MAIN

	DEFER INTERRUPT
	
	-- WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	CALL setModuleId("ProgramName")			# put program name here (1 letter 2 or 3 digits)
	CALL ui_init(0)		#Initial UI Init
	DEFER QUIT
	DEFER INTERRUPT

	CALL main_${ModuleName}_${ParentTable}()

END MAIN

##########################################################################
FUNCTION mc_${ModuleName}_sccs()
## definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION
##########################################################################

FUNCTION main_${ModuleName}_${ParentTable} ()
## this module's main function called by MAIN
	DEFINE record_found SMALLINT
	DEFINE sql_stmt_status INTEGER
	DEFINE ${LocalVarPrefix}prykey_${ParentTable} ${TypeDataPrefix}prykey_${ParentTable} 
	DEFINE ${LocalMstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record


	CALL security(getModuleId()) #authenticate
	--CALL init_${BMLetter}_${BMCode}()      #init utility module	# put Business module letter + 2 letters

	<Script: if ( $QxWidgetsCount > 0 ) { 
		print "CALL ${InitWidgetsFct}_$ModuleName()";
	}  :Script>

	CALL ${SqlPrepareQueriesFct}_parent_${ModuleName} () # initialize all cursors on master table
	<Script: if ( $ChildTable ne "" ) { 
		print "CALL ${SqlPrepareQueriesFct}_${ModuleName}_child\(\)    # initialize allcursors on Child table";
	}:Script>

	OPEN WINDOW ${PLWPrefix}${ListTable}
	WITH FORM "${ListFormName}" ATTRIBUTES(border)
	<Script: if ( $QxWidgetsCount > 0 ) { 
		print "CALL winDecoration(\"${ListFormName}\")";
	}  :Script>

	MENU "${ParentTable}"
	
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable} in a list window"
		CALL ${ListRecordsFct}_qbe_${ModuleName}()
		RETURNING record_found,${LocalVarPrefix}prykey_${ParentTable}.*
		CASE
			WHEN record_found > 0
				CALL menu_${ModuleName}_parent(${LocalVarPrefix}prykey_${ParentTable})
			WHEN record_found = 0
				ERROR "No rows found, please query again"
			OTHERWISE	
				ERROR "Query ran with errors"
		END CASE

	COMMAND "${AddOption}" "${AddCom} ${ParentTable}"
		CALL ${FrmInputRecordFct}_parent_${ModuleName}(MODE_CLASSIC_ADD,l_prykey_${ParentTable}.*,${LocalMstInpFormRec}.*) 
		RETURNING sql_stmt_status,l_prykey_${ParentTable}.*

	COMMAND "${Quit}" "${QuitCom}"
		EXIT MENU
	END MENU

END FUNCTION		# main_${ModuleName}_${ParentTable}

######################################################################
FUNCTION menu_${ModuleName}_parent (${ArgumentPrefix}prykey_${ParentTable})
## menu_${ModuleName}_parent
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nbsel_${ParentTable} INTEGER
	DEFINE ${SqlStmtStatus} INTEGER
	DEFINE record_num INTEGER
	DEFINE matching_rows INTEGER
	DEFINE arr_elem_num INTEGER
	DEFINE picked SMALLINT
	DEFINE action SMALLINT
	DEFINE xnumber SMALLINT
	DEFINE ${ArgumentPrefix}prykey_${ParentTable} ${TypeDataPrefix}prykey_${ParentTable} 					# Primary key record
	DEFINE ${LocalMstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	DEFINE ${WhereClauseVariable} STRING
	DEFINE record_found INTEGER
	DEFINE lookup_status INTEGER

	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}"
	
	CALL ${SqlFetchFullRowFct}_parent_${ModuleName} (${ArgumentPrefix}prykey_${ParentTable}.*)
	RETURNING record_found,${LocalMstInpFormRec}.*

	CALL ${FrmDisplayRecordFct}_parent_${ModuleName}_${MainFormName}(${LocalMstInpFormRec}.*)

	<Script: if ( defined($ChildTable) ) { 
		print "CALL ${InitializeArrayFct}_${ChildTable}()";
		print "LET arr_elem_num = ${FillArrayFromFgnKeyFct}$ChildTable (${ArgumentPrefix}prykey_${ParentTable}.*)";
		print "IF arr_elem_num > 0 THEN";
		print "\tCALL ${DisplayArrayFct}${ChildTable}(true)";
		print "END IF";
		print "SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
	} :Script>

	MENU "${ParentTable}"
	BEFORE MENU

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		CALL ${FrmInputRecordFct}_parent_${ModuleName}(MODE_CLASSIC_ADD,${ArgumentPrefix}prykey_${ParentTable}.*,${LocalMstInpFormRec}.*) 
		RETURNING sql_stmt_status,${ArgumentPrefix}prykey_${ParentTable}.*
		MESSAGE ""
		<Script: if ( defined($ChildTable) ) {
			print "SHOW OPTION \"${EditArrayMessage}${ChildTable}\"";
			print "CALL ${InitializeArrayFct}_${ChildTable}()";
#			print "CALL ${FillArrayFromFgnKeyFct}${ChildTable} (${ArgumentPrefix}prykey_${ParentTable}.*)" ;
		} :Script>

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		IF ${SqlCheckPrimaryKeyFct}_parent_${ModuleName}(${ArgumentPrefix}prykey_${ParentTable}.*) < 0 THEN
			ERROR "${Islock} "
		ELSE
			CALL ${FrmInputRecordFct}_parent_${ModuleName}(MODE_CLASSIC_EDIT,${ArgumentPrefix}prykey_${ParentTable}.*,${LocalMstInpFormRec}.*) 
			RETURNING sql_stmt_status,${ArgumentPrefix}prykey_${ParentTable}.*
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		IF ${SqlCheckPrimaryKeyFct}_parent_${ModuleName}(${ArgumentPrefix}prykey_${ParentTable}.*) < 0 THEN
			ERROR "${Islock} "
		ELSE
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_parent_${ModuleName}(${ArgumentPrefix}prykey_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		END IF


	<Script: if ( defined($ChildTable) ) { 
	print "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"";
	print "\tCALL ${DisplayArrayFct}${ChildTable} (False)"; 
	print "";
	print "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"";
	print "\tCALL ${EditArrayFct}${ChildScreenRecord} (${ArgumentPrefix}prykey_${ParentTable}.*)"; 
	} :Script>

	COMMAND "Return" "Return to List"
		EXIT MENU
	END MENU
	CLOSE WINDOW ${MainFormName}
END FUNCTION

#######################################################################
FUNCTION ${FrmConstructDatasetFct}_parent_${ModuleName}()
## ${FrmConstructDatasetFct}_parent_${ModuleName}_${MainFormName} : Query By Example on table ${ParentTable}
## Input selection criteria,
## prepare the query,
## open the data set
	DEFINE ${QbeStmtVariable},${WhereClauseVariable} STRING
	DEFINE xnumber,${SqlStmtStatus} INTEGER
	DEFINE l_pky ${TypeDataPrefix}prykey_${ParentTable} 
	DEFINE ${LocalMstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record

	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	CLEAR FORM
	INITIALIZE ${LocalMstInpFormRec}.* TO NULL
	DISPLAY ${LocalMstInpFormRec}.*  TO ${ParentTable}.*

	CONSTRUCT BY NAME ${WhereClauseVariable} ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*","false",".*",${ParentTable},"\t\t\t","","","reset"):Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT field_touched(${ParentTable}.*) AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		LET ${WhereClauseVariable} = NULL
		MESSAGE "${CancelCom}"
		LET int_flag=0
	END IF
	RETURN ${WhereClauseVariable}
END FUNCTION		## ${FrmConstructDatasetFct}_parent_${ModuleName}

<:Include Kandoo-parent-common-functions.mtplt :Include>