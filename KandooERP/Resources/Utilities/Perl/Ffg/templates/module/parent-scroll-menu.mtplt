<Script:our $FormShortName=$FormName; $FormShortName=~ s/^f_//; :Script>noprint
<Script:our $MstTableRec=${TblPrfx}${RecordPrefix}${ParentTable} :Script>noprint
<Script:our $MstInpFormRec=${FrmPrfx}${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstInpFormRecAsParam=p_${FrmPrfx}${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstSavFormRec=sav_${RecordPrefix}${FormShortName} :Script>noprint
<Script:our $MstLkUpRec=${SRLUpPrfx} . ${ModuleName} :Script> noprint
<Script:our $GlobalReferenceTable="company" :Script>noprint
<Script:our $GlobalReferenceRecord=${GlobalVarPrefix} . $GlobalReferenceTable :Script>noprint
<Script:our $GlobalReferenceColumn="cmpy_code" :Script>noprint
<Script:our $GlobalReferenceWhereClause=sprintf " \" AND %s = '\",%s.%s,\"'\"\n",$GlobalReferenceColumn,$GlobalReferenceRecord,$GlobalReferenceColumn :Script>noprint
@GlobalDef
@ModuleDef
<AddRqrmnt:lib::lib_security:AddRqrmnt> 
<AddRqrmnt:lib::lib_tool:AddRqrmnt> 

# module  generated by KandooERP Ffg(c)
# Generated on ${GenerationTS}
# Main template ${MainModuleTemplate} 

<Script: $QxWidgetsCount=define_Widgets ($SRCHANDLE,$MainFormName,".*",".*") :Script> 
DATABASE ${DatabaseName}
	DEFINE ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} TYPE AS RECORD 		# This is the TYPE for form image record
		<Script:define_form_fields($SRCHANDLE,$MainFormName,".*","parent","parent","false","false","","\t\t")  :Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} TYPE AS RECORD 			# This is the TYPE for table image record
		<Script:define_table_columns ($SRCHANDLE,${ParentTable},"","","all","record",$MstTableRec,"    "):Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable} TYPE AS RECORD 
		<Script:define_PK_columns ($SRCHANDLE,${ParentTable},"pky",$DefineStyle):Script>
	END RECORD
	
	DEFINE ${TypeDataPrefix}formonly TYPE AS RECORD 
		<Script:define_form_fields($SRCHANDLE,$MainFormName,"formonly","parent","parent","true","false","","\t\t")  :Script>
	END RECORD

	DEFINE ${ModuleVarPrefix}program CHAR(30)

	<Script: if ( $ParentLookupTables > 0 ) { 
		$IndentLevel=1;
		define_lookup_fields ($MainFormName,"parent","astype",$Tabul,$WriteMode,$isRecord) ;
	}:Script>
	<Script: if ( defined($GlobalReferenceRecord)) {
	$line=sprintf "DEFINE %s RECORD LIKE %s.*\n",$GlobalReferenceRecord,$GlobalReferenceTable;
	$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
	}:Script>

MAIN
@Define
@Init 
	DEFER INTERRUPT
	
	-- WHENEVER SQLERROR CALL ${ErrorMngmtFunction}
	--CALL setModuleId("${ProgramName}")			# put program name here (1 letter 2 or 3 digits)
	--CALL ui_init(0)		#Initial UI Init

	DEFER QUIT
	DEFER INTERRUPT

	--CALL security(getModuleId()) #authenticate
	--CALL init_u_ut() #init utility module	# put Business module letter + 2 letters

	SELECT * INTO ${GlobalReferenceRecord}.* FROM company
	WHERE cmpy_code = "KA"

	CALL main_${ProgramName}()

END MAIN

##########################################################################
FUNCTION mc_${ModuleName}_sccs()
## definition variable sccs
	DEFINE sccs_var CHAR(70)
LET sccs_var="%W% %D%"
END FUNCTION
##########################################################################
FUNCTION main_${ProgramName} ()
## this module's main function called by MAIN

	OPEN WINDOW ${MainFormName} WITH FORM "${MainFormName}"
	<Script: if ( $QxWidgetsCount > 0 ) { 
		$line=sprintf "CALL %s_%s()\n",${InitWidgetsFct},$ModuleName;
		$OutLineNum=ffg_print($SRCHANDLE,$line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
	}  :Script>

	CALL ${SqlPrepareQueriesFct}_${ModuleName}_parent () # initialize all cursors on master table
	<Script: if ( $ChildTable ne "" ) { 
		$Line = sprintf "CALL ${SqlPrepareQueriesFct}_${ModuleName}_child\(\)\n";# initialize allcursors on Child table \n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
	}:Script>

	CALL menu_${ProgramName}()      

	CLOSE WINDOW ${MainFormName}

END FUNCTION

######################################################################
FUNCTION menu_${ProgramName} ()
## menu_${ProgramName}
## the top level menu 
## input arguments: none
## output arguments: none
	DEFINE nb_${RecordPrefix}selected_${ParentTable} INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE record_num INTEGER
	DEFINE action smallint
	DEFINE xnumber smallint
	DEFINE arr_elem_num smallint
	DEFINE ${PrmryKeyPrefix}_${ParentTable} ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable} 		# Primary key record
	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record
	DEFINE ${MstTableRec} ${TypeDataPrefix}tbl_${RecordPrefix}${ParentTable} 		# Table image record

	DEFINE where_clause STRING
	DEFINE record_found INTEGER
	DEFINE lookup_status INTEGER

	LET nb_${RecordPrefix}selected_${ParentTable} = 0
	MENU "${ParentTable}"
	BEFORE MENU
		<Script:
		$Line="HIDE OPTION \"${NextOption}\",\"${PreviousOption}\",\"${EditOption}\",\"${SuppressOption}\"";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		if ( defined($ChildTable) ) { 
			$Line=",\"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		} :Script>
		
	COMMAND "${QueryOption}" "${QueryCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 1000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		INITIALIZE ${MstInpFormRec}.* TO NULL
		CLEAR FORM
		HIDE OPTION "${NextOption}","${PreviousOption}"

		# Build the QBE where clause
		CALL ${FrmFctPrefix}_${QueryOption}_${ModuleName}_${MainFormName}() RETURNING where_clause   

		# Call the function that counts matching rows and opens the scroll cursor on primary key
		CALL ${SqlDeclarePkyScrCrsFct}_${ParentTable}_${ModuleName}(where_clause)
		RETURNING nb_${RecordPrefix}selected_${ParentTable},sql_stmt_status
		
		IF nb_${RecordPrefix}selected_${ParentTable} > 0 THEN 
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*

			CASE
			WHEN record_found = 1
				LET record_num = 1
				CALL ${SqlFetchFullRowFct}_${ParentTable}_${ModuleName} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRec}.*)

				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (${PrmryKeyPrefix}_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			END CASE
			IF nb_${RecordPrefix}selected_${ParentTable} > 1 THEN
			   SHOW OPTION "${NextOption}"
			   NEXT OPTION "${NextOption}"
			END IF
			SHOW OPTION "${EditOption}","${SuppressOption}"
		ELSE 
			ERROR "${NorowsSelected}"
			NEXT OPTION "${QueryOption}"
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		
		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
	} :Script>

	COMMAND "${NextOption}" "${NextCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 2000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num <= nb_${RecordPrefix}selected_${ParentTable} THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*

			CASE 
			WHEN record_found = 0 
				ERROR "${Lastrow} ${ParentTable}"
			WHEN record_found = -1 
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num + 1
				CALL ${SqlFetchFullRowFct}_${ParentTable}_${ModuleName} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*

				CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (${PrmryKeyPrefix}_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>

				IF record_num >= nb_${RecordPrefix}selected_${ParentTable} THEN
				   HIDE OPTION "${NextOption}"
				END IF
                IF record_num > 1 THEN
                	SHOW OPTION "${PreviousOption}"
                ELSE
                	HIDE OPTION "${PreviousOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst}  ${ParentTable} "
			NEXT OPTION "${QueryOption}" 
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;

		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		} :Script>

	COMMAND "${PreviousOption}" "${PreviousCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 3000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		
		MESSAGE ""
		CLEAR FORM
		INITIALIZE ${MstInpFormRec}.* TO NULL

		IF record_num >= 1  THEN
			CALL ${SqlNextPrevFct}_${ParentTable}(-1) RETURNING record_found,
			${PrmryKeyPrefix}_${ParentTable}.*
			CASE 
			WHEN record_found = 0
				ERROR "${FirstRow} ${ParentTable}"
			WHEN record_found < -1
				ERROR "${Unreachable} ",sqlca.sqlcode
			WHEN record_found = 1
				LET record_num = record_num - 1
				CALL ${SqlFetchFullRowFct}_${ParentTable}_${ModuleName} (${PrmryKeyPrefix}_${ParentTable}.*)
				RETURNING record_found,${MstInpFormRec}.*
				
				CALL ${FrmDisplayRecordFct}_${ModuleName}_${MainFormName}(${MstInpFormRec}.*)
				<Script: if ( defined($ChildTable) ) { 
					$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line=sprintf   "LET arr_elem_num = ${DisplayArrayFct}$ChildTable (${PrmryKeyPrefix}_${ParentTable}.*,False)\n"; 				
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
					$Line="SHOW OPTION \"${ViewArrayMessage}${ChildTable}\",\"${EditArrayMessage}${ChildTable}\"\n";
					$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
				} :Script>
				IF record_num = 1  THEN
				   HIDE OPTION "${PreviousOption}"
				END IF
                IF record_num < nb_${RecordPrefix}selected_${ParentTable} THEN
                	SHOW OPTION "${NextOption}"
                ELSE
                	HIDE OPTION "${NextOption}"
				END IF
			END CASE
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF
		<Script: if ( defined($ChildTable) ) { 
		$Line=sprintf "COMMAND KEY (${ViewArrayKey}) \"${ViewArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
		
		$Line=sprintf "COMMAND KEY (${EditArrayKey}) \"${EditArrayMessage}${ChildTable}\"\n";
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		$Line=sprintf "\tCALL ${EditArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,True)"; 
		$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
	} :Script>

	COMMAND "${AddOption}" "${InsertCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 4000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		CALL ${FrmAddRecordFct}_${ModuleName}_${MainFormName}() RETURNING sql_stmt_status,${PrmryKeyPrefix}_${ParentTable}.*
		MESSAGE ""
		<Script: if ( defined($ChildTable) ) {
			$Line = "SHOW OPTION \"${EditArrayMessage}${ChildTable}\"";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;				
			$Line="CALL ${InitializeArrayFct}_${ChildTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;				
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
			$Line=sprintf "CALL ${DisplayArrayFct}${ChildTable} (${PrmryKeyPrefix}_${ParentTable}.*,False)\n" ;
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE); 
		} :Script>

	COMMAND "${EditOption}" "${UpdateCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 5000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nb_${RecordPrefix}selected_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			ELSE
				CALL ${FrmEditRecordFct}_${ModuleName}_${MainFormName}(${PrmryKeyPrefix}_${ParentTable}.*,${MstInpFormRec}.*)
				RETURNING sql_stmt_status
			END IF
		ELSE
			ERROR " ${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

   COMMAND "${SuppressOption}" "${DeleteCom} ${ParentTable}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 6000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		IF nb_${RecordPrefix}selected_${ParentTable} THEN
			IF ${SqlCheckPrimaryKeyFct}_${ParentTable}(${PrmryKeyPrefix}_${ParentTable}.*) < 0 THEN
				ERROR "${Islock} "
				NEXT OPTION "${NextOption}"
			END IF
			WHILE TRUE
				CALL confirm_operation(5,10,"${SuppressOption}") RETURNING action
				CASE 
				WHEN action = 0 OR action = 1 
					EXIT WHILE  # degage abandon
				WHEN action = 2   
					CALL ${FrmSuppressRecordFct}_${ModuleName}_${MainFormName}(${PrmryKeyPrefix}_${ParentTable}.*)
					RETURNING sql_stmt_status
					EXIT WHILE
				END CASE
			END WHILE
		ELSE
			ERROR "${SelectFirst} ${ParentTable} "
			NEXT OPTION "${QueryOption}"
		END IF

	COMMAND "${Quit}" "${QuitCom}"
		<Script: if ($DoHelp eq 'true') {
			$Line = "		HELP 9000";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE);
		} :Script>
		MESSAGE ""
		EXIT MENU
	END MENU
END FUNCTION

#######################################################################
FUNCTION ${FrmFctPrefix}_${QueryOption}_${ModuleName}_${MainFormName}()
## ${FrmFctPrefix}_${QueryOption}_${ModuleName}_${MainFormName} : Query By Example on table ${ParentTable}
## Input selection criteria,
## prepare the query,
## open the data set
	DEFINE qbe_statement,where_clause STRING
	DEFINE xnumber,sql_stmt_status INTEGER
	DEFINE l_pky ${TypeDataPrefix}${PrmryKeyPrefix}_${ParentTable} 

	DEFINE ${MstInpFormRec} ${TypeDataPrefix}frm_${RecordPrefix}${FormShortName} 	# Form image record

	DEFINE reply CHAR(5)
	LET xnumber = 0
	MESSAGE "${InputCriteria}"
	# initialize record and display blank
	CLEAR FORM
	INITIALIZE ${MstInpFormRec}.* TO NULL
	DISPLAY BY NAME <Script: print_form_fields ($SRCHANDLE,$MainFormName,".*","parent",".*","false","false",${MstInpFormRec},"\t\t\t","","","reset"):Script>

	CONSTRUCT BY NAME where_clause ON <Script: print_form_fields ($SRCHANDLE,$MainFormName,$ParentTable,"parent",".*",".*","false","TblName","\t\t\t","","","reset"):Script>

		<Script: if (defined($do_build_help) ) {  
			$Line=sprintf "ON ACTION (\"$Helpkey\")\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE) ;
			$Line=sprin tf "\tCALL help_${ParentTable}()\n";
			$OutLineNum=ffg_print($SRCHANDLE,$Line,$OutLineNum,$FctName,"AdHoc",$TemplateFile,$TmpltLineNum,$SIGNHANDLE,0,0) ;
		 }:Script>

	## Check whether criteria have been entered
	AFTER CONSTRUCT 
		IF NOT DIALOG.GetFieldTouched("${ParentTable}.*") AND NOT int_flag THEN
			LET reply = fgl_winbutton("","${SelectAllRows}","${Yes}","${Yes}|${No}","question",0)
			CASE 
			WHEN reply MATCHES "${Yes}"
				EXIT CONSTRUCT 
			OTHERWISE                  # Saisie d'un critere de selection
				ERROR "${Oneatleast}"
				CONTINUE CONSTRUCT
			END CASE
		END IF
	END CONSTRUCT

	IF int_flag = TRUE THEN
		LET where_clause = NULL
		MESSAGE "${CancelCom}"
		LET int_flag=0
	END IF
	RETURN where_clause
END FUNCTION		## ${FrmFctPrefix}_${QueryOption}_${ModuleName}_${MainFormName}

<:Include parent-common-functions.mtplt :Include>