# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2018-09-15 11:27:18		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/child_standard.mtplt 		                                 	#@G00003
############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE attributes_translation_pky_array DYNAMIC ARRAY OF RECORD
	attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
	language LIKE attributes_translation.language 
END RECORD

DEFINE attributes_translation_sr_array DYNAMIC ARRAY OF RECORD
	language LIKE attributes_translation.language,
	eng_message LIKE attributes_translation.translation,
	translation LIKE attributes_translation.translation ,
	modif_timestamp LIKE attributes_translation.modif_timestamp , 
	text_length SMALLINT, 
	identical_count INTEGER
END RECORD

DEFINE attributes_translation_status_array DYNAMIC ARRAY OF SMALLINT
DEFINE homonyms_nbr INTEGER 
DEFINE tbl_attributes_translation RECORD
	attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
	language LIKE attributes_translation.language,
	translation LIKE attributes_translation.translation
END RECORD

#################################################################################################		                        	#@G00024
FUNCTION prepare_queries_frm_obj_translate_attributes_translation ()
	# this function INITIALIZEs all cursors AND prepared statements for the attributes_translation AND lookups		            	#@G00026
	#################################################################################################		                        	#@G00027
	DEFINE query_text STRING
	# Prepare the CURSOR TO display the attributes_translation array		                                                     	#@G00029
	# using foreign key pointing TO form_attributes		                                                                      	#@G00030

	LET query_text = "SELECT attributes_translation.attribute_id,attributes_translation.language,",
	"attributes_translation.language,",
	"attributes_translation.translation,", 
	"\"\",", 
	"attributes_translation.modif_timestamp,",
	"length(translation), ",
	"\"\",", 
	"case when attributes_translation.language = \"ENU\" then ' ' ", 
		"else attributes_translation.language end case, ", 
		"form_attributes.attribute_order ", 
		" FROM form_attributes, ",
		"attributes_translation ",
		"WHERE attributes_translation.attribute_id = form_attributes.attribute_id ",
		" AND attributes_translation.attribute_id = ? ",
		" ORDER BY 8,7 "
		PREPARE pr_child_attributes_translation FROM query_text
		DECLARE crs_child_attributes_translation CURSOR FOR pr_child_attributes_translation

		# PREPARE INSERT statement		                                                                                              	#@G00042
		LET query_text =
		"INSERT INTO attributes_translation ( attribute_id,language,translation )",
		" VALUES ( ?,?,? )"
		PREPARE pr_ins_attributes_translation FROM query_text

		# PREPARE UPDATE statement		                                                                                              	#@G00048
		LET query_text=
		"UPDATE attributes_translation ",
		"SET ( translation,modif_timestamp )",
		" = ( ?,? )",
		" WHERE attribute_id = ? 
		AND language = ? "
		PREPARE pr_upd_attributes_translation FROM query_text

		# PREPARE DELETE statement		                                                                                              	#@G00057
		LET query_text= "DELETE FROM attributes_translation ",
		" WHERE attribute_id = ? 
		AND language = ? "
		PREPARE pr_del_attributes_translation FROM query_text

END FUNCTION

#######################################################################		                                                  	#@G00065
FUNCTION open_array_crs_attributes_translation_sr_array(fky)
	# This function opens the main CURSOR for the table attributes_translation		                                            	#@G00067
	#######################################################################		                                                  	#@G00068
	DEFINE lsql_ok INTEGER
	DEFINE fky RECORD
		attribute_id LIKE form_attributes.attribute_id # CHAR(24)
	END RECORD

	WHENEVER ERROR CONTINUE
	OPEN crs_child_attributes_translation USING fky.*

	WHENEVER ERROR CALL error_mngmt
	CASE
		WHEN sqlca.sqlcode = 100
			LET lsql_ok = 0
		WHEN sqlca.sqlcode < 0
			LET lsql_ok = -1
		OTHERWISE
			LET lsql_ok = 1
	END CASE
	RETURN lsql_ok
END FUNCTION

########################################################################		                                                 	#@G00089
## INSERT in table attributes_translation 		                                                                            	#@G00090
########################################################################		                                                 	#@G00091
FUNCTION sql_insert_attributes_translation(lr_attributes_translation)
	DEFINE lr_attributes_translation RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language LIKE attributes_translation.language, 
		translation LIKE attributes_translation.translation,
		modif_timestamp LIKE attributes_translation.modif_timestamp 
	END RECORD

	DEFINE lsql_stmt_status INTEGER
	DEFINE lookup_status INTEGER
	DEFINE nb_deleted_rows INTEGER

	WHENEVER ERROR CONTINUE
	EXECUTE pr_ins_attributes_translation
	USING lr_attributes_translation.attribute_id,
	lr_attributes_translation.language,
	lr_attributes_translation.translation #
	WHENEVER ERROR CALL error_mngmt

	CASE
		WHEN sqlca.sqlcode = 0
			LET lsql_stmt_status = 0
		WHEN sqlca.sqlcode < 0
			CALL display_eric_error("sql_insert attributes_translation:failed ")
			LET lsql_stmt_status = -1
	END CASE
	RETURN lsql_stmt_status
END FUNCTION

########################################################################		                                                 	#@G00118
## sql_update_attributes_translation :UPDATE current attributes_translation record		                                 	#@G00119
########################################################################		                                                 	#@G00120
FUNCTION sql_update_attributes_translation(pky,lr_attributes_translation)
	DEFINE lr_attributes_translation RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language LIKE attributes_translation.language, 
		translation LIKE attributes_translation.translation,
		modif_timestamp LIKE attributes_translation.modif_timestamp 
	END RECORD
	DEFINE lsql_stmt_status INTEGER
	DEFINE nb_modified_rows INTEGER
	DEFINE pky RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3)
	END RECORD

	WHENEVER ERROR CONTINUE
	EXECUTE pr_upd_attributes_translation
	USING lr_attributes_translation.translation ,
	current, 
	pky.*

	WHENEVER ERROR CALL error_mngmt
	CASE
		WHEN sqlca.sqlcode = 0
			LET lsql_stmt_status = 0
			LET nb_modified_rows = sqlca.sqlerrd[3]
		WHEN sqlca.sqlcode < 0
			CALL display_eric_error("sql_update attributes_translation:failed ")
			LET lsql_stmt_status = -1
			LET nb_modified_rows = 0
	END CASE
	RETURN lsql_stmt_status,nb_modified_rows
END FUNCTION

########################################################################		                                                 	#@G00152
## delete_attributes_translation :delete Selected row in table attributes_translation 		                             	#@G00153
########################################################################		                                                 	#@G00154
FUNCTION sql_delete_attributes_translation(pky)
	DEFINE lsql_stmt_status SMALLINT
	DEFINE nb_deleted_rows INTEGER
	DEFINE pky RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3)
	END RECORD

	WHENEVER ERROR CONTINUE
	EXECUTE pr_del_attributes_translation USING pky.*

	WHENEVER ERROR CALL error_mngmt
	CASE
		WHEN sqlca.sqlcode = 0
			LET lsql_stmt_status=0
			LET nb_deleted_rows = sqlca.sqlerrd[3]
		WHEN sqlca.sqlcode < 0
			CALL display_eric_error("sql_delete attributes_translation:failed ")
			LET lsql_stmt_status = -1
	END CASE

	RETURN lsql_stmt_status,nb_deleted_rows
END FUNCTION

################################################################################		                                         	#@G00179
FUNCTION status_pk_attributes_translation(pky)
	# This function Checks if primary key exists		                                                                             	#@G00181
	# inbound parameter : record of primary key		                                                                              	#@G00182
	# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00183
	################################################################################		                                         	#@G00184
	DEFINE pky RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3)
	END RECORD
	DEFINE pk_status INTEGER

	WHENEVER ERROR CONTINUE
	OPEN crs_pky_mform_attributes USING pky.*
	FETCH crs_pky_mform_attributes
	WHENEVER ERROR CALL error_mngmt

	CASE sqlca.sqlcode
		WHEN 0
			LET pk_status = 1
		WHEN 100
			LET pk_status = 0
		WHEN sqlca.sqlerrd[2] = 104
			LET pk_status = -1 # RECORD locked
		WHEN sqlca.sqlcode < 0
			LET pk_status = sqlca.sqlcode
	END CASE
	RETURN pk_status
END FUNCTION

#@G00209

#######################################################################		                                                  	#@G00211
FUNCTION initialize_array_attributes_translation()
	#######################################################################		                                                  	#@G00213
	# INITIALIZEs arrays		                                                                                                    	#@G00214
	CALL attributes_translation_sr_array.clear()
	CALL attributes_translation_pky_array.clear()
	CALL attributes_translation_status_array.clear()
END FUNCTION

######################################################################################################################################################			#@G00220
FUNCTION display_array_attributes_translation (fky,browse)
	# This function displays the array data (attributes_translation_sr_array) based on the foreign key 		                   	#@G00222
	# browse: FALSE means that the array IS displayed without possibility of browsing inside (just show array AND skip TO next parent row)			#@G00223
	######################################################################################################################################################			#@G00224
	DEFINE elem_num,choice,xpos,ypos INTEGER
	DEFINE arrcurr,srcline INTEGER
	DEFINE sql_ok INTEGER
	DEFINE qbe_stmt STRING
	DEFINE browse boolean
	DEFINE where_clause STRING
	DEFINE fky RECORD
		attribute_id LIKE form_attributes.attribute_id # CHAR(24)
	END RECORD
	DEFINE sql_stmt_status INTEGER

	IF browse = false THEN
		# opening array CURSOR AND FETCH data only when reading the parent row		                                                 	#@G00237
		LET sql_ok = open_array_crs_attributes_translation_sr_array(fky.*)
		LET elem_num = 1
		FOREACH crs_child_attributes_translation INTO attributes_translation_pky_array[elem_num].*,attributes_translation_sr_array[elem_num].*
			LET attributes_translation_status_array[elem_num] = 0 # elements exists
			IF attributes_translation_sr_array[elem_num].language = "ENU" THEN 
				SELECT count(*) INTO attributes_translation_sr_array[elem_num].identical_count 
				FROM attributes_translation 
				WHERE translation = attributes_translation_sr_array[elem_num].translation 
				AND language = "ENU" 
			END IF 
			LET elem_num = elem_num + 1
		END FOREACH
		IF elem_num > 1 THEN
			CALL attributes_translation_sr_array.deleteelement(elem_num)
		END IF
	END IF

	DISPLAY ARRAY attributes_translation_sr_array
	TO arr_translation.*
		BEFORE DISPLAY
			#CALL publish_toolbar("kandoo","chl_frm_obj_translate","display_arr-attributes-1")        -- albo KD-511
			IF browse = false THEN
				EXIT DISPLAY
			END IF
	END DISPLAY

	RETURN elem_num-1
END FUNCTION

###########################################################################################################		              	#@G00260
FUNCTION edit_array_attributes_translation (p_rec_ky_form_attributes)
	# This function calls the INPUT array function (input_array_attributes_translation) TO edit the array data		            	#@G00262
	# then, accordingly, the SQL statement functions (array_bulk_update_)		                                                    	#@G00263
	# it IS generally called FROM another module		                                                                             	#@G00264
	###########################################################################################################		              	#@G00265
	DEFINE srcline INTEGER
	DEFINE arrcurr INTEGER
	DEFINE bulk_update_status SMALLINT
	DEFINE nbr_edited_rows INTEGER
	DEFINE sql_action SMALLINT
	DEFINE i SMALLINT
	DEFINE p_rec_ky_form_attributes RECORD
		attribute_id LIKE form_attributes.attribute_id # CHAR(24) # OR IS it the foreign KEY here?
	END RECORD

	BEGIN WORK
		#@G00275
		WHILE true
			CALL input_array_attributes_translation (p_rec_ky_form_attributes.*) RETURNING nbr_edited_rows,sql_action
			#@G00276
			IF nbr_edited_rows > 0 THEN
				CASE
					WHEN sql_action = 2
						LET bulk_update_status = array_bulk_update_attributes_translation (p_rec_ky_form_attributes.*)
						IF bulk_update_status < 0 THEN
							ROLLBACK WORK
							#@G00281
							ERROR "input_array_ failed"
						ELSE
							ERROR "input_array_ Successful operation"
						COMMIT WORK
						#@G00284
						EXIT WHILE
					END IF
					WHEN sql_action = 1
						# No		                                                                                                                 	#@G00288
						ERROR "Please INPUT ARRAY AGAIN"
					WHEN sql_action = 0
						# Cancel		                                                                                                             	#@G00291
						MESSAGE "Cancelled, EXIT INPUT ARRAY"
						EXIT WHILE
				END CASE
			ELSE
				# Nothing		                                                                                                             	#@G00296
				MESSAGE "Nothing has been changed"
				EXIT WHILE
			END IF
		END WHILE

END FUNCTION

####################################################################################################################		     	#@G00304
FUNCTION input_array_attributes_translation (pky_form_attributes)
	## this function operates INPUT ARRAY for the table attributes_translation		                                            	#@G00306
	# it handles 3 arrays:		                                                                                                   	#@G00307
	# 1) The STATUS array  (attributes_translation_status_array) contains the STATUS for each element: 		                   	#@G00308
	#    NULL=>no data, 0=>elements NOT touched, 1=>element TO INSERT, 2=>element TO UPDATE, -1=>element TO DELETE		           	#@G00309
	# 2) the Input Data Array (attributes_translation_sr_array) will contain the data input by the user		                   	#@G00310
	# 3) the primary key array (pky_form_attributes) contains the primary key VALUES of each element		                      	#@G00311
	###################################################################################################################		      	#@G00312
	DEFINE arrcnt INTEGER
	DEFINE srcline INTEGER
	DEFINE arrcurr INTEGER
	DEFINE last_element INTEGER
	DEFINE lookup_status INTEGER
	DEFINE sql_stmt_status INTEGER
	DEFINE nbr_edited_rows INTEGER
	DEFINE sql_action SMALLINT
	DEFINE ins_key SMALLINT 
	DEFINE nbr_translated INTEGER 
	DEFINE reply CHAR(3)
	DEFINE l_form_name LIKE form_attributes.form_name 
	DEFINE pky_form_attributes RECORD
		attribute_id LIKE form_attributes.attribute_id # CHAR(24)
	END RECORD
	DEFINE sav_attributes_translation_sr_array RECORD
		language CHAR(3),
		translation nvarchar(64),
		text_length SMALLINT 
	END RECORD
	DEFINE sql_ok SMALLINT
	DEFINE msg STRING 
	DEFINE upd_all_msg CHAR(15) 
	LET nbr_edited_rows = 0

	LET int_flag = false
	LET ins_key = false

	INPUT ARRAY attributes_translation_sr_array WITHOUT DEFAULTS
	FROM arr_translation.*
	attribute(normal)
		ON KEY (INTERRUPT)
			# Cancel FROM input		                                                                                                    	#@G00339
			LET int_flag=false
			LET arrcurr = arr_curr()
			LET srcline = scr_line ()
			LET attributes_translation_sr_array[arrcurr].* = sav_attributes_translation_sr_array.*
			DISPLAY attributes_translation_sr_array[arrcurr].* TO arr_translation[srcline].*
			MESSAGE "Quit with quit key Control-C"
			ROLLBACK WORK
			#@G00345
			EXIT INPUT
		BEFORE INPUT
			LET msg = "Do you want to translate all similar MESSAGEs? (Yes/No" 
			LET upd_all_msg = fgl_winbutton("",msg,"Yes","Yes|No|Cancel","question",0) 
			IF attributes_translation_sr_array[1].language = "ENU" THEN 
				CALL fgl_dialog_setcurrline(2,2)
			END IF 

		BEFORE ROW
			LET srcline = scr_line()
			LET arrcurr = arr_curr()
			LET sav_attributes_translation_sr_array.* = attributes_translation_sr_array[arrcurr].* 

		BEFORE INSERT
			# INSERT a row in pky_array		                                                                                            	#@G00349
			CALL attributes_translation_pky_array.insert(arrcurr)
			INITIALIZE attributes_translation_pky_array[arrcurr].* TO NULL
			# INSERT a row in status_array		                                                                                         	#@G00352
			CALL attributes_translation_status_array.insert(arrcurr)
			LET attributes_translation_status_array[arrcurr] = NULL

		AFTER FIELD translation 
			#
		AFTER ROW
			IF field_touched (arr_translation[srcline].*) THEN
				LET nbr_edited_rows = nbr_edited_rows + 1
				CASE
					WHEN attributes_translation_status_array[arrcurr] = 0 # existing
						LET attributes_translation_status_array[arrcurr] = 2 # TO be modified
						LET attributes_translation_pky_array[arrcurr].language = attributes_translation_sr_array[arrcurr].language
						LET attributes_translation_pky_array[arrcurr].attribute_id = pky_form_attributes.attribute_id
						#@G00380

					WHEN attributes_translation_status_array[arrcurr] IS NULL # new
						LET attributes_translation_status_array[arrcurr] = 1 # TO be inserted
						LET attributes_translation_pky_array[arrcurr].language = attributes_translation_sr_array[arrcurr].language
						LET attributes_translation_pky_array[arrcurr].attribute_id = pky_form_attributes.attribute_id
						#@G00384
				END CASE
				IF status_pk_attributes_translation(attributes_translation_pky_array[arrcurr].attribute_id,attributes_translation_pky_array[arrcurr].language) THEN
					ERROR "attributes_translation: already exists"
					NEXT FIELD translation
				END IF
				#@G00390
			END IF

		AFTER DELETE
			IF attributes_translation_status_array[arrcurr] IS NOT NULL THEN
				LET last_element = attributes_translation_status_array.getsize()
				# The deleted element becomes the last element of status_array AND flagged -1		                                         	#@G00359
				# The pky IS also copied TO the last element		                                                                          	#@G00360
				LET attributes_translation_status_array[last_element] = -1 # TO be deleted
				LET attributes_translation_pky_array[last_element].* = attributes_translation_pky_array[arrcurr].*
				LET nbr_edited_rows = nbr_edited_rows + 1
			END IF

		ON ACTION ("Show original Form") 
			SELECT form_name INTO l_form_name FROM form_attributes WHERE attribute_id = pky_form_attributes.attribute_id 
			IF l_form_name IS NOT NULL THEN 
				OPEN WINDOW show_form with FORM l_form_name attributes(border)
				CALL doneprompt(null,null,null) 
				CLOSE WINDOW show_form 
			END IF 

		ON ACTION ("Show translated Form") 
			SELECT form_name INTO l_form_name FROM form_attributes WHERE attribute_id = pky_form_attributes.attribute_id 
			IF l_form_name IS NOT NULL THEN 
				OPEN WINDOW show_form with FORM l_form_name attributes(border)
				CALL translate_form (attributes_translation_sr_array[arrcurr].language,l_form_name) 
				CALL doneprompt(null,null,null) 
				CLOSE WINDOW show_form 
			END IF 

			#@G00372
		AFTER INPUT
			IF int_flag THEN
				LET int_flag = false
				ERROR " Cancel attributes_translation"
				LET nbr_edited_rows = 0
				LET sql_action = 0
			ELSE
				LET sql_action = confirm_operation(5,10,"input_array_translation ")
				IF sql_action = 1 THEN
					CONTINUE INPUT
				END IF
			END IF
	END INPUT
	RETURN nbr_edited_rows,sql_action
END FUNCTION

######################################################################################################		                   	#@G00409
FUNCTION set_form_record_frm_obj_translate_arr_translation(tbl_contents)
	# This function assigns the VALUES FROM the table arr_translation TO the form record frm_contents		                                 	#@G00411
	######################################################################################################		                   	#@G00412
	DEFINE fgl_status SMALLINT
	DEFINE frm_contents RECORD
		language CHAR(3),
		translation nvarchar(64)
	END RECORD

	DEFINE tbl_contents RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3),
		translation nvarchar(64)
	END RECORD

	INITIALIZE frm_contents.* TO NULL
	LET frm_contents.language = tbl_attributes_translation.language
	LET frm_contents.translation = tbl_attributes_translation.translation
	#@G00428
	CASE
		WHEN status = 0
			LET fgl_status = 1
		WHEN status < 0
			LET fgl_status = status
		OTHERWISE
			LET fgl_status = status
	END CASE
	RETURN fgl_status,frm_contents.*
END FUNCTION

######################################################################################################		                   	#@G00440
FUNCTION set_table_record_frm_obj_translate_attributes_translation(p_fky,p_sql_stmt,p_pky,p_element_contents)
# This function assigns the VALUES FROM the array element(p_element_contents) TO the table record (tbl_contents)		           	#@G00442
# It distinguishes the primary key (p_pky) of the table attributes_translationand the foreign key (p_fky) point TO the parent table (form_attributes)			#@G00443
######################################################################################################		                   	#@G00444
	DEFINE p_fky RECORD
		attribute_id LIKE form_attributes.attribute_id #, CHAR(24) CHAR(24) # OR IS it the foreign KEY here?
	END RECORD
	DEFINE p_sql_stmt SMALLINT
	DEFINE p_pky RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3)
	END RECORD
	DEFINE p_element_contents RECORD
		language LIKE attributes_translation.language,
		original LIKE attributes_translation.translation, 
		translation LIKE attributes_translation.translation, 
		modif_timestamp LIKE attributes_translation.modif_timestamp , 
		text_length SMALLINT, 
		identical_count INTEGER
	END RECORD

	DEFINE tbl_contents RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3),
		translation nvarchar(64)
	END RECORD
	DEFINE fgl_status SMALLINT

	#WHENEVER ERROR CONTINUE		                                                                                                	#@G00464
	INITIALIZE tbl_contents.* TO NULL
	LET tbl_contents.attribute_id = p_pky.attribute_id
	IF p_sql_stmt = 1 THEN
		LET tbl_contents.language = p_element_contents.language
	END IF
	LET tbl_contents.translation = p_element_contents.translation
	#@G00471
	WHENEVER ERROR CALL error_mngmt
	CASE
		WHEN status = 0
			LET fgl_status = 1
		WHEN status < 0
			LET fgl_status = status
		OTHERWISE
			LET fgl_status = status
	END CASE
	RETURN fgl_status,tbl_contents.*
END FUNCTION

#############################################################################################################		            	#@G00484
FUNCTION array_bulk_update_attributes_translation (fky)
	## This functions browses the STATUS array attributes_translation_status_array,		                                       	#@G00486
	# copies the element VALUES TO table VALUES (attributes_translation)		                                                  	#@G00487
	# AND executes the request SQL operation requested for each element		                                                      	#@G00488
	#############################################################################################################		            	#@G00489
	DEFINE idx,arr_size INTEGER
	DEFINE updarr_status,fgl_status,global_status INTEGER
	DEFINE fky RECORD
		attribute_id LIKE form_attributes.attribute_id # CHAR(24)
	END RECORD

	DEFINE elements_contents RECORD
		language CHAR(3),
		translation nvarchar(64)
	END RECORD

	DEFINE l_attributes_translation RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language CHAR(3),
		translation LIKE attributes_translation.translation,
		modif_timestamp LIKE attributes_translation.modif_timestamp 
	END RECORD
	DEFINE upd_all_msg CHAR(15) 
	LET global_status = 0
	LET arr_size = attributes_translation_status_array.getsize()
	FOR idx = 1 TO arr_size
		CASE
			WHEN attributes_translation_status_array[idx] IS NULL OR attributes_translation_status_array[idx] = 0
				CONTINUE FOR
			WHEN attributes_translation_status_array[idx] > 0
				LET elements_contents.* = attributes_translation_sr_array[idx].*
				CALL set_table_record_frm_obj_translate_attributes_translation(fky.*,attributes_translation_status_array[idx],attributes_translation_pky_array[idx].*,attributes_translation_sr_array[idx].*)
				RETURNING fgl_status,l_attributes_translation.*
		END CASE
		LET updarr_status = update_one_element_attributes_translation(idx,l_attributes_translation.*)
		IF upd_all_msg = "Yes" THEN 
			LET updarr_status = translate_all_messages (attributes_translation_sr_array[1].translation, 
			attributes_translation_sr_array[idx].translation, 
			attributes_translation_sr_array[idx].language) 
		ELSE 

		END IF 
		IF updarr_status < 0 THEN
			ERROR "Error on element # ",idx
			LET global_status = global_status + 1
		END IF
	END FOR
	RETURN global_status
END FUNCTION

###############################################################################		                                          	#@G00525
# This function executes the SQL statement for each element		                                                              	#@G00526
# accord the TO STATUS array value of this element		                                                                       	#@G00527
###############################################################################		                                          	#@G00528
FUNCTION update_one_element_attributes_translation(idx,lr_attributes_translation)
	DEFINE st SMALLINT
	DEFINE arrcnt SMALLINT
	DEFINE idx SMALLINT
	DEFINE statut SMALLINT
	DEFINE lr_attributes_translation RECORD
		attribute_id LIKE form_attributes.attribute_id, # CHAR(24),
		language LIKE attributes_translation.language,
		translation LIKE attributes_translation.translation,
		modif_timestamp LIKE attributes_translation.modif_timestamp 
	END RECORD
	LET st = 0
	CASE attributes_translation_status_array[idx]
		WHEN 2 # must be updated
			LET statut = sql_update_attributes_translation(attributes_translation_pky_array[idx].*,lr_attributes_translation.*)
		WHEN 1
			LET statut = sql_insert_attributes_translation(lr_attributes_translation.*)
		WHEN -1
			LET statut = sql_delete_attributes_translation(attributes_translation_pky_array[idx].*)
	END CASE
	RETURN statut
END FUNCTION

FUNCTION translate_all_messages (l_enu_message,l_translation,l_language) 
	DEFINE l_enu_message,l_translation LIKE attributes_translation.translation 
	DEFINE l_language LIKE attributes_translation.language 
	LET l_translation = l_translation clipped 
	UPDATE attributes_translation 
	SET (translation,modif_timestamp) = (l_translation,current) 
	WHERE translation = l_enu_message 
	AND language = l_language 

	IF sqlca.sqlcode = 0 THEN 
		RETURN sqlca.sqlerrd[3] 
	ELSE 
		RETURN -1 
	END IF 
END FUNCTION 

FUNCTION generate_new_language_set() 
	DEFINE l_language_code LIKE language.language_code 
	DEFINE l_language_text LIKE language.language_text 
	DEFINE l_national_text LIKE language.national_text 
	DEFINE attr_count INTEGER 
	DEFINE query_string,msg_string STRING 

	INITIALIZE l_language_code TO NULL 
	WHILE l_language_code IS NULL 
		LET l_language_code = fgl_winprompt(5,5, "Which language SET do you want TO generated, type language code (Max 3 Chars)", "", 3, 0) 
		IF l_language_code IS NULL THEN 
			EXIT WHILE 
		END IF 
		SELECT count(*) INTO attr_count 
		FROM language 
		WHERE language_code = l_language_code 
		IF attr_count = 0 THEN 
			LET l_language_code = NULL 
			ERROR "This language is not in the languages list" 
			CONTINUE WHILE 
		ELSE 
			SELECT language_text,national_text 
			INTO l_language_text,l_national_text 
			FROM language 
			WHERE language_code = l_language_code 
			LET msg_string = l_language_code," ",l_language_text," ",l_national_text 
			ERROR msg_string 

			SELECT count(*) 
			INTO attr_count 
			FROM attributes_translation 
			WHERE language = l_language_code 

			IF attr_count > 0 THEN 
				LET l_language_code = NULL 
				LET msg_string = "This language has already been generated, please check:",l_language_code 
				ERROR msg_string 
				EXIT WHILE 
			ELSE 
				LET query_string = 
				"INSERT INTO attributes_translation (attribute_id,language,translation) SELECT attribute_id,\"",l_language_code,"\",translation FROM attributes_translation WHERE language = \"ENU\"" 
				EXECUTE immediate query_string 


				IF status <> 0 THEN 
					ERROR "merde alors!" 
				ELSE 
					LET msg_string = "Language SET generated successfully ",l_language_text,": ",sqlca.sqlerrd[3]," MESSAGEs" 
					ERROR msg_string 
					# validate blank  MESSAGEs
					LET query_string = 
					"UPDATE attributes_translation SET modif_timestamp = current WHERE language = \"",l_language_code, "\" AND (trim(translation) = \"\" OR translation IS NULL)" 
					EXECUTE immediate query_string 
				END IF 
			END IF 
		END IF 
	END WHILE
END FUNCTION 

FUNCTION manage_translations(translate_mode) 
	DEFINE where_clause,query_stmt,notrnsltd_clause,take_null_clause STRING 
	DEFINE translate_mode STRING 
	DEFINE reply CHAR(3) 
	DEFINE enu_msg_length,length_difference SMALLINT 
	DEFINE elem_num,trsltd_messages,tobe_trsltd_messages,xnumber,arrcurr,scrline,updarr_status,array_max_size INTEGER 
	DEFINE enu_msg,former_msg LIKE attributes_translation.translation 
	DEFINE upd_all_msg CHAR(15), msg STRING 
	DEFINE null_contents,notrnsltd_contents,full_form_name STRING 
	#DEFINE l_form_name LIKE form_attributes.form_name

	DEFINE svg_attribute_translation RECORD
		language LIKE attributes_translation.language,
		eng_message LIKE attributes_translation.translation,
		translation LIKE attributes_translation.translation ,
		modif_timestamp LIKE attributes_translation.modif_timestamp , 
		text_length SMALLINT, 
		identical_count INTEGER
	END RECORD

	DEFINE frm_obj_translate RECORD 
		attribute_id LIKE form_attributes.attribute_id,
		form_name LIKE form_attributes.form_name,
		table_name LIKE form_attributes.table_name,
		widget_id LIKE form_attributes.widget_id,
		widget_type LIKE form_attributes.widget_type,
		attribute_type LIKE form_attributes.attribute_type
	END RECORD 
	CLEAR FORM 
	CALL attributes_translation_pky_array.clear() 
	CALL attributes_translation_sr_array.clear() 
	CALL attributes_translation_status_array.clear() 
	CASE translate_mode 
		WHEN "bulk" 
			LET null_contents = "NNullOnly" 
			LET notrnsltd_contents = "NTO" 
		WHEN "one_by_one" 
			LET null_contents = "Null+NNull" 
			LET notrnsltd_contents = "NTO" 
	END CASE 

	LET array_max_size = 1000 
	INPUT BY NAME null_contents,notrnsltd_contents,array_max_size 
	WITHOUT DEFAULTS 
	CONSTRUCT BY NAME where_clause ON 
	form_attributes.attribute_id,form_attributes.form_name,form_attributes.table_name,form_attributes.widget_id,form_attributes.widget_type,form_attributes.attribute_type, 
	attributes_translation.language, attributes_translation.translation 
	## Check whether criteria have been entered		                                                                             	#@G00262
		AFTER CONSTRUCT
			CASE null_contents 
				WHEN "NullOnly" 
					LET take_null_clause = "AND attributes_translation.translation IS NULL " 
				WHEN "NNullOnly" 
					LET take_null_clause = "AND attributes_translation.translation IS NOT NULL " 
				OTHERWISE 
					LET take_null_clause = "" 
			END CASE

			CASE notrnsltd_contents 
			# a translated MESSAGE
				WHEN "NTO" 
					LET notrnsltd_clause = "AND attributes_translation.modif_timestamp IS NULL " 
				WHEN "TO" 
					LET notrnsltd_clause = "AND attributes_translation.modif_timestamp IS NOT NULL " 
				OTHERWISE 
					LET notrnsltd_clause = "" 
			END CASE

			IF NOT field_touched(attributes_translation.language, attributes_translation.translation) AND NOT int_flag THEN
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0)
				CASE
					WHEN reply matches "Yes"
						EXIT CONSTRUCT
					OTHERWISE # saisie d'un critere de selection
						ERROR "Please input a least one criteria"
						CONTINUE CONSTRUCT
				END CASE
			END IF
	END CONSTRUCT

	CASE translate_mode 
		WHEN "bulk" 
			LET query_stmt = "select first ", array_max_size," language,translation,\"\",modif_timestamp,length(translation),count(*),min( attributes_translation.attribute_id) ", 
			" from attributes_translation,form_attributes where (", 
			" form_attributes.attribute_id = attributes_translation.attribute_id AND ", 
			where_clause," ", 
			notrnsltd_clause," ", 
			" ) group by 2,1,3,4 order by 6 desc,1" 

		WHEN "one_by_one" 
			LET query_stmt = "select first ", array_max_size," language,translation,\"\",modif_timestamp,length(translation),1,form_attributes.attribute_id,language ", 
			" from attributes_translation,form_attributes where (", 
			" form_attributes.attribute_id = attributes_translation.attribute_id AND ", 
			where_clause," ", 
			take_null_clause," ", 
			notrnsltd_clause," ", 
			" ) ", 
			" order by 5,1,2" 
	END CASE 
	LET elem_num = 1 

	# Count total MESSAGEs, translated and not translated MESSAGEs
	LET xnumber = get_qbe_count_form_attributes(where_clause,take_null_clause,notrnsltd_clause ) 
	LET trsltd_messages = get_qbe_count_form_attributes(where_clause,""," AND attributes_translation.modif_timestamp IS NOT NULL " ) 
	LET tobe_trsltd_messages = get_qbe_count_form_attributes(where_clause,""," AND attributes_translation.modif_timestamp IS NULL " ) 
	DISPLAY BY NAME xnumber,trsltd_messages,tobe_trsltd_messages 
	CALL initialize_array_attributes_translation() 
	PREPARE p_bulk FROM query_stmt 
	DECLARE crs_bulk CURSOR FOR p_bulk 

	FOREACH crs_bulk INTO attributes_translation_sr_array[elem_num].*,attributes_translation_pky_array[elem_num].* 
		LET attributes_translation_status_array[elem_num] = 0 # elements exists
		IF attributes_translation_sr_array[elem_num].language NOT matches "ENG|ENU" THEN 
			IF attributes_translation_sr_array[elem_num].modif_timestamp IS NOT NULL THEN 
				LET attributes_translation_sr_array[elem_num].translation = attributes_translation_sr_array[elem_num].eng_message 
				SELECT translation INTO attributes_translation_sr_array[elem_num].eng_message 
				FROM attributes_translation 
				WHERE language = "ENU" AND attribute_id = attributes_translation_pky_array[elem_num].attribute_id 
				LET trsltd_messages = trsltd_messages + 1 
			END IF
		END IF
		LET elem_num = elem_num + 1 
	END FOREACH

	INPUT ARRAY attributes_translation_sr_array WITHOUT DEFAULTS
	FROM arr_translation.*

		ON ACTION ("Show original Form") 
			IF frm_obj_translate.form_name IS NOT NULL THEN 
				LET full_form_name = frm_obj_translate.form_name CLIPPED,".fm2" 
				OPEN WINDOW show_form with FORM frm_obj_translate.form_name attributes(border)
				CALL doneprompt(null,null,null) 
				CLOSE WINDOW show_form 
			END IF 
		ON ACTION ("Show translated Form") 
			IF frm_obj_translate.form_name IS NOT NULL THEN 
				OPEN WINDOW show_form with FORM frm_obj_translate.form_name attributes(border)
				CALL translate_form (attributes_translation_sr_array[arrcurr].language,frm_obj_translate.form_name) 
				CALL doneprompt(null,null,null) 
				CLOSE WINDOW show_form 
			END IF 

		BEFORE ROW 
			LET arrcurr = arr_curr() 
			LET scrline = scr_line() 
			LET svg_attribute_translation.* = attributes_translation_sr_array[arrcurr].* 
			LET enu_msg_length = length(attributes_translation_sr_array[arrcurr].eng_message) 

			IF attributes_translation_pky_array[arrcurr].attribute_id IS NOT NULL THEN 
				SELECT attribute_id,form_name,table_name,widget_id,widget_type,attribute_type 
				INTO frm_obj_translate.* 
				FROM form_attributes 
				WHERE attribute_id = attributes_translation_pky_array[arrcurr].attribute_id 
				IF sqlca.sqlcode = 0 THEN 
					DISPLAY BY NAME frm_obj_translate.* 
				ELSE 
					ERROR "Widget not found:",attributes_translation_pky_array[arrcurr].attribute_id 
				END IF 
			END IF 

		BEFORE FIELD eng_message 
			IF attributes_translation_sr_array[arrcurr].language = "ENU" THEN 
				LET enu_msg = attributes_translation_sr_array[arrcurr].translation 
				LET arrcurr = arrcurr + 1 
				LET scrline = scrline + 1 
				CALL fgl_dialog_setcurrline(arrcurr,scrline)
			ELSE 
				LET former_msg = attributes_translation_sr_array[arrcurr].translation 
			END IF 
		AFTER FIELD eng_message 
			IF field_touched(arr_translation[scrline].eng_message) THEN 
				LET attributes_translation_sr_array[arrcurr].eng_message = svg_attribute_translation.eng_message 
				DISPLAY attributes_translation_sr_array[arrcurr].eng_message TO arr_translation[scrline].eng_message 
			END IF 
		AFTER FIELD translation 
			IF field_touched(arr_translation[scrline].translation) THEN 
				LET length_difference = length(attributes_translation_sr_array[arrcurr].translation) - length(attributes_translation_sr_array[arrcurr].eng_message) 
				CASE 
					WHEN length_difference > 0 
						ERROR "Warning: translated string longer than ENU string: +",length_difference," characters" 
						DISPLAY length_difference TO arr_translation[scrline].text_length 
					OTHERWISE 
						DISPLAY length_difference TO arr_translation[scrline].text_length 
				END CASE 
			END IF 

		BEFORE FIELD modif_timestamp 
			#NEXT FIELD translation

		AFTER ROW 
			IF field_touched(arr_translation[scrline].translation) THEN 
				LET msg = "Translate which MESSAGEs? " 
				LET upd_all_msg = fgl_winbutton("What Next?",msg,"SimilarMessages","SimilarMessages|ThisMessage|FixMessage|Cancel|Ignore","question",0) 
				CASE upd_all_msg 

					WHEN "SimilarMessages" 
						LET updarr_status = translate_all_messages (attributes_translation_sr_array[arrcurr].eng_message, 
						attributes_translation_sr_array[arrcurr].translation, 
						attributes_translation_sr_array[arrcurr].language) 
						ERROR "Messages translated: ",updarr_status 
					WHEN "FixMessage" 
						#CALL fgl_dialog_setcurrline(arrcurr,scrline)                                                                                                              	#@G00371
						NEXT FIELD translation 
					WHEN "Cancel" 
						# Restore previous image and redo from scratch
						LET attributes_translation_sr_array[arrcurr].* = svg_attribute_translation.* 
						DISPLAY attributes_translation_sr_array[arrcurr].translation 
						TO arr_translation[scrline].translation 
						NEXT FIELD translation 
					WHEN "Ignore" 
						LET attributes_translation_sr_array[arrcurr].translation = svg_attribute_translation.translation 
						DISPLAY attributes_translation_sr_array[arrcurr].translation 
						TO arr_translation[scrline].translation 
				END CASE 
			END IF 

	END INPUT 
	IF fgl_find_table("tmp_translation") THEN
		DROP TABLE tmp_translation 
	END IF		

END FUNCTION 
