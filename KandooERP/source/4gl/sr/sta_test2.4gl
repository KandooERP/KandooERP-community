# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-09-24 09:50:10		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\Ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE tbl_test2 RECORD #@g00008 
	contact_id LIKE contact.contact_id, # INTEGER #@g00008 
	valid_from LIKE contact.valid_from, # DATE #@g00008 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00008 
	valid_to LIKE contact.valid_to, # DATE #@g00008 
	contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00008 
	org_ind LIKE contact.org_ind, # CHAR(1) #@g00008 
	first_name LIKE contact.first_name, # CHAR(30) #@g00008 
	first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00008 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00008 
	mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00008 
	cust_code LIKE contact.cust_code, # CHAR(8) #@g00008 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00008 
	last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00008 
	mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00008 
	salutation LIKE contact.salutation, # CHAR(20) #@g00008 
	initials LIKE contact.initials, # CHAR(12) #@g00008 
	user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00008 
	user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00008 
	title LIKE contact.title, # CHAR(20) #@g00008 
	age_role_code LIKE contact.age_role_code, # INTEGER #@g00008 
	sex_ind LIKE contact.sex_ind # CHAR(1) #@g00009 
END RECORD #@g00010 

DEFINE frm_test2 RECORD #@g00012 
	valid_to LIKE contact.valid_to, # DATE #@g00012 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00012 
	salutation LIKE contact.salutation, # CHAR(20) #@g00012 
	cc_id LIKE contact_channel.cc_id, # VARCHAR(64) #@g00012 
	title LIKE contact.title, # CHAR(20) #@g00012 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00012 
	valid_from LIKE contact.valid_from, # DATE #@g00012 
	first_name LIKE contact.first_name, # CHAR(30) #@g00012 
	initials LIKE contact.initials, # CHAR(12) #@g00012 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00012 
	contact_id LIKE contact.contact_id, # INTEGER #@g00012 
	cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00013 
END RECORD #@g00014 

DEFINE sav_test2 RECORD #@g00016 
	valid_to LIKE contact.valid_to, # DATE #@g00016 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00016 
	salutation LIKE contact.salutation, # CHAR(20) #@g00016 
	cc_id LIKE contact_channel.cc_id, # VARCHAR(64) #@g00016 
	title LIKE contact.title, # CHAR(20) #@g00016 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00016 
	valid_from LIKE contact.valid_from, # DATE #@g00016 
	first_name LIKE contact.first_name, # CHAR(30) #@g00016 
	initials LIKE contact.initials, # CHAR(12) #@g00016 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00016 
	contact_id LIKE contact.contact_id, # INTEGER #@g00016 
	cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00017 
END RECORD #@g00018 

#@G00020

MAIN #@g00022 
	DEFER interrupt #@g00023 
	OPTIONS #@g00024 
	help file "test2.iem", #@g00025 
	help KEY f1 #@g00026 

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00028
	# CALL ui_init(0) 		                                                                                                      	#@G00029
	LET m_program="p_test2_contact" #@g00030 

	CALL main_test2_contact() #@g00032 

END MAIN #@g00034 

#######################################################		                                                                  	#@G00036
# definition variable sccs		                                                                                               	#@G00037
FUNCTION mc_test2_sccs() #@g00038 
	DEFINE sccs_var CHAR(70) #@g00039 
	LET sccs_var="%W% %D%" #@g00040 
END FUNCTION #@g00041 

FUNCTION main_test2_contact () #@g00043 

	CALL init_program("kandoodb",m_program) #@g00045 

	OPEN WINDOW f_contact with FORM "f_contact" attributes(border) #@g00047 

	CALL init_cursor_test2_contact () # INITIALIZE all cursors ON master TABLE #@g00049 
	#@G00049

	CALL menu_test2_contact() #@g00051 

	CLOSE WINDOW f_contact #@g00053 

END FUNCTION #@g00055 

######################################################################		                                                   	#@G00057
# menu_test2_contact		                                                                                                     	#@G00058
# the top level menu 		                                                                                                    	#@G00059
# input arguments: none		                                                                                                  	#@G00060
# output arguments: none		                                                                                                 	#@G00061
FUNCTION menu_test2_contact () #@g00062 
	DEFINE nbsel_contact INTEGER #@g00063 
	DEFINE sql_stmt_status INTEGER #@g00064 
	DEFINE record_num INTEGER #@g00065 
	DEFINE ACTION SMALLINT #@g00066 
	DEFINE xnumber SMALLINT #@g00067 
	DEFINE arr_elem_num SMALLINT #@g00068 
	DEFINE pky_contact RECORD #@g00069 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00070 
	END RECORD #@g00071 

	LET nbsel_contact = 0 #@g00073 
	MENU "contact" #@g00074 
		BEFORE MENU #@g00075 
			HIDE option "Next","Previous" #@g00076 
		COMMAND "Query" "Query data with multiple criteria contact" #@g00077 
			help 1000 #@g00078 
			MESSAGE "" #@g00079 
			INITIALIZE frm_test2.* TO NULL #@g00080 
			DISPLAY BY NAME frm_test2.* #@g00081 
			HIDE option "Next","Previous" #@g00082 

			#@G00083

			CALL query_contact() RETURNING nbsel_contact #@g00085 
			IF nbsel_contact <>0 THEN #@g00086 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00087 
				LET record_num = 1 #@g00088 
				DISPLAY BY NAME frm_test2.* #@g00089 
				IF nbsel_contact > 1 THEN #@g00090 
					SHOW option "Next" #@g00091 
					NEXT option "Next" #@g00092 
				END IF #@g00093 
				#@G00093
				#@G00093
			ELSE #@g00094 
				ERROR "No row matches the criteria" #@g00095 
				NEXT option "Query" #@g00096 
			END IF #@g00097 

		COMMAND "Next" "Display Next record contact" #@g00099 
			help 2000 #@g00100 
			MESSAGE "" #@g00101 
			INITIALIZE frm_test2.* TO NULL #@g00102 
			DISPLAY BY NAME frm_test2.* #@g00103 
			#@G00103

			IF record_num < nbsel_contact THEN #@g00105 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00106 
				CASE #@g00107 
					WHEN sql_stmt_status = 0 #@g00108 
						ERROR "FETCH Last record of this selection contact" #@g00109 
					WHEN sql_stmt_status = -1 #@g00110 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00111 
					WHEN sql_stmt_status = 1 #@g00112 
						LET record_num = record_num + 1 #@g00113 
						DISPLAY BY NAME frm_test2.* #@g00114 
						IF record_num >= nbsel_contact THEN #@g00115 
							HIDE option "Next" #@g00116 
						END IF #@g00117 
						IF record_num > 1 THEN #@g00118 
							SHOW option "Previous" #@g00119 
						ELSE #@g00120 
							HIDE option "Previous" #@g00121 
						END IF #@g00122 
						#@G00122
						#@G00122
				END CASE #@g00123 
			ELSE #@g00124 
				ERROR " Please SET query criteria previously contact " #@g00125 
				NEXT option "Query" #@g00126 
			END IF #@g00127 

		COMMAND "Previous" "Display Previous Record contact" #@g00129 
			help 3000 #@g00130 
			MESSAGE "" #@g00131 
			INITIALIZE frm_test2.* TO NULL #@g00132 
			DISPLAY BY NAME frm_test2.* #@g00133 
			#@G00133

			IF record_num > 1 THEN #@g00135 
				CALL sql_nxtprev_contact(-1) RETURNING sql_stmt_status,pky_contact.* #@g00136 
				CASE #@g00137 
					WHEN sql_stmt_status = 0 #@g00138 
						ERROR "FETCH First record of this selection contact" #@g00139 
					WHEN sql_stmt_status < -1 #@g00140 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00141 
					WHEN sql_stmt_status = 1 #@g00142 
						LET record_num = record_num - 1 #@g00143 
						CALL set_form_record_test2_f_contact(tbl_test2.*) #@g00144 
						RETURNING frm_test2.* #@g00145 
						DISPLAY BY NAME frm_test2.* #@g00146 
						IF record_num = 1 THEN #@g00147 
							HIDE option "Previous" #@g00148 
						END IF #@g00149 
						IF record_num < nbsel_contact THEN #@g00150 
							SHOW option "Next" #@g00151 
						ELSE #@g00152 
							HIDE option "Next" #@g00153 
						END IF #@g00154 
						#@G00154
						#@G00154
				END CASE #@g00155 
			ELSE #@g00156 
				ERROR " Please SET query criteria previously contact " #@g00157 
				NEXT option "Query" #@g00158 
			END IF #@g00159 

			#@G00160

		COMMAND "Add" "Add a new record contact" #@g00162 
			help 3000 #@g00163 
			MESSAGE "" #@g00164 
			CALL add_contact() #@g00165 
			MESSAGE "" #@g00166 

		COMMAND "Modify" "Modify current record contact" #@g00168 
			help 4000 #@g00169 
			MESSAGE "" #@g00170 
			IF nbsel_contact THEN #@g00171 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00172 
					ERROR "IS locked " #@g00173 
					NEXT option "Next" #@g00174 
				ELSE #@g00175 
					LET sql_stmt_status = modify_contact(pky_contact.*) #@g00176 
				END IF #@g00177 
			ELSE #@g00178 
				ERROR " Please SET query criteria previously contact " #@g00179 
				NEXT option "Query" #@g00180 
			END IF #@g00181 

		COMMAND "Suppress" "Suppress current record contact" #@g00183 
			help 5000 #@g00184 
			MESSAGE "" #@g00185 
			IF nbsel_contact THEN #@g00186 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00187 
					ERROR "IS locked " #@g00188 
					NEXT option "Next" #@g00189 
				END IF #@g00190 
				WHILE true #@g00191 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00192 
					CASE #@g00193 
						WHEN ACTION = 0 OR ACTION = 1 #@g00194 
							EXIT WHILE # degage abandon #@g00195 
						WHEN ACTION = 2 #@g00196 
							CALL suppress_contact(pky_contact.*) #@g00197 
							RETURNING sql_stmt_status #@g00198 
							EXIT WHILE #@g00199 
					END CASE #@g00200 
				END WHILE #@g00201 
			ELSE #@g00202 
				ERROR "Please SET query criteria previously contact " #@g00203 
				NEXT option "Query" #@g00204 
			END IF #@g00205 

		COMMAND "Exit" "EXIT PROGRAM" #@g00207 
			help 9000 #@g00208 
			MESSAGE "" #@g00209 
			EXIT MENU #@g00210 
	END MENU #@g00211 
END FUNCTION #@g00212 

#######################################################################		                                                  	#@G00214
#    Query_contact : Query By Example on table contact		                                                                   	#@G00215
# Input selection criteria,		                                                                                              	#@G00216
# PREPARE the query,		                                                                                                     	#@G00217
# OPEN the data SET		                                                                                                      	#@G00218
#######################################################################		                                                  	#@G00219
FUNCTION query_contact() #@g00220 
	DEFINE rec_contact,where_clause STRING #@g00221 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00222 
	DEFINE l_pky RECORD #@g00223 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00224 
	END RECORD #@g00225 
	DEFINE reply CHAR(5) #@g00226 
	LET xnumber = 0 #@g00227 
	MESSAGE "Please input query criteria" #@g00228 
	# INITIALIZE record AND display blank		                                                                                   	#@G00229
	INITIALIZE frm_test2.* TO NULL #@g00230 
	DISPLAY BY NAME frm_test2.* #@g00231 
	#@G00231

	CONSTRUCT BY NAME where_clause ON contact.cmpy_code, #@g00233 
	contact.contact_id, #@g00234 
	contact.first_name, #@g00235 
	contact.mid_name, #@g00236 
	contact.last_org_name, #@g00237 
	contact.salutation, #@g00238 
	contact.initials, #@g00239 
	contact.title, #@g00240 
	contact.valid_from, #@g00241 
	contact.valid_to #@g00242 

	#@G00243

	## Check whether criteria have been entered		                                                                             	#@G00245
		AFTER CONSTRUCT #@g00246 
			IF NOT field_touched(contact.*) AND NOT int_flag THEN #@g00247 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00248 
				CASE #@g00249 
					WHEN reply matches "Yes" #@g00250 
						EXIT CONSTRUCT #@g00251 
					OTHERWISE # saisie d'un critere de selection #@g00252 
						ERROR "Please input a least one criteria" #@g00253 
						CONTINUE CONSTRUCT #@g00254 
				END CASE #@g00255 
			END IF #@g00256 
	END CONSTRUCT #@g00257 

	IF int_flag = true THEN #@g00259 
		MESSAGE "Quit with quit key" #@g00260 
		LET int_flag=0 #@g00261 
	ELSE #@g00262 
		LET xnumber = build_qbe_count_contact(where_clause) #@g00263 
		IF xnumber > 0 THEN #@g00264 
			LET sql_stmt_status = build_qbe_row_contents_contact(where_clause) #@g00265 
		ELSE #@g00266 
			RETURN -1 #@g00267 
		END IF #@g00268 

	END IF #@g00270 
	RETURN xnumber #@g00271 
END FUNCTION ## query_contact #@g00272 

####################################################################		                                                     	#@G00274
## Add_contact: add a new contact row		                                                                                    	#@G00275
FUNCTION add_contact() #@g00276 
	DEFINE sql_stmt_status SMALLINT #@g00277 
	DEFINE row_count SMALLINT #@g00278 
	DEFINE nbre_contact ,action SMALLINT #@g00279 
	#@G00279
	#INITIALIZE pky_contact.* TO NULL		                                                                                       	#@G00280
	INITIALIZE tbl_test2.* TO NULL #@g00281 
	INITIALIZE frm_test2.* TO NULL #@g00282 
	INITIALIZE sav_test2.* TO NULL #@g00283 
	#@G00283
	WHILE true #@g00284 
		LET int_flag = false #@g00285 
		INPUT BY NAME frm_test2.cmpy_code, #@g00286 
		frm_test2.contact_id, #@g00287 
		frm_test2.first_name, #@g00288 
		frm_test2.mid_name, #@g00289 
		frm_test2.last_org_name, #@g00290 
		frm_test2.salutation, #@g00291 
		frm_test2.initials, #@g00292 
		frm_test2.title, #@g00293 
		frm_test2.valid_from, #@g00294 
		frm_test2.valid_to #@g00295 
		WITHOUT DEFAULTS #@g00296 
		#@G00297
		#@G00297

		#@G00298
		#@G00298
		END INPUT #@g00299 
		IF int_flag = true THEN #@g00300 
			# Resign FROM input		                                                                                                   	#@G00301
			LET int_flag=false #@g00302 
			LET frm_test2.* = sav_test2.* #@g00303 
			DISPLAY BY NAME frm_test2.* #@g00304 
			MESSAGE "Quit with quit key Control-C" #@g00305 
			EXIT WHILE #@g00306 
		END IF #@g00307 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00309 
		CASE ACTION #@g00310 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00311 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00312 

			WHEN 2 # ON valide la transaction #@g00314 
				BEGIN WORK #@g00315 
					#@G00315
					CALL set_table_record_test2_contact("I",frm_test2.*) #@g00316 
					RETURNING tbl_test2.* #@g00317 
					CALL sql_add_contact() RETURNING sql_stmt_status #@g00318 

					CASE #@g00320 
						WHEN sql_stmt_status = 0 #@g00321 
							MESSAGE "Add Successful operation" #@g00322 
						COMMIT WORK #@g00323 
						#@G00323
						WHEN sql_stmt_status < 0 #@g00324 
							CALL display_eric_error("Add contact:failed ") #@g00325 
							ROLLBACK WORK #@g00326 
							#@G00326
					END CASE #@g00327 
					EXIT WHILE #@g00328 

			WHEN 0 #@g00330 
				EXIT WHILE #@g00331 
		END CASE #@g00332 
	END WHILE #@g00333 
	RETURN sql_stmt_status #@g00334 
END FUNCTION ## add_contact #@g00335 


#######################################################################		                                                  	#@G00338
# Modify_contact : Edit a contact RECORD		                                                                                 	#@G00339
# inbound: table primary key		                                                                                             	#@G00340
FUNCTION modify_contact(pky) #@g00341 
	DEFINE ACTION SMALLINT #@g00342 
	DEFINE sql_stmt_status SMALLINT #@g00343 
	#@G00343
	DEFINE row_count SMALLINT #@g00344 
	DEFINE pky RECORD #@g00345 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00346 
	END RECORD #@g00347 

	## check if record can be accessed		                                                                                      	#@G00349
	WHILE true #@g00350 
		LET int_flag = false #@g00351 
		# Save Screen Record VALUES before altering		                                                                            	#@G00352
		LET sav_test2.* = frm_test2.* #@g00353 
		BEGIN WORK #@g00354 
			#@G00354

			INPUT BY NAME frm_test2.cmpy_code, #@g00356 
			frm_test2.contact_id, #@g00357 
			frm_test2.first_name, #@g00358 
			frm_test2.mid_name, #@g00359 
			frm_test2.last_org_name, #@g00360 
			frm_test2.salutation, #@g00361 
			frm_test2.initials, #@g00362 
			frm_test2.title, #@g00363 
			frm_test2.valid_from, #@g00364 
			frm_test2.valid_to #@g00365 
			WITHOUT DEFAULTS #@g00366 
			#@G00366

			#@G00367

			#@G00368
			END INPUT #@g00369 
			IF int_flag = true THEN #@g00370 
				LET int_flag=false #@g00371 
				# Restore previous value		                                                                                              	#@G00372
				LET frm_test2.* = sav_test2.* #@g00373 
				DISPLAY BY NAME frm_test2.* #@g00374 
				MESSAGE "$CancelCom Control-C" #@g00375 
				EXIT WHILE #@g00376 
			END IF #@g00377 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00379 

			CASE #@g00381 
				WHEN ACTION = 0 #@g00382 
					# Resign, restore previous VALUES		                                                                                     	#@G00383
					LET frm_test2.* = sav_test2.* #@g00384 
					DISPLAY BY NAME frm_test2.* #@g00385 
					EXIT WHILE # CANCEL operation #@g00386 

				WHEN ACTION = 1 #@g00388 
					# Redo		                                                                                                                	#@G00389
					CONTINUE WHILE #@g00390 

				WHEN ACTION = 2 #@g00392 
					# confirm UPDATE		                                                                                                      	#@G00393
					CALL set_table_record_test2_contact("U",frm_test2.*) #@g00394 
					RETURNING tbl_test2.* #@g00395 
					LET sql_stmt_status = sql_modify_contact(pky.*) #@g00396 
					CASE #@g00397 
						WHEN sql_stmt_status = 0 #@g00398 
							MESSAGE "Modify Successful operation" #@g00399 
						COMMIT WORK #@g00400 
						#@G00400
						WHEN sql_stmt_status < 0 #@g00401 
							CALL display_eric_error("Modify contact:failed ") #@g00402 
							ROLLBACK WORK #@g00403 
							#@G00403
					END CASE #@g00404 
					EXIT WHILE #@g00405 
			END CASE #@g00406 
		END WHILE #@g00407 
		RETURN sql_stmt_status #@g00408 
END FUNCTION ## modify_contact(pky) #@g00409 


#######################################################################		                                                  	#@G00412
# DELETE A contact row		                                                                                                   	#@G00413
# inbound: table primary key		                                                                                             	#@G00414
FUNCTION suppress_contact(pky) #@g00415 
	DEFINE ACTION SMALLINT #@g00416 
	DEFINE sql_stmt_status SMALLINT #@g00417 
	DEFINE pky RECORD #@g00418 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00419 
	END RECORD #@g00420 

	WHILE true #@g00422 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00423 
		BEGIN WORK #@g00424 
			#@G00424
			CASE #@g00425 
				WHEN ACTION = 0 OR ACTION = 1 #@g00426 
					EXIT WHILE # degage abandon #@g00427 
				WHEN ACTION = 2 #@g00428 
					CALL sql_suppress_contact(pky.*) RETURNING sql_stmt_status #@g00429 
					CASE #@g00430 
						WHEN sql_stmt_status = 0 #@g00431 
							MESSAGE "Suppress Successful operation" #@g00432 
						COMMIT WORK #@g00433 
						#@G00433
						INITIALIZE frm_test2.* TO NULL #@g00434 
						DISPLAY BY NAME frm_test2.* #@g00435 
						#@G00435
						WHEN sql_stmt_status < 0 #@g00436 
							CALL display_eric_error("Suppress contact:failed ") #@g00437 
							ROLLBACK WORK #@g00438 
							#@G00438
					END CASE #@g00439 
					EXIT WHILE #@g00440 
			END CASE #@g00441 
		END WHILE #@g00442 
		RETURN sql_stmt_status #@g00443 
END FUNCTION ## suppress_contact(pky) #@g00444 

#########################################################################		                                                	#@G00446
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00447
FUNCTION init_cursor_test2_contact () #@g00448 
	DEFINE query_text STRING #@g00449 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00451
	LET query_text= #@g00452 
	"SELECT contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind ", #@g00453 
	" FROM contact ", #@g00454 
	"WHERE contact_seed = ? " #@g00455 

	PREPARE sel_mrw_crs_contact FROM query_text #@g00457 
	DECLARE crs_row_crs_contact CURSOR FOR sel_mrw_crs_contact #@g00458 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00460
	LET query_text= "SELECT contact_seed ", #@g00461 
	" FROM contact ", #@g00462 
	" WHERE contact_seed = ? " #@g00463 

	PREPARE sel_pky_crs_contact FROM query_text #@g00465 
	DECLARE crs_pky_crs_contact CURSOR FOR sel_pky_crs_contact #@g00466 

	# PREPARE INSERT statement		                                                                                              	#@G00468
	LET query_text = #@g00469 
	"INSERT INTO contact ( contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined2,title,age_role_code,sex_ind )", #@g00470 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00471 
	PREPARE pr_ins_crs_contact FROM query_text #@g00472 

	# PREPARE UPDATE statement		                                                                                              	#@G00474
	LET query_text= #@g00475 
	"UPDATE contact ", #@g00476 
	"SET ( contact_id,valid_from,cmpy_code,valid_to,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind )", #@g00477 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )", #@g00478 
	" WHERE contact_seed = ? " #@g00479 
	PREPARE pr_upd_crs_contact FROM query_text #@g00480 

	# PREPARE DELETE statement		                                                                                              	#@G00482
	LET query_text= "DELETE FROM contact ", #@g00483 
	" WHERE contact_seed = ? " #@g00484 

	PREPARE pr_del_crs_contact FROM query_text #@g00486 

END FUNCTION ## init_cursor_test2_contact #@g00488 


#########################################################		                                                                	#@G00491
# Open the QBE CURSOR,		                                                                                                   	#@G00492
# counts returned rows_count,		                                                                                            	#@G00493
# OPEN the data SET,		                                                                                                     	#@G00494
# FETCH first row		                                                                                                        	#@G00495
# inbound parameter: query predicate		                                                                                     	#@G00496
# outbound parameters: number of rows retried		                                                                            	#@G00497
FUNCTION build_qbe_count_contact(qry_stmt) #@g00498 
	DEFINE qry_stmt STRING #@g00499 
	DEFINE rec_contact STRING #@g00500 
	DEFINE row_count INTEGER #@g00501 
	DEFINE lsql_stmt_status INTEGER #@g00502 

	# define primary_key record		                                                                                             	#@G00504
	DEFINE l_pky RECORD #@g00505 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00506 
	END RECORD #@g00507 

	LET rec_contact = #@g00509 
	"SELECT count(*) FROM contact", #@g00510 
	" WHERE ",qry_stmt clipped #@g00511 


	PREPARE rec_nbr_crs_contact FROM rec_contact #@g00514 
	DECLARE crs_nbr_crs_contact CURSOR FOR rec_nbr_crs_contact #@g00515 

	OPEN crs_nbr_crs_contact #@g00517 
	SET ISOLATION TO dirty read #@g00518 
	WHENEVER ERROR CONTINUE #@g00519 
	FETCH crs_nbr_crs_contact INTO row_count #@g00520 
	WHENEVER ERROR CALL error_mngmt #@g00521 
	SET ISOLATION TO committed read #@g00522 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00524
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00525 
		LET row_count =0 #@g00526 
	END IF #@g00527 
	FREE crs_nbr_crs_contact #@g00528 
	RETURN row_count #@g00529 
END FUNCTION ## build_qbe_count_contact #@g00530 

#########################################################		                                                                	#@G00532
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00533
# Declare AND OPEN the CURSOR		                                                                                            	#@G00534
# inbound param: query predicate		                                                                                         	#@G00535
#outbound parameter: query STATUS		                                                                                        	#@G00536
FUNCTION build_qbe_row_contents_contact(qry_stmt) #@g00537 
	DEFINE qry_stmt STRING #@g00538 
	DEFINE rec_contact STRING #@g00539 
	DEFINE row_count INTEGER #@g00540 
	DEFINE lsql_stmt_status INTEGER #@g00541 

	# define primary_key record		                                                                                             	#@G00543
	DEFINE l_pky RECORD #@g00544 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00545 
	END RECORD #@g00546 

	# display the selected columns		                                                                                          	#@G00548

	LET rec_contact = "SELECT contact_seed ", #@g00550 
	" FROM contact ", #@g00551 
	"WHERE ",qry_stmt clipped, #@g00552 
	" ORDER BY contact_seed " #@g00553 

	PREPARE rech_crs_contact FROM rec_contact #@g00555 

	# crs_scrl_crs_contact : the first CURSOR selects all the primary keys (NOT all the table columns)		                      	#@G00557

	DECLARE crs_scrl_crs_contact SCROLL CURSOR with HOLD FOR rech_crs_contact #@g00559 

	WHENEVER ERROR CONTINUE #@g00561 
	OPEN crs_scrl_crs_contact #@g00562 
	WHENEVER ERROR CALL error_mngmt #@g00563 

	RETURN sqlca.sqlcode #@g00565 
END FUNCTION ## build_qbe_row_contents_contact #@g00566 

#######################################################################		                                                  	#@G00568
# sql_nxtprev_contact : FETCH NEXT OR PREVIOUS RECORD		                                                                    	#@G00569
FUNCTION sql_nxtprev_contact(offset) #@g00570 
	DEFINE offset SMALLINT #@g00571 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00572 
	DEFINE pky RECORD #@g00573 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00574 
	END RECORD #@g00575 

	WHENEVER ERROR CONTINUE #@g00577 
	FETCH relative offset crs_scrl_crs_contact INTO pky.* #@g00578 
	WHENEVER ERROR CALL error_mngmt #@g00579 

	CASE #@g00581 
		WHEN sqlca.sqlcode = 100 #@g00582 
			LET record_found = 0 #@g00583 
		WHEN sqlca.sqlcode < 0 #@g00584 
			LET record_found = -1 #@g00585 
		OTHERWISE #@g00586 
			LET lsql_stmt_status = 1 #@g00587 
			CALL sql_fetch_mrw_contact (pky.*) #@g00588 
			RETURNING record_found #@g00589 

	END CASE #@g00591 
	RETURN record_found,pky.* #@g00592 
END FUNCTION ## sql_nxtprev_contact #@g00593 

########################################################################		                                                 	#@G00595
# sql_FETCH_mrw_contact : read a complete row accessing by primary key		                                                   	#@G00596
# inbound parameter : primary key		                                                                                        	#@G00597
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00598
FUNCTION sql_fetch_mrw_contact(pky_contact) #@g00599 
	DEFINE sql_stmt_status SMALLINT #@g00600 
	DEFINE pky_contact RECORD #@g00601 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00602 
	END RECORD #@g00603 
	#@G00603

	# read the table, access on primary key		                                                                                 	#@G00605
	WHENEVER ERROR CONTINUE #@g00606 
	OPEN crs_row_crs_contact #@g00607 
	USING pky_contact.* #@g00608 

	FETCH crs_row_crs_contact INTO tbl_test2.* #@g00610 

	WHENEVER ERROR CALL error_mngmt #@g00612 
	CASE #@g00613 
		WHEN sqlca.sqlcode = 100 #@g00614 
			LET sql_stmt_status = 0 #@g00615 
		WHEN sqlca.sqlcode < 0 #@g00616 
			LET sql_stmt_status = -1 #@g00617 
		OTHERWISE #@g00618 
			LET sql_stmt_status = 1 #@g00619 
			CALL set_form_record_test2_f_contact(tbl_test2.*) #@g00620 
			RETURNING frm_test2.* #@g00621 
			#@G00621
	END CASE #@g00622 
	RETURN sql_stmt_status #@g00623 
END FUNCTION ## sql_fetch_mrw_contact #@g00624 

########################################################################		                                                 	#@G00626
## INSERT in table contact 		                                                                                              	#@G00627
########################################################################		                                                 	#@G00628
FUNCTION sql_add_contact() #@g00629 
	DEFINE lsql_stmt_status INTEGER #@g00630 
	DEFINE row_count SMALLINT #@g00631 
	WHENEVER ERROR CONTINUE #@g00632 
	EXECUTE pr_ins_crs_contact #@g00633 
	USING tbl_test2.contact_id, #@g00633 
	tbl_test2.valid_from, #@g00633 
	tbl_test2.cmpy_code, #@g00633 
	tbl_test2.valid_to, #@g00633 
	tbl_test2.contact_seed, #@g00633 
	tbl_test2.org_ind, #@g00633 
	tbl_test2.first_name, #@g00633 
	tbl_test2.first_name_up, #@g00633 
	tbl_test2.mid_name, #@g00633 
	tbl_test2.mid_name_up, #@g00633 
	tbl_test2.cust_code, #@g00633 
	tbl_test2.last_org_name, #@g00633 
	tbl_test2.last_org_name_up, #@g00633 
	tbl_test2.mod_user_id, #@g00633 
	tbl_test2.salutation, #@g00633 
	tbl_test2.initials, #@g00633 
	tbl_test2.user_defined1, #@g00633 
	tbl_test2.user_defined2, #@g00633 
	tbl_test2.title, #@g00633 
	tbl_test2.age_role_code, #@g00633 
	tbl_test2.sex_ind # #@g00634 
	WHENEVER ERROR CALL error_mngmt #@g00635 

	IF sqlca.sqlcode < 0 THEN #@g00637 
		LET lsql_stmt_status = -1 #@g00638 
	ELSE #@g00639 
		LET lsql_stmt_status = 0 #@g00640 
	END IF #@g00641 
	RETURN lsql_stmt_status #@g00642 
END FUNCTION ## sql_add_contact #@g00643 

########################################################################		                                                 	#@G00645
## sql_Modify_contact :UPDATE contact record		                                                                             	#@G00646
FUNCTION sql_modify_contact(pky) #@g00647 
	DEFINE lsql_stmt_status INTEGER #@g00648 
	DEFINE pky RECORD #@g00649 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00650 
	END RECORD #@g00651 

	WHENEVER ERROR CONTINUE #@g00653 
	EXECUTE pr_upd_crs_contact #@g00654 
	USING tbl_test2.contact_id, #@g00654 
	tbl_test2.valid_from, #@g00654 
	tbl_test2.cmpy_code, #@g00654 
	tbl_test2.valid_to, #@g00654 
	tbl_test2.org_ind, #@g00654 
	tbl_test2.first_name, #@g00654 
	tbl_test2.first_name_up, #@g00654 
	tbl_test2.mid_name, #@g00654 
	tbl_test2.mid_name_up, #@g00654 
	tbl_test2.cust_code, #@g00654 
	tbl_test2.last_org_name, #@g00654 
	tbl_test2.last_org_name_up, #@g00654 
	tbl_test2.mod_user_id, #@g00654 
	tbl_test2.salutation, #@g00654 
	tbl_test2.initials, #@g00654 
	tbl_test2.user_defined1, #@g00654 
	tbl_test2.user_defined2, #@g00654 
	tbl_test2.title, #@g00654 
	tbl_test2.age_role_code, #@g00654 
	tbl_test2.sex_ind , #@g00655 
	pky.* #@g00656 

	WHENEVER ERROR CALL error_mngmt #@g00658 
	IF sqlca.sqlcode < 0 THEN #@g00659 

		LET lsql_stmt_status = -1 #@g00661 
	ELSE #@g00662 
		LET lsql_stmt_status = 0 #@g00663 
	END IF #@g00664 
	RETURN lsql_stmt_status #@g00665 
END FUNCTION ## sql_modify_contact #@g00666 

########################################################################		                                                 	#@G00668
## sql_delete_contact :delete current row in table contact 		                                                              	#@G00669
FUNCTION sql_suppress_contact(pky) #@g00670 
	DEFINE lsql_stmt_status SMALLINT #@g00671 
	DEFINE pky RECORD #@g00672 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00673 
	END RECORD #@g00674 

	WHENEVER ERROR CONTINUE #@g00676 
	EXECUTE pr_del_crs_contact #@g00677 
	USING pky.* #@g00678 

	WHENEVER ERROR CALL error_mngmt #@g00680 
	IF sqlca.sqlcode < 0 THEN #@g00681 
		LET lsql_stmt_status = -1 #@g00682 
	ELSE #@g00683 
		LET lsql_stmt_status=0 #@g00684 
	END IF #@g00685 
	RETURN lsql_stmt_status #@g00686 
END FUNCTION ## sql_suppress_contact #@g00687 

################################################################################		                                         	#@G00689
#   status_pk_contact : Check if primary key exists		                                                                      	#@G00690
# inbound parameter : record of primary key		                                                                              	#@G00691
# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00692
FUNCTION status_pk_contact(pky) #@g00693 
	DEFINE pky RECORD #@g00694 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00695 
	END RECORD #@g00696 
	DEFINE pk_status INTEGER #@g00697 

	WHENEVER ERROR CONTINUE #@g00699 
	OPEN crs_pky_crs_contact USING pky.* #@g00700 
	FETCH crs_pky_crs_contact #@g00701 
	WHENEVER ERROR CALL error_mngmt #@g00702 

	CASE sqlca.sqlcode #@g00704 
		WHEN 0 #@g00705 
			LET pk_status = 1 #@g00706 
		WHEN 100 #@g00707 
			LET pk_status = 0 #@g00708 
		WHEN sqlca.sqlerrd[2] = 104 #@g00709 
			LET pk_status = -1 # RECORD locked #@g00710 
		WHEN sqlca.sqlcode < 0 #@g00711 
			LET pk_status = sqlca.sqlcode #@g00712 
	END CASE #@g00713 

	RETURN pk_status #@g00715 
END FUNCTION ## status_pk_contact #@g00716 

################################################################################################		                         	#@G00718
#   set_form_record_test2_f_contact: assigns table VALUES TO form fields VALUES		                                          	#@G00719
FUNCTION set_form_record_test2_f_contact(tbl_contents) #@g00720 
	DEFINE frm_contents RECORD #@g00721 
		valid_to LIKE contact.valid_to, # DATE #@g00721 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00721 
		salutation LIKE contact.salutation, # CHAR(20) #@g00721 
		cc_id LIKE contact_channel.cc_id, # VARCHAR(64) #@g00721 
		title LIKE contact.title, # CHAR(20) #@g00721 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00721 
		valid_from LIKE contact.valid_from, # DATE #@g00721 
		first_name LIKE contact.first_name, # CHAR(30) #@g00721 
		initials LIKE contact.initials, # CHAR(12) #@g00721 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00721 
		contact_id LIKE contact.contact_id, # INTEGER #@g00721 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00722 
	END RECORD #@g00723 

	DEFINE tbl_contents RECORD #@g00725 
		contact_id LIKE contact.contact_id, # INTEGER #@g00725 
		valid_from LIKE contact.valid_from, # DATE #@g00725 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00725 
		valid_to LIKE contact.valid_to, # DATE #@g00725 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00725 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00725 
		first_name LIKE contact.first_name, # CHAR(30) #@g00725 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00725 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00725 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00725 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00725 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00725 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00725 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00725 
		salutation LIKE contact.salutation, # CHAR(20) #@g00725 
		initials LIKE contact.initials, # CHAR(12) #@g00725 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00725 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00725 
		title LIKE contact.title, # CHAR(20) #@g00725 
		age_role_code LIKE contact.age_role_code, # INTEGER #@g00725 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00726 
	END RECORD #@g00727 

	INITIALIZE frm_contents.* TO NULL #@g00729 
	LET frm_contents.valid_to = tbl_test2.valid_to #@g00730 
	LET frm_contents.cmpy_code = tbl_test2.cmpy_code #@g00731 
	LET frm_contents.salutation = tbl_test2.salutation #@g00732 
	LET frm_contents.title = tbl_test2.title #@g00733 
	LET frm_contents.last_org_name = tbl_test2.last_org_name #@g00734 
	LET frm_contents.valid_from = tbl_test2.valid_from #@g00735 
	LET frm_contents.first_name = tbl_test2.first_name #@g00736 
	LET frm_contents.initials = tbl_test2.initials #@g00737 
	LET frm_contents.mid_name = tbl_test2.mid_name #@g00738 
	LET frm_contents.contact_id = tbl_test2.contact_id #@g00739 
	#@G00740
	RETURN frm_contents.* #@g00741 
END FUNCTION ## set_form_record_test2_f_contact #@g00742 

################################################################################################		                         	#@G00744
## set_table_record_test2_contact: assigns form fields value TO table VALUES		                                             	#@G00745
FUNCTION set_table_record_test2_contact(mode,frm_contents) #@g00746 
	DEFINE MODE CHAR(1) #@g00747 
	DEFINE frm_contents RECORD #@g00748 
		valid_to LIKE contact.valid_to, # DATE #@g00748 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00748 
		salutation LIKE contact.salutation, # CHAR(20) #@g00748 
		cc_id LIKE contact_channel.cc_id, # VARCHAR(64) #@g00748 
		title LIKE contact.title, # CHAR(20) #@g00748 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00748 
		valid_from LIKE contact.valid_from, # DATE #@g00748 
		first_name LIKE contact.first_name, # CHAR(30) #@g00748 
		initials LIKE contact.initials, # CHAR(12) #@g00748 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00748 
		contact_id LIKE contact.contact_id, # INTEGER #@g00748 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00749 
	END RECORD #@g00750 

	DEFINE tbl_contents RECORD #@g00752 
		contact_id LIKE contact.contact_id, # INTEGER #@g00752 
		valid_from LIKE contact.valid_from, # DATE #@g00752 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00752 
		valid_to LIKE contact.valid_to, # DATE #@g00752 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00752 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00752 
		first_name LIKE contact.first_name, # CHAR(30) #@g00752 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00752 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00752 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00752 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00752 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00752 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00752 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00752 
		salutation LIKE contact.salutation, # CHAR(20) #@g00752 
		initials LIKE contact.initials, # CHAR(12) #@g00752 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00752 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00752 
		title LIKE contact.title, # CHAR(20) #@g00752 
		age_role_code LIKE contact.age_role_code, # INTEGER #@g00752 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00753 
	END RECORD #@g00754 

	INITIALIZE tbl_contents.* TO NULL #@g00756 
	LET tbl_contents.contact_id = frm_test2.contact_id #@g00757 
	LET tbl_contents.valid_from = frm_test2.valid_from #@g00758 
	LET tbl_contents.cmpy_code = frm_test2.cmpy_code #@g00759 
	LET tbl_contents.valid_to = frm_test2.valid_to #@g00760 
	IF MODE = "I" THEN #@g00761 
		LET tbl_contents.contact_seed = 0 #@g00762 
	END IF #@g00763 
	# LET tbl_contents.org_ind = your value		                                                                                  	#@G00764
	LET tbl_contents.first_name = frm_test2.first_name #@g00765 
	# LET tbl_contents.first_name_up = your value		                                                                            	#@G00766
	LET tbl_contents.mid_name = frm_test2.mid_name #@g00767 
	# LET tbl_contents.mid_name_up = your value		                                                                              	#@G00768
	# LET tbl_contents.cust_code = your value		                                                                                	#@G00769
	LET tbl_contents.last_org_name = frm_test2.last_org_name #@g00770 
	# LET tbl_contents.last_org_name_up = your value		                                                                         	#@G00771
	# LET tbl_contents.mod_user_id = your value		                                                                              	#@G00772
	LET tbl_contents.salutation = frm_test2.salutation #@g00773 
	LET tbl_contents.initials = frm_test2.initials #@g00774 
	# LET tbl_contents.user_defined1 = your value		                                                                            	#@G00775
	# LET tbl_contents.user_defined2 = your value		                                                                            	#@G00776
	LET tbl_contents.title = frm_test2.title #@g00777 
	# LET tbl_contents.age_role_code = your value		                                                                            	#@G00778
	# LET tbl_contents.sex_ind = your value		                                                                                  	#@G00779
	#@G00780

	RETURN tbl_contents.* #@g00782 
END FUNCTION ## set_table_record_test2_contact #@g00783 

#@G00785

#@G00787

#@G00789
