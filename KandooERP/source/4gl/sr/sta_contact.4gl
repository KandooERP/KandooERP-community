# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-09-02 12:44:48		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE tbl_contact RECORD #@g00008 
	contact_id INTEGER, #@g00009 
	valid_from DATE, #@g00010 
	cmpy_code CHAR(2), #@g00011 
	valid_to DATE, #@g00012 
	contact_seed BIGSERIAL, #@g00013 
	org_ind CHAR(1), #@g00014 
	first_name CHAR(30), #@g00015 
	first_name_up CHAR(30), #@g00016 
	mid_name CHAR(30), #@g00017 
	mid_name_up CHAR(30), #@g00018 
	cust_code CHAR(8), #@g00019 
	last_org_name CHAR(50), #@g00020 
	last_org_name_up CHAR(50), #@g00021 
	mod_user_id CHAR(8), #@g00022 
	salutation CHAR(20), #@g00023 
	initials CHAR(12), #@g00024 
	user_defined1 CHAR(30), #@g00025 
	user_defined2 CHAR(30), #@g00026 
	title CHAR(20), #@g00027 
	age_role_code INTEGER, #@g00028 
	sex_ind CHAR(1) #@g00029 
END RECORD #@g00030 

DEFINE frm_contact RECORD #@g00032 
	cmpy_code CHAR(2), #@g00033 
	contact_id INTEGER, #@g00034 
	first_name CHAR(30), #@g00035 
	mid_name CHAR(30), #@g00036 
	last_org_name CHAR(50), #@g00037 
	initials CHAR(12), #@g00038 
	salutation CHAR(20), #@g00039 
	title CHAR(20), #@g00040 
	valid_to DATE, #@g00041 
	valid_from DATE #@g00042 
END RECORD #@g00043 

DEFINE sav_contact RECORD #@g00045 
	cmpy_code CHAR(2), #@g00046 
	contact_id INTEGER, #@g00047 
	first_name CHAR(30), #@g00048 
	mid_name CHAR(30), #@g00049 
	last_org_name CHAR(50), #@g00050 
	initials CHAR(12), #@g00051 
	salutation CHAR(20), #@g00052 
	title CHAR(20), #@g00053 
	valid_to DATE, #@g00054 
	valid_from DATE #@g00055 
END RECORD #@g00056 

DEFINE lup_contact RECORD #@g00057 
	name_text CHAR(30) 
END RECORD #@g00058 
#@G00059

MAIN #@g00061 
	DEFER interrupt #@g00062 
	#OPTIONS		                                                                                                                 	#@G00063
	#help file "contact.iem",		                                                                                                	#@G00064
	#help key F1		                                                                                                             	#@G00065

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00067
	CALL ui_init(0) 		                                                                                                      	#@G00068
	LET m_program="p_contact_contact" #@g00069 

	CALL main_contact_contact() #@g00071 

END MAIN #@g00073 

#######################################################		                                                                  	#@G00075
# definition variable sccs		                                                                                               	#@G00076
FUNCTION mc_contact_sccs() #@g00077 
	DEFINE sccs_var CHAR(70) #@g00078 
	LET sccs_var="%W% %D%" #@g00079 
END FUNCTION #@g00080 

FUNCTION main_contact_contact () #@g00082 

	--CALL init_program("kandoodb",m_program) #@g00084 

	OPEN WINDOW f_contact with FORM "f_contact" attributes(border) #@g00086 

	CALL init_cursor_contact_contact () # INITIALIZE all cursors ON master TABLE #@g00088 
	#@G00088

	CALL menu_contact_contact() #@g00090 

	CLOSE WINDOW f_contact #@g00092 

END FUNCTION #@g00094 

######################################################################		                                                   	#@G00096
# menu_contact_contact		                                                                                                   	#@G00097
# the top level menu 		                                                                                                    	#@G00098
# input arguments: none		                                                                                                  	#@G00099
# output arguments: none		                                                                                                 	#@G00100
FUNCTION menu_contact_contact () #@g00101 
	DEFINE nbsel_contact INTEGER #@g00102 
	DEFINE sql_stmt_status INTEGER #@g00103 
	DEFINE record_num INTEGER #@g00104 
	DEFINE ACTION SMALLINT #@g00105 
	DEFINE xnumber SMALLINT #@g00106 
	DEFINE arr_elem_num SMALLINT #@g00107 
	DEFINE pky_contact RECORD #@g00108 
		contact_seed BIGSERIAL #@g00109 
	END RECORD #@g00110 

	LET nbsel_contact = 0 #@g00112 
	MENU "contact" #@g00113 
		BEFORE MENU #@g00114 
			HIDE option "Next","Previous" #@g00115 
		COMMAND "Query" "Query data with multiple criteria contact" #@g00116 
			#HELP 1000		                                                                                                              	#@G00117
			MESSAGE "" #@g00118 
			INITIALIZE frm_contact.* TO NULL #@g00119 
			DISPLAY BY NAME frm_contact.* #@g00120 
			HIDE option "Next","Previous" #@g00121 

			INITIALIZE lup_contact.* TO NULL #@g00123 
			DISPLAY BY NAME lup_contact.* #@g00124 
			#@G00124

			CALL query_contact() RETURNING nbsel_contact #@g00126 
			IF nbsel_contact <>0 THEN #@g00127 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00128 
				LET record_num = 1 #@g00129 
				DISPLAY BY NAME frm_contact.* #@g00130 
				IF nbsel_contact > 1 THEN #@g00131 
					SHOW option "Next" #@g00132 
					NEXT option "Next" #@g00133 
				END IF #@g00134 
				DISPLAY BY NAME lup_contact.* #@g00135 
				#@G00135
				#@G00135
			ELSE #@g00136 
				ERROR "No row matches the criteria" #@g00137 
				NEXT option "Query" #@g00138 
			END IF #@g00139 

		COMMAND "Next" "Display Next record contact" #@g00141 
			#HELP 2000		                                                                                                              	#@G00142
			MESSAGE "" #@g00143 
			INITIALIZE frm_contact.* TO NULL #@g00144 
			DISPLAY BY NAME frm_contact.* #@g00145 
			INITIALIZE lup_contact.* TO NULL #@g00146 
			DISPLAY BY NAME lup_contact.* #@g00147 
			#@G00147

			IF record_num < nbsel_contact THEN #@g00149 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00150 
				CASE #@g00151 
					WHEN sql_stmt_status = 0 #@g00152 
						ERROR "FETCH Last record of this selection contact" #@g00153 
					WHEN sql_stmt_status = -1 #@g00154 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00155 
					WHEN sql_stmt_status = 1 #@g00156 
						LET record_num = record_num + 1 #@g00157 
						DISPLAY BY NAME frm_contact.* #@g00158 
						IF record_num >= nbsel_contact THEN #@g00159 
							HIDE option "Next" #@g00160 
						END IF #@g00161 
						IF record_num > 1 THEN #@g00162 
							SHOW option "Previous" #@g00163 
						ELSE #@g00164 
							HIDE option "Previous" #@g00165 
						END IF #@g00166 
						DISPLAY BY NAME lup_contact.* #@g00167 
						#@G00167
						#@G00167
				END CASE #@g00168 
			ELSE #@g00169 
				ERROR " Please SET query criteria previously contact " #@g00170 
				NEXT option "Query" #@g00171 
			END IF #@g00172 

		COMMAND "Previous" "Display Previous Record contact" #@g00174 
			#HELP 3000		                                                                                                              	#@G00175
			MESSAGE "" #@g00176 
			INITIALIZE frm_contact.* TO NULL #@g00177 
			DISPLAY BY NAME frm_contact.* #@g00178 
			INITIALIZE lup_contact.* TO NULL #@g00179 
			DISPLAY BY NAME lup_contact.* #@g00180 
			#@G00180

			IF record_num > 1 THEN #@g00182 
				CALL sql_nxtprev_contact(-1) RETURNING sql_stmt_status,pky_contact.* #@g00183 
				CASE #@g00184 
					WHEN sql_stmt_status = 0 #@g00185 
						ERROR "FETCH First record of this selection contact" #@g00186 
					WHEN sql_stmt_status < -1 #@g00187 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00188 
					WHEN sql_stmt_status = 1 #@g00189 
						LET record_num = record_num - 1 #@g00190 
						CALL set_form_record_contact_f_contact(tbl_contact.*) #@g00191 
						RETURNING frm_contact.* #@g00192 
						DISPLAY BY NAME frm_contact.* #@g00193 
						IF record_num = 1 THEN #@g00194 
							HIDE option "Previous" #@g00195 
						END IF #@g00196 
						IF record_num < nbsel_contact THEN #@g00197 
							SHOW option "Next" #@g00198 
						ELSE #@g00199 
							HIDE option "Next" #@g00200 
						END IF #@g00201 
						DISPLAY BY NAME lup_contact.* #@g00202 
						#@G00202
						#@G00202
				END CASE #@g00203 
			ELSE #@g00204 
				ERROR " Please SET query criteria previously contact " #@g00205 
				NEXT option "Query" #@g00206 
			END IF #@g00207 

			#@G00208

		COMMAND "Add" "Add a new record contact" #@g00210 
			#HELP 3000		                                                                                                              	#@G00211
			MESSAGE "" #@g00212 
			CALL add_contact() #@g00213 
			MESSAGE "" #@g00214 

		COMMAND "Modify" "Modify current record contact" #@g00216 
			#HELP 4000		                                                                                                              	#@G00217
			MESSAGE "" #@g00218 
			IF nbsel_contact THEN #@g00219 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00220 
					ERROR "IS locked " #@g00221 
					NEXT option "Next" #@g00222 
				ELSE #@g00223 
					LET sql_stmt_status = modify_contact(pky_contact.*) #@g00224 
				END IF #@g00225 
			ELSE #@g00226 
				ERROR " Please SET query criteria previously contact " #@g00227 
				NEXT option "Query" #@g00228 
			END IF #@g00229 

		COMMAND "Suppress" "Suppress current record contact" #@g00231 
			#HELP 5000		                                                                                                              	#@G00232
			MESSAGE "" #@g00233 
			IF nbsel_contact THEN #@g00234 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00235 
					ERROR "IS locked " #@g00236 
					NEXT option "Next" #@g00237 
				END IF #@g00238 
				WHILE true #@g00239 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00240 
					CASE #@g00241 
						WHEN ACTION = 0 OR ACTION = 1 #@g00242 
							EXIT WHILE # degage abandon #@g00243 
						WHEN ACTION = 2 #@g00244 
							CALL suppress_contact(pky_contact.*) #@g00245 
							RETURNING sql_stmt_status #@g00246 
							EXIT WHILE #@g00247 
					END CASE #@g00248 
				END WHILE #@g00249 
			ELSE #@g00250 
				ERROR "Please SET query criteria previously contact " #@g00251 
				NEXT option "Query" #@g00252 
			END IF #@g00253 

		COMMAND "Exit" "EXIT PROGRAM" #@g00255 
			#HELP 9000		                                                                                                              	#@G00256
			MESSAGE "" #@g00257 
			EXIT MENU #@g00258 
	END MENU #@g00259 
END FUNCTION #@g00260 

#######################################################################		                                                  	#@G00262
#    Query_contact : Query By Example on table contact		                                                                   	#@G00263
# Input selection criteria,		                                                                                              	#@G00264
# PREPARE the query,		                                                                                                     	#@G00265
# OPEN the data SET		                                                                                                      	#@G00266
#######################################################################		                                                  	#@G00267
FUNCTION query_contact() #@g00268 
	DEFINE rec_contact,where_clause STRING #@g00269 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00270 
	DEFINE l_pky RECORD #@g00271 
		contact_seed BIGSERIAL #@g00272 
	END RECORD #@g00273 
	DEFINE reply CHAR(5) #@g00274 
	LET xnumber = 0 #@g00275 
	MESSAGE "Please input query criteria" #@g00276 
	# INITIALIZE record AND display blank		                                                                                   	#@G00277
	INITIALIZE frm_contact.* TO NULL #@g00278 
	DISPLAY BY NAME frm_contact.* #@g00279 
	INITIALIZE lup_contact.* TO NULL #@g00280 
	DISPLAY BY NAME lup_contact.* #@g00281 
	#@G00281

	CONSTRUCT BY NAME where_clause ON contact.cmpy_code, #@g00283 
	contact.contact_id, #@g00284 
	contact.first_name, #@g00285 
	contact.mid_name, #@g00286 
	contact.last_org_name, #@g00287 
	contact.salutation, #@g00288 
	contact.initials, #@g00289 
	contact.title, #@g00290 
	contact.valid_from, #@g00291 
	contact.valid_to #@g00292 

	#@G00293

	## Check whether criteria have been entered		                                                                             	#@G00295
		AFTER CONSTRUCT #@g00296 
			IF NOT field_touched(contact.*) AND NOT int_flag THEN #@g00297 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00298 
				CASE #@g00299 
					WHEN reply matches "Yes" #@g00300 
						EXIT CONSTRUCT #@g00301 
					OTHERWISE # saisie d'un critere de selection #@g00302 
						ERROR "Please input a least one criteria" #@g00303 
						CONTINUE CONSTRUCT #@g00304 
				END CASE #@g00305 
			END IF #@g00306 
	END CONSTRUCT #@g00307 

	IF int_flag = true THEN #@g00309 
		MESSAGE "Quit with quit key" #@g00310 
		LET int_flag=0 #@g00311 
	ELSE #@g00312 
		LET xnumber = build_qbe_count_contact(where_clause) #@g00313 
		IF xnumber > 0 THEN #@g00314 
			LET sql_stmt_status = build_qbe_row_contents_contact(where_clause) #@g00315 
		ELSE #@g00316 
			RETURN -1 #@g00317 
		END IF #@g00318 

	END IF #@g00320 
	RETURN xnumber #@g00321 
END FUNCTION ## query_contact #@g00322 

####################################################################		                                                     	#@G00324
## Add_contact: add a new contact row		                                                                                    	#@G00325
FUNCTION add_contact() #@g00326 
	DEFINE sql_stmt_status SMALLINT #@g00327 
	DEFINE row_count SMALLINT #@g00328 
	DEFINE nbre_contact ,action SMALLINT #@g00329 
	DEFINE lookup_status INTEGER #@g00330 
	#@G00330
	#INITIALIZE pky_contact.* TO NULL		                                                                                       	#@G00331
	INITIALIZE tbl_contact.* TO NULL #@g00332 
	INITIALIZE frm_contact.* TO NULL #@g00333 
	INITIALIZE sav_contact.* TO NULL #@g00334 
	INITIALIZE lup_contact.* TO NULL #@g00335 
	#@G00335
	WHILE true #@g00336 
		LET int_flag = false #@g00337 
		INPUT BY NAME frm_contact.cmpy_code, #@g00338 
		frm_contact.contact_id, #@g00339 
		frm_contact.first_name, #@g00340 
		frm_contact.mid_name, #@g00341 
		frm_contact.last_org_name, #@g00342 
		frm_contact.salutation, #@g00343 
		frm_contact.initials, #@g00344 
		frm_contact.title, #@g00345 
		frm_contact.valid_from, #@g00346 
		frm_contact.valid_to #@g00347 
		WITHOUT DEFAULTS #@g00348 
		#@G00349
		#@G00349

		#@G00350
		#@G00350
		END INPUT #@g00351 
		IF int_flag = true THEN #@g00352 
			# Resign FROM input		                                                                                                   	#@G00353
			LET int_flag=false #@g00354 
			LET frm_contact.* = sav_contact.* #@g00355 
			DISPLAY BY NAME frm_contact.* #@g00356 
			MESSAGE "Quit with quit key Control-C" #@g00357 
			EXIT WHILE #@g00358 
		END IF #@g00359 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00361 
		CASE ACTION #@g00362 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00363 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00364 

			WHEN 2 # ON valide la transaction #@g00366 
				BEGIN WORK #@g00367 
					#@G00367
					CALL set_table_record_contact_contact("I",frm_contact.*) #@g00368 
					RETURNING tbl_contact.* #@g00369 
					CALL sql_add_contact() RETURNING sql_stmt_status #@g00370 

					CASE #@g00372 
						WHEN sql_stmt_status = 0 #@g00373 
							MESSAGE "Add Successful operation" #@g00374 
						COMMIT WORK #@g00375 
						#@G00375
						WHEN sql_stmt_status < 0 #@g00376 
							CALL display_eric_error("Add contact:failed ") #@g00377 
							ROLLBACK WORK #@g00378 
							#@G00378
					END CASE #@g00379 
					EXIT WHILE #@g00380 

			WHEN 0 #@g00382 
				EXIT WHILE #@g00383 
		END CASE #@g00384 
	END WHILE #@g00385 
	RETURN sql_stmt_status #@g00386 
END FUNCTION ## add_contact #@g00387 


#######################################################################		                                                  	#@G00390
# Modify_contact : Edit a contact RECORD		                                                                                 	#@G00391
# inbound: table primary key		                                                                                             	#@G00392
FUNCTION modify_contact(pky) #@g00393 
	DEFINE ACTION SMALLINT #@g00394 
	DEFINE sql_stmt_status SMALLINT #@g00395 
	DEFINE lookup_status INTEGER #@g00396 
	#@G00396
	DEFINE row_count SMALLINT #@g00397 
	DEFINE pky RECORD #@g00398 
		contact_seed BIGSERIAL #@g00399 
	END RECORD #@g00400 

	## check if record can be accessed		                                                                                      	#@G00402
	WHILE true #@g00403 
		LET int_flag = false #@g00404 
		# Save Screen Record VALUES before altering		                                                                            	#@G00405
		LET sav_contact.* = frm_contact.* #@g00406 
		BEGIN WORK #@g00407 
			#@G00407

			INPUT BY NAME frm_contact.cmpy_code, #@g00409 
			frm_contact.contact_id, #@g00410 
			frm_contact.first_name, #@g00411 
			frm_contact.mid_name, #@g00412 
			frm_contact.last_org_name, #@g00413 
			frm_contact.salutation, #@g00414 
			frm_contact.initials, #@g00415 
			frm_contact.title, #@g00416 
			frm_contact.valid_from, #@g00417 
			frm_contact.valid_to #@g00418 
			WITHOUT DEFAULTS #@g00419 
			#@G00419

			#@G00420

			#@G00421
			END INPUT #@g00422 
			IF int_flag = true THEN #@g00423 
				LET int_flag=false #@g00424 
				# Restore previous value		                                                                                              	#@G00425
				LET frm_contact.* = sav_contact.* #@g00426 
				DISPLAY BY NAME frm_contact.* #@g00427 
				MESSAGE "$CancelCom Control-C" #@g00428 
				EXIT WHILE #@g00429 
			END IF #@g00430 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00432 

			CASE #@g00434 
				WHEN ACTION = 0 #@g00435 
					# Resign, restore previous VALUES		                                                                                     	#@G00436
					LET frm_contact.* = sav_contact.* #@g00437 
					DISPLAY BY NAME frm_contact.* #@g00438 
					EXIT WHILE # CANCEL operation #@g00439 

				WHEN ACTION = 1 #@g00441 
					# Redo		                                                                                                                	#@G00442
					CONTINUE WHILE #@g00443 

				WHEN ACTION = 2 #@g00445 
					# confirm UPDATE		                                                                                                      	#@G00446
					CALL set_table_record_contact_contact("U",frm_contact.*) #@g00447 
					RETURNING tbl_contact.* #@g00448 
					LET sql_stmt_status = sql_modify_contact(pky.*) #@g00449 
					CASE #@g00450 
						WHEN sql_stmt_status = 0 #@g00451 
							MESSAGE "Modify Successful operation" #@g00452 
						COMMIT WORK #@g00453 
						#@G00453
						WHEN sql_stmt_status < 0 #@g00454 
							CALL display_eric_error("Modify contact:failed ") #@g00455 
							ROLLBACK WORK #@g00456 
							#@G00456
					END CASE #@g00457 
					EXIT WHILE #@g00458 
			END CASE #@g00459 
		END WHILE #@g00460 
		RETURN sql_stmt_status #@g00461 
END FUNCTION ## modify_contact(pky) #@g00462 


#######################################################################		                                                  	#@G00465
# DELETE A contact row		                                                                                                   	#@G00466
# inbound: table primary key		                                                                                             	#@G00467
FUNCTION suppress_contact(pky) #@g00468 
	DEFINE ACTION SMALLINT #@g00469 
	DEFINE sql_stmt_status SMALLINT #@g00470 
	DEFINE pky RECORD #@g00471 
		contact_seed BIGSERIAL #@g00472 
	END RECORD #@g00473 

	WHILE true #@g00475 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00476 
		BEGIN WORK #@g00477 
			#@G00477
			CASE #@g00478 
				WHEN ACTION = 0 OR ACTION = 1 #@g00479 
					EXIT WHILE # degage abandon #@g00480 
				WHEN ACTION = 2 #@g00481 
					CALL sql_suppress_contact(pky.*) RETURNING sql_stmt_status #@g00482 
					CASE #@g00483 
						WHEN sql_stmt_status = 0 #@g00484 
							MESSAGE "Suppress Successful operation" #@g00485 
						COMMIT WORK #@g00486 
						#@G00486
						INITIALIZE frm_contact.* TO NULL #@g00487 
						DISPLAY BY NAME frm_contact.* #@g00488 
						INITIALIZE lup_contact.* TO NULL #@g00489 
						INITIALIZE lup_contact.* TO NULL #@g00490 
						DISPLAY BY NAME lup_contact.* #@g00491 
						#@G00491
						WHEN sql_stmt_status < 0 #@g00492 
							CALL display_eric_error("Suppress contact:failed ") #@g00493 
							ROLLBACK WORK #@g00494 
							#@G00494
					END CASE #@g00495 
					EXIT WHILE #@g00496 
			END CASE #@g00497 
		END WHILE #@g00498 
		RETURN sql_stmt_status #@g00499 
END FUNCTION ## suppress_contact(pky) #@g00500 

#########################################################################		                                                	#@G00502
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00503
FUNCTION init_cursor_contact_contact () #@g00504 
	DEFINE query_text STRING #@g00505 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00507
	LET query_text= #@g00508 
	"SELECT contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind ", #@g00509 
	" FROM contact ", #@g00510 
	"WHERE contact_seed = ? " #@g00511 

	PREPARE sel_mrw_mcontact FROM query_text #@g00513 
	DECLARE crs_row_mcontact CURSOR FOR sel_mrw_mcontact #@g00514 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00516
	LET query_text= "SELECT contact_seed ", #@g00517 
	" FROM contact ", #@g00518 
	" WHERE contact_seed = ? " #@g00519 

	PREPARE sel_pky_mcontact FROM query_text #@g00521 
	DECLARE crs_pky_mcontact CURSOR FOR sel_pky_mcontact #@g00522 

	# PREPARE INSERT statement		                                                                                              	#@G00524
	LET query_text = #@g00525 
	"INSERT INTO contact ( contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined2,title,age_role_code,sex_ind )", #@g00526 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00527 
	PREPARE pr_ins_mcontact FROM query_text #@g00528 

	# PREPARE UPDATE statement		                                                                                              	#@G00530
	LET query_text= #@g00531 
	"UPDATE contact ", #@g00532 
	"SET ( contact_id,valid_from,cmpy_code,valid_to,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind )", #@g00533 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )", #@g00534 
	" WHERE contact_seed = ? " #@g00535 
	PREPARE pr_upd_mcontact FROM query_text #@g00536 

	# PREPARE DELETE statement		                                                                                              	#@G00538
	LET query_text= "DELETE FROM contact ", #@g00539 
	" WHERE contact_seed = ? " #@g00540 

	PREPARE pr_del_mcontact FROM query_text #@g00542 

END FUNCTION ## init_cursor_contact_contact #@g00544 


#########################################################		                                                                	#@G00547
# Open the QBE CURSOR,		                                                                                                   	#@G00548
# counts returned rows_count,		                                                                                            	#@G00549
# OPEN the data SET,		                                                                                                     	#@G00550
# FETCH first row		                                                                                                        	#@G00551
# inbound parameter: query predicate		                                                                                     	#@G00552
# outbound parameters: number of rows retried		                                                                            	#@G00553
FUNCTION build_qbe_count_contact(qry_stmt) #@g00554 
	DEFINE qry_stmt STRING #@g00555 
	DEFINE rec_contact STRING #@g00556 
	DEFINE row_count INTEGER #@g00557 
	DEFINE lsql_stmt_status INTEGER #@g00558 

	# define primary_key record		                                                                                             	#@G00560
	DEFINE l_pky RECORD #@g00561 
		contact_seed BIGSERIAL #@g00562 
	END RECORD #@g00563 

	LET rec_contact = #@g00565 
	"SELECT count(*) FROM contact", #@g00566 
	" WHERE ",qry_stmt clipped #@g00567 


	PREPARE rec_nbr_mcontact FROM rec_contact #@g00570 
	DECLARE crs_nbr_mcontact CURSOR FOR rec_nbr_mcontact #@g00571 

	OPEN crs_nbr_mcontact #@g00573 
	SET ISOLATION TO dirty read #@g00574 
	WHENEVER ERROR CONTINUE #@g00575 
	FETCH crs_nbr_mcontact INTO row_count #@g00576 
	WHENEVER ERROR CALL error_mngmt #@g00577 
	SET ISOLATION TO committed read #@g00578 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00580
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00581 
		LET row_count =0 #@g00582 
	END IF #@g00583 
	FREE crs_nbr_mcontact #@g00584 
	RETURN row_count #@g00585 
END FUNCTION ## build_qbe_count_contact #@g00586 

#########################################################		                                                                	#@G00588
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00589
# Declare AND OPEN the CURSOR		                                                                                            	#@G00590
# inbound param: query predicate		                                                                                         	#@G00591
#outbound parameter: query STATUS		                                                                                        	#@G00592
FUNCTION build_qbe_row_contents_contact(qry_stmt) #@g00593 
	DEFINE qry_stmt STRING #@g00594 
	DEFINE rec_contact STRING #@g00595 
	DEFINE row_count INTEGER #@g00596 
	DEFINE lsql_stmt_status INTEGER #@g00597 

	# define primary_key record		                                                                                             	#@G00599
	DEFINE l_pky RECORD #@g00600 
		contact_seed BIGSERIAL #@g00601 
	END RECORD #@g00602 

	# display the selected columns		                                                                                          	#@G00604

	LET rec_contact = "SELECT contact_seed ", #@g00606 
	" FROM contact ", #@g00607 
	"WHERE ",qry_stmt clipped, #@g00608 
	" ORDER BY contact_seed " #@g00609 

	PREPARE rech_mcontact FROM rec_contact #@g00611 

	# crs_scrl_mcontact : the first CURSOR selects all the primary keys (NOT all the table columns)		                         	#@G00613

	DECLARE crs_scrl_mcontact SCROLL CURSOR with HOLD FOR rech_mcontact #@g00615 

	WHENEVER ERROR CONTINUE #@g00617 
	OPEN crs_scrl_mcontact #@g00618 
	WHENEVER ERROR CALL error_mngmt #@g00619 

	RETURN sqlca.sqlcode #@g00621 
END FUNCTION ## build_qbe_row_contents_contact #@g00622 

#######################################################################		                                                  	#@G00624
# sql_nxtprev_contact : FETCH NEXT OR PREVIOUS RECORD		                                                                    	#@G00625
FUNCTION sql_nxtprev_contact(offset) #@g00626 
	DEFINE offset SMALLINT #@g00627 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00628 
	DEFINE pky RECORD #@g00629 
		contact_seed BIGSERIAL #@g00630 
	END RECORD #@g00631 

	WHENEVER ERROR CONTINUE #@g00633 
	FETCH relative offset crs_scrl_mcontact INTO pky.* #@g00634 
	WHENEVER ERROR CALL error_mngmt #@g00635 

	CASE #@g00637 
		WHEN sqlca.sqlcode = 100 #@g00638 
			LET record_found = 0 #@g00639 
		WHEN sqlca.sqlcode < 0 #@g00640 
			LET record_found = -1 #@g00641 
		OTHERWISE #@g00642 
			LET lsql_stmt_status = 1 #@g00643 
			CALL sql_fetch_mrw_contact (pky.*) #@g00644 
			RETURNING record_found #@g00645 

	END CASE #@g00647 
	RETURN record_found,pky.* #@g00648 
END FUNCTION ## sql_nxtprev_contact #@g00649 

########################################################################		                                                 	#@G00651
# sql_FETCH_mrw_contact : read a complete row accessing by primary key		                                                   	#@G00652
# inbound parameter : primary key		                                                                                        	#@G00653
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00654
FUNCTION sql_fetch_mrw_contact(pky_contact) #@g00655 
	DEFINE sql_stmt_status SMALLINT #@g00656 
	DEFINE pky_contact RECORD #@g00657 
		contact_seed BIGSERIAL #@g00658 
	END RECORD #@g00659 
	DEFINE lookup_status INTEGER #@g00660 
	#@G00660

	# read the table, access on primary key		                                                                                 	#@G00662
	WHENEVER ERROR CONTINUE #@g00663 
	OPEN crs_row_mcontact #@g00664 
	USING pky_contact.* #@g00665 

	FETCH crs_row_mcontact INTO tbl_contact.* #@g00667 

	WHENEVER ERROR CALL error_mngmt #@g00669 
	CASE #@g00670 
		WHEN sqlca.sqlcode = 100 #@g00671 
			LET sql_stmt_status = 0 #@g00672 
		WHEN sqlca.sqlcode < 0 #@g00673 
			LET sql_stmt_status = -1 #@g00674 
		OTHERWISE #@g00675 
			LET sql_stmt_status = 1 #@g00676 
			CALL set_form_record_contact_f_contact(tbl_contact.*) #@g00677 
			RETURNING frm_contact.* #@g00678 
			#@G00678
	END CASE #@g00679 
	RETURN sql_stmt_status #@g00680 
END FUNCTION ## sql_fetch_mrw_contact #@g00681 

########################################################################		                                                 	#@G00683
## INSERT in table contact 		                                                                                              	#@G00684
########################################################################		                                                 	#@G00685
FUNCTION sql_add_contact() #@g00686 
	DEFINE lsql_stmt_status INTEGER #@g00687 
	DEFINE row_count SMALLINT #@g00688 
	WHENEVER ERROR CONTINUE #@g00689 
	EXECUTE pr_ins_mcontact #@g00690 
	USING tbl_contact.contact_id, #@g00690 
	tbl_contact.valid_from, #@g00690 
	tbl_contact.cmpy_code, #@g00690 
	tbl_contact.valid_to, #@g00690 
	tbl_contact.contact_seed, #@g00690 
	tbl_contact.org_ind, #@g00690 
	tbl_contact.first_name, #@g00690 
	tbl_contact.first_name_up, #@g00690 
	tbl_contact.mid_name, #@g00690 
	tbl_contact.mid_name_up, #@g00690 
	tbl_contact.cust_code, #@g00690 
	tbl_contact.last_org_name, #@g00690 
	tbl_contact.last_org_name_up, #@g00690 
	tbl_contact.mod_user_id, #@g00690 
	tbl_contact.salutation, #@g00690 
	tbl_contact.initials, #@g00690 
	tbl_contact.user_defined1, #@g00690 
	tbl_contact.user_defined2, #@g00690 
	tbl_contact.title, #@g00690 
	tbl_contact.age_role_code, #@g00690 
	tbl_contact.sex_ind # #@g00691 
	WHENEVER ERROR CALL error_mngmt #@g00692 

	IF sqlca.sqlcode < 0 THEN #@g00694 
		LET lsql_stmt_status = -1 #@g00695 
	ELSE #@g00696 
		LET lsql_stmt_status = 0 #@g00697 
	END IF #@g00698 
	RETURN lsql_stmt_status #@g00699 
END FUNCTION ## sql_add_contact #@g00700 

########################################################################		                                                 	#@G00702
## sql_Modify_contact :UPDATE contact record		                                                                             	#@G00703
FUNCTION sql_modify_contact(pky) #@g00704 
	DEFINE lsql_stmt_status INTEGER #@g00705 
	DEFINE pky RECORD #@g00706 
		contact_seed BIGSERIAL #@g00707 
	END RECORD #@g00708 

	WHENEVER ERROR CONTINUE #@g00710 
	EXECUTE pr_upd_mcontact #@g00711 
	USING tbl_contact.contact_id, #@g00711 
	tbl_contact.valid_from, #@g00711 
	tbl_contact.cmpy_code, #@g00711 
	tbl_contact.valid_to, #@g00711 
	tbl_contact.org_ind, #@g00711 
	tbl_contact.first_name, #@g00711 
	tbl_contact.first_name_up, #@g00711 
	tbl_contact.mid_name, #@g00711 
	tbl_contact.mid_name_up, #@g00711 
	tbl_contact.cust_code, #@g00711 
	tbl_contact.last_org_name, #@g00711 
	tbl_contact.last_org_name_up, #@g00711 
	tbl_contact.mod_user_id, #@g00711 
	tbl_contact.salutation, #@g00711 
	tbl_contact.initials, #@g00711 
	tbl_contact.user_defined1, #@g00711 
	tbl_contact.user_defined2, #@g00711 
	tbl_contact.title, #@g00711 
	tbl_contact.age_role_code, #@g00711 
	tbl_contact.sex_ind , #@g00712 
	pky.* #@g00713 

	WHENEVER ERROR CALL error_mngmt #@g00715 
	IF sqlca.sqlcode < 0 THEN #@g00716 

		LET lsql_stmt_status = -1 #@g00718 
	ELSE #@g00719 
		LET lsql_stmt_status = 0 #@g00720 
	END IF #@g00721 
	RETURN lsql_stmt_status #@g00722 
END FUNCTION ## sql_modify_contact #@g00723 

########################################################################		                                                 	#@G00725
## sql_delete_contact :delete current row in table contact 		                                                              	#@G00726
FUNCTION sql_suppress_contact(pky) #@g00727 
	DEFINE lsql_stmt_status SMALLINT #@g00728 
	DEFINE pky RECORD #@g00729 
		contact_seed BIGSERIAL #@g00730 
	END RECORD #@g00731 

	WHENEVER ERROR CONTINUE #@g00733 
	EXECUTE pr_del_mcontact #@g00734 
	USING pky.* #@g00735 

	WHENEVER ERROR CALL error_mngmt #@g00737 
	IF sqlca.sqlcode < 0 THEN #@g00738 
		LET lsql_stmt_status = -1 #@g00739 
	ELSE #@g00740 
		LET lsql_stmt_status=0 #@g00741 
	END IF #@g00742 
	RETURN lsql_stmt_status #@g00743 
END FUNCTION ## sql_suppress_contact #@g00744 

################################################################################		                                         	#@G00746
#   status_pk_contact : Check if primary key exists		                                                                      	#@G00747
# inbound parameter : record of primary key		                                                                              	#@G00748
# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00749
FUNCTION status_pk_contact(pky) #@g00750 
	DEFINE pky RECORD #@g00751 
		contact_seed BIGSERIAL #@g00752 
	END RECORD #@g00753 
	DEFINE pk_status INTEGER #@g00754 

	WHENEVER ERROR CONTINUE #@g00756 
	OPEN crs_pky_mcontact USING pky.* #@g00757 
	FETCH crs_pky_mcontact #@g00758 
	WHENEVER ERROR CALL error_mngmt #@g00759 

	CASE sqlca.sqlcode #@g00761 
		WHEN 0 #@g00762 
			LET pk_status = 1 #@g00763 
		WHEN 100 #@g00764 
			LET pk_status = 0 #@g00765 
		WHEN sqlca.sqlerrd[2] = 104 #@g00766 
			LET pk_status = -1 # RECORD locked #@g00767 
		WHEN sqlca.sqlcode < 0 #@g00768 
			LET pk_status = sqlca.sqlcode #@g00769 
	END CASE #@g00770 

	RETURN pk_status #@g00772 
END FUNCTION ## status_pk_contact #@g00773 

################################################################################################		                         	#@G00775
#   set_form_record_contact_f_contact: assigns table VALUES TO form fields VALUES		                                        	#@G00776
FUNCTION set_form_record_contact_f_contact(tbl_contents) #@g00777 
	DEFINE frm_contents RECORD #@g00778 
		cmpy_code CHAR(2), #@g00779 
		contact_id INTEGER, #@g00780 
		first_name CHAR(30), #@g00781 
		mid_name CHAR(30), #@g00782 
		last_org_name CHAR(50), #@g00783 
		initials CHAR(12), #@g00784 
		salutation CHAR(20), #@g00785 
		title CHAR(20), #@g00786 
		valid_to DATE, #@g00787 
		valid_from DATE #@g00788 
	END RECORD #@g00789 

	DEFINE tbl_contents RECORD #@g00791 
		contact_id INTEGER, #@g00792 
		valid_from DATE, #@g00793 
		cmpy_code CHAR(2), #@g00794 
		valid_to DATE, #@g00795 
		contact_seed BIGSERIAL, #@g00796 
		org_ind CHAR(1), #@g00797 
		first_name CHAR(30), #@g00798 
		first_name_up CHAR(30), #@g00799 
		mid_name CHAR(30), #@g00800 
		mid_name_up CHAR(30), #@g00801 
		cust_code CHAR(8), #@g00802 
		last_org_name CHAR(50), #@g00803 
		last_org_name_up CHAR(50), #@g00804 
		mod_user_id CHAR(8), #@g00805 
		salutation CHAR(20), #@g00806 
		initials CHAR(12), #@g00807 
		user_defined1 CHAR(30), #@g00808 
		user_defined2 CHAR(30), #@g00809 
		title CHAR(20), #@g00810 
		age_role_code INTEGER, #@g00811 
		sex_ind CHAR(1) #@g00812 
	END RECORD #@g00813 

	INITIALIZE frm_contents.* TO NULL #@g00815 
	LET frm_contents.cmpy_code = tbl_contact.cmpy_code #@g00816 
	LET frm_contents.contact_id = tbl_contact.contact_id #@g00817 
	LET frm_contents.first_name = tbl_contact.first_name #@g00818 
	LET frm_contents.mid_name = tbl_contact.mid_name #@g00819 
	LET frm_contents.last_org_name = tbl_contact.last_org_name #@g00820 
	LET frm_contents.initials = tbl_contact.initials #@g00821 
	LET frm_contents.salutation = tbl_contact.salutation #@g00822 
	LET frm_contents.title = tbl_contact.title #@g00823 
	LET frm_contents.valid_to = tbl_contact.valid_to #@g00824 
	LET frm_contents.valid_from = tbl_contact.valid_from #@g00825 
	#@G00826
	RETURN frm_contents.* #@g00827 
END FUNCTION ## set_form_record_contact_f_contact #@g00828 

################################################################################################		                         	#@G00830
## set_table_record_contact_contact: assigns form fields value TO table VALUES		                                           	#@G00831
FUNCTION set_table_record_contact_contact(mode,frm_contents) #@g00832 
	DEFINE MODE CHAR(1) #@g00833 
	DEFINE frm_contents RECORD #@g00834 
		cmpy_code CHAR(2), #@g00835 
		contact_id INTEGER, #@g00836 
		first_name CHAR(30), #@g00837 
		mid_name CHAR(30), #@g00838 
		last_org_name CHAR(50), #@g00839 
		initials CHAR(12), #@g00840 
		salutation CHAR(20), #@g00841 
		title CHAR(20), #@g00842 
		valid_to DATE, #@g00843 
		valid_from DATE #@g00844 
	END RECORD #@g00845 

	DEFINE tbl_contents RECORD #@g00847 
		contact_id INTEGER, #@g00848 
		valid_from DATE, #@g00849 
		cmpy_code CHAR(2), #@g00850 
		valid_to DATE, #@g00851 
		contact_seed BIGSERIAL, #@g00852 
		org_ind CHAR(1), #@g00853 
		first_name CHAR(30), #@g00854 
		first_name_up CHAR(30), #@g00855 
		mid_name CHAR(30), #@g00856 
		mid_name_up CHAR(30), #@g00857 
		cust_code CHAR(8), #@g00858 
		last_org_name CHAR(50), #@g00859 
		last_org_name_up CHAR(50), #@g00860 
		mod_user_id CHAR(8), #@g00861 
		salutation CHAR(20), #@g00862 
		initials CHAR(12), #@g00863 
		user_defined1 CHAR(30), #@g00864 
		user_defined2 CHAR(30), #@g00865 
		title CHAR(20), #@g00866 
		age_role_code INTEGER, #@g00867 
		sex_ind CHAR(1) #@g00868 
	END RECORD #@g00869 

	INITIALIZE tbl_contents.* TO NULL #@g00871 
	LET tbl_contents.contact_id = frm_contact.contact_id #@g00872 
	LET tbl_contents.valid_from = frm_contact.valid_from #@g00873 
	LET tbl_contents.cmpy_code = frm_contact.cmpy_code #@g00874 
	LET tbl_contents.valid_to = frm_contact.valid_to #@g00875 
	IF MODE = "I" THEN #@g00876 
		LET tbl_contents.contact_seed = 0 #@g00877 
	END IF #@g00878 
	# LET tbl_contents.org_ind = your value		                                                                                  	#@G00879
	LET tbl_contents.first_name = frm_contact.first_name #@g00880 
	# LET tbl_contents.first_name_up = your value		                                                                            	#@G00881
	LET tbl_contents.mid_name = frm_contact.mid_name #@g00882 
	# LET tbl_contents.mid_name_up = your value		                                                                              	#@G00883
	# LET tbl_contents.cust_code = your value		                                                                                	#@G00884
	LET tbl_contents.last_org_name = frm_contact.last_org_name #@g00885 
	# LET tbl_contents.last_org_name_up = your value		                                                                         	#@G00886
	# LET tbl_contents.mod_user_id = your value		                                                                              	#@G00887
	LET tbl_contents.salutation = frm_contact.salutation #@g00888 
	LET tbl_contents.initials = frm_contact.initials #@g00889 
	# LET tbl_contents.user_defined1 = your value		                                                                            	#@G00890
	# LET tbl_contents.user_defined2 = your value		                                                                            	#@G00891
	LET tbl_contents.title = frm_contact.title #@g00892 
	# LET tbl_contents.age_role_code = your value		                                                                            	#@G00893
	# LET tbl_contents.sex_ind = your value		                                                                                  	#@G00894
	#@G00895

	RETURN tbl_contents.* #@g00897 
END FUNCTION ## set_table_record_contact_contact #@g00898 

#@G00900

#@G00902

#@G00904
