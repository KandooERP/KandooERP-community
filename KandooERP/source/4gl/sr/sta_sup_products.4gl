# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-08-18 11:56:13		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE pky_supported_products RECORD #@g00008 
	cmpy_code CHAR(2), #@g00009 
	prd_code CHAR(13) #@g00010 
END RECORD #@g00011 

DEFINE tbl_sup_products RECORD #@g00013 
	cmpy_code CHAR(2), #@g00014 
	prd_code CHAR(13), #@g00015 
	prd_barcode VARCHAR(128), #@g00016 
	prd_name CHAR(40), #@g00017 
	prd_family CHAR(6), #@g00018 
	prd_subfam CHAR(6), #@g00019 
	prd_category CHAR(6), #@g00020 
	prd_end_support_date DATE #@g00021 
END RECORD #@g00022 

DEFINE frm_sup_products RECORD #@g00024 
	cmpy_code CHAR(2), #@g00025 
	prd_code CHAR(13), #@g00026 
	prd_barcode VARCHAR(128), #@g00027 
	prd_name CHAR(40), #@g00028 
	prd_family CHAR(6), #@g00029 
	prd_subfam CHAR(6), #@g00030 
	prd_category CHAR(6), #@g00031 
	prd_end_support_date DATE #@g00032 
END RECORD #@g00033 

DEFINE sav_sup_products RECORD #@g00035 
	cmpy_code CHAR(2), #@g00036 
	prd_code CHAR(13), #@g00037 
	prd_barcode VARCHAR(128), #@g00038 
	prd_name CHAR(40), #@g00039 
	prd_family CHAR(6), #@g00040 
	prd_subfam CHAR(6), #@g00041 
	prd_category CHAR(6), #@g00042 
	prd_end_support_date DATE #@g00043 
END RECORD #@g00044 

#@G00046

MAIN #@g00048 
	DEFER interrupt #@g00049 
	#OPTIONS		                                                                                                                 	#@G00050
	#help file "sup_products.iem",		                                                                                           	#@G00051
	#help key F1		                                                                                                             	#@G00052

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00054
	CALL ui_init(0) 		                                                                                                      	#@G00055
	LET m_program="p_sup_products_supported_products" #@g00056 

	CALL main_sup_products_supported_products() #@g00058 

END MAIN #@g00060 

#######################################################		                                                                  	#@G00062
# definition variable sccs		                                                                                               	#@G00063
FUNCTION mc_sup_products_sccs() #@g00064 
	DEFINE sccs_var CHAR(70) #@g00065 
	LET sccs_var="%W% %D%" #@g00066 
END FUNCTION #@g00067 


FUNCTION main_sup_products_supported_products () #@g00070 

	--CALL init_program("kandoodb",m_program) #@g00072 

	OPEN WINDOW f_sup_products with FORM "f_sup_products" attributes(border) #@g00074 

	CALL init_cursor_sup_products_supported_products () # INITIALIZE all cursors ON master TABLE #@g00076 
	#@G00076

	CALL menu_sup_products_supported_products() #@g00078 

	CLOSE WINDOW f_sup_products #@g00080 

END FUNCTION #@g00082 

######################################################################		                                                   	#@G00084
# menu_sup_products_supported_products		                                                                                   	#@G00085
# the top level menu 		                                                                                                    	#@G00086
# INPUT arguments: none		                                                                                                  	#@G00087
# OUTPUT arguments: none		                                                                                                 	#@G00088
FUNCTION menu_sup_products_supported_products () #@g00089 
	DEFINE nbsel_supported_products INTEGER #@g00090 
	DEFINE sql_stmt_status INTEGER #@g00091 
	DEFINE record_num INTEGER #@g00092 
	DEFINE ACTION SMALLINT #@g00093 
	DEFINE xnumber SMALLINT #@g00094 
	DEFINE arr_elem_num SMALLINT #@g00095 

	LET nbsel_supported_products = 0 #@g00097 
	MENU "supported_products" #@g00098 
		BEFORE MENU #@g00099 
			HIDE option "Next","Previous" #@g00100 
		COMMAND "Query" "Query data with multiple criteria supported_products" #@g00101 
			#HELP 1000		                                                                                                              	#@G00102
			MESSAGE "" #@g00103 
			INITIALIZE frm_sup_products.* TO NULL #@g00104 
			DISPLAY BY NAME frm_sup_products.* #@g00105 
			HIDE option "Next","Previous" #@g00106 

			#@G00107

			CALL query_supported_products() RETURNING nbsel_supported_products #@g00109 
			IF nbsel_supported_products <>0 THEN #@g00110 
				LET sql_stmt_status = sql_nxtprev_supported_products(1) #@g00111 
				LET record_num = 1 #@g00112 
				DISPLAY BY NAME frm_sup_products.* #@g00113 
				IF nbsel_supported_products > 1 THEN #@g00114 
					SHOW option "Next" #@g00115 
					NEXT option "Next" #@g00116 
				END IF #@g00117 
				#@G00117
				#@G00117
				NEXT option "Next" #@g00118 
			ELSE #@g00119 
				ERROR "No row matches the criteria" #@g00120 
				NEXT option "Query" #@g00121 
			END IF #@g00122 

		COMMAND "Next" "DISPLAY Next RECORD supported_products" #@g00124 
			#HELP 2000		                                                                                                              	#@G00125
			MESSAGE "" #@g00126 
			INITIALIZE frm_sup_products.* TO NULL #@g00127 
			DISPLAY BY NAME frm_sup_products.* #@g00128 
			#@G00128

			IF nbsel_supported_products AND record_num < nbsel_supported_products THEN #@g00130 
				LET sql_stmt_status = sql_nxtprev_supported_products(1) #@g00131 
				LET record_num = record_num + 1 #@g00132 
				CASE #@g00133 
					WHEN sql_stmt_status = 0 #@g00134 
						ERROR "FETCH Last RECORD of this selection supported_products" #@g00135 
					WHEN sql_stmt_status = -1 #@g00136 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00137 
					WHEN sql_stmt_status = 1 #@g00138 
						DISPLAY BY NAME frm_sup_products.* #@g00139 
						IF record_num >= nbsel_supported_products THEN #@g00140 
							HIDE option "Next" #@g00141 
						END IF #@g00142 
						IF record_num > 1 THEN #@g00143 
							SHOW option "Previous" #@g00144 
						ELSE #@g00145 
							HIDE option "Previous" #@g00146 
						END IF #@g00147 
						#@G00147
						#@G00147
				END CASE #@g00148 
			ELSE #@g00149 
				ERROR " Please SET query criteria previously supported_products " #@g00150 
				NEXT option "Query" #@g00151 
			END IF #@g00152 

		COMMAND "Previous" "DISPLAY Previous RECORD supported_products" #@g00154 
			#HELP 3000		                                                                                                              	#@G00155
			MESSAGE "" #@g00156 
			INITIALIZE frm_sup_products.* TO NULL #@g00157 
			DISPLAY BY NAME frm_sup_products.* #@g00158 
			#@G00158

			IF nbsel_supported_products THEN #@g00160 
				LET sql_stmt_status = sql_nxtprev_supported_products(-1) #@g00161 
				CASE #@g00162 
					WHEN sql_stmt_status = 0 #@g00163 
						ERROR "FETCH First RECORD of this selection supported_products" #@g00164 
					WHEN sql_stmt_status < -1 #@g00165 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00166 
					WHEN sql_stmt_status = 1 #@g00167 
						LET record_num = record_num - 1 #@g00168 
						CALL set_form_record_sup_products_f_sup_products(tbl_sup_products.*) #@g00169 
						RETURNING frm_sup_products.* #@g00170 
						DISPLAY BY NAME frm_sup_products.* #@g00171 
						IF record_num = 1 THEN #@g00172 
							HIDE option "Previous" #@g00173 
						END IF #@g00174 
						IF record_num < nbsel_supported_products THEN #@g00175 
							SHOW option "Next" #@g00176 
						ELSE #@g00177 
							HIDE option "Next" #@g00178 
						END IF #@g00179 
						#@G00179
						#@G00179
				END CASE #@g00180 
			ELSE #@g00181 
				ERROR " Please SET query criteria previously supported_products " #@g00182 
				NEXT option "Query" #@g00183 
			END IF #@g00184 

			#@G00185

		COMMAND "Add" "Add a new RECORD supported_products" #@g00187 
			#HELP 3000		                                                                                                              	#@G00188
			MESSAGE "" #@g00189 
			CALL add_supported_products() #@g00190 
			MESSAGE "" #@g00191 

		COMMAND "Edit" "Modify current RECORD supported_products" #@g00193 
			#HELP 4000		                                                                                                              	#@G00194
			MESSAGE "" #@g00195 
			IF nbsel_supported_products THEN #@g00196 
				IF status_pk_supported_products(pky_supported_products.*) < 0 THEN #@g00197 
					ERROR "IS locked " #@g00198 
					NEXT option "Next" #@g00199 
				ELSE #@g00200 
					LET sql_stmt_status = modify_supported_products(pky_supported_products.*) #@g00201 
				END IF #@g00202 
			ELSE #@g00203 
				ERROR " Please SET query criteria previously supported_products " #@g00204 
				NEXT option "Query" #@g00205 
			END IF #@g00206 

		COMMAND "Suppress" "Suppress current RECORD supported_products" #@g00208 
			#HELP 5000		                                                                                                              	#@G00209
			MESSAGE "" #@g00210 
			IF nbsel_supported_products THEN #@g00211 
				IF status_pk_supported_products(pky_supported_products.*) < 0 THEN #@g00212 
					ERROR "IS locked " #@g00213 
					NEXT option "Next" #@g00214 
				END IF #@g00215 
				WHILE true #@g00216 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00217 
					CASE #@g00218 
						WHEN ACTION = 0 OR ACTION = 1 #@g00219 
							EXIT WHILE # degage abandon #@g00220 
						WHEN ACTION = 2 #@g00221 
							CALL suppress_supported_products(pky_supported_products.*) #@g00222 
							RETURNING sql_stmt_status #@g00223 
							EXIT WHILE #@g00224 
					END CASE #@g00225 
				END WHILE #@g00226 
			ELSE #@g00227 
				ERROR "Please SET query criteria previously supported_products " #@g00228 
				NEXT option "Query" #@g00229 
			END IF #@g00230 


		COMMAND "Exit" "EXIT PROGRAM" #@g00233 
			##HELP 9000		                                                                                                              	#@G00234
			MESSAGE "" #@g00235 
			EXIT MENU #@g00236 
	END MENU #@g00237 
END FUNCTION #@g00238 

#######################################################################		                                                  	#@G00240
#    Query_supported_products : Query By Example on table supported_products		                                             	#@G00241
# INPUT selection criteria,		                                                                                              	#@G00242
# PREPARE the query,		                                                                                                     	#@G00243
# OPEN the data SET		                                                                                                      	#@G00244
#######################################################################		                                                  	#@G00245
FUNCTION query_supported_products() #@g00246 
	DEFINE rec_supported_products,where_clause CHAR(1000) #@g00247 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00248 
	DEFINE l_pky RECORD #@g00249 
		cmpy_code CHAR(2), #@g00250 
		prd_code CHAR(13) #@g00251 
	END RECORD #@g00252 
	DEFINE reply CHAR(1) #@g00253 
	LET xnumber = 0 #@g00254 
	MESSAGE "Please INPUT query criteria" #@g00255 
	# INITIALIZE RECORD AND DISPLAY blank		                                                                                   	#@G00256
	INITIALIZE frm_sup_products.* TO NULL #@g00257 
	DISPLAY BY NAME frm_sup_products.* #@g00258 
	#@G00258

	CONSTRUCT BY NAME where_clause ON supported_products.cmpy_code, #@g00260 
	supported_products.prd_code, #@g00261 
	supported_products.prd_barcode, #@g00262 
	supported_products.prd_name, #@g00263 
	supported_products.prd_family, #@g00264 
	supported_products.prd_subfam, #@g00265 
	supported_products.prd_category, #@g00266 
	supported_products.prd_end_support_date #@g00267 

	#@G00268

	## Check whether criteria have been entered		                                                                             	#@G00270
		AFTER CONSTRUCT #@g00271 
			IF NOT field_touched(supported_products.*) AND NOT int_flag THEN #@g00272 
				PROMPT "SELECT all rows, are you sure? " FOR CHAR reply #@g00273 
				CASE #@g00274 
					WHEN reply matches "[Oo]" #@g00275 
						EXIT CONSTRUCT #@g00276 
					OTHERWISE # saisie d'un critere de selection #@g00277 
						ERROR "Please INPUT a least one criteria" #@g00278 
						CONTINUE CONSTRUCT #@g00279 
				END CASE #@g00280 
			END IF #@g00281 
	END CONSTRUCT #@g00282 

	IF int_flag = true THEN #@g00284 
		MESSAGE "Quit with quit key" #@g00285 
		LET int_flag=0 #@g00286 
	ELSE #@g00287 
		LET xnumber = build_qbe_count_supported_products(where_clause) #@g00288 
		IF xnumber > 0 THEN #@g00289 
			LET sql_stmt_status = build_qbe_row_contents_supported_products(where_clause) #@g00290 
		ELSE #@g00291 
			RETURN -1 #@g00292 
		END IF #@g00293 

	END IF #@g00295 
	RETURN xnumber #@g00296 
END FUNCTION ## query_supported_products #@g00297 

####################################################################		                                                     	#@G00299
## Add_supported_products: add a new supported_products row		                                                              	#@G00300
FUNCTION add_supported_products() #@g00301 
	DEFINE sql_stmt_status SMALLINT #@g00302 
	DEFINE row_count SMALLINT #@g00303 
	DEFINE nbre_supported_products ,action SMALLINT #@g00304 
	#@G00304
	INITIALIZE pky_supported_products.* TO NULL #@g00305 
	INITIALIZE tbl_sup_products.* TO NULL #@g00306 
	INITIALIZE frm_sup_products.* TO NULL #@g00307 
	INITIALIZE sav_sup_products.* TO NULL #@g00308 
	#@G00308
	WHILE true #@g00309 
		LET int_flag = false #@g00310 

		BEGIN WORK #@g00312 
			#@G00312
			INPUT BY NAME frm_sup_products.cmpy_code, #@g00313 
			frm_sup_products.prd_code, #@g00314 
			frm_sup_products.prd_barcode, #@g00315 
			frm_sup_products.prd_name, #@g00316 
			frm_sup_products.prd_family, #@g00317 
			frm_sup_products.prd_subfam, #@g00318 
			frm_sup_products.prd_category, #@g00319 
			frm_sup_products.prd_end_support_date #@g00320 

				AFTER FIELD prd_code #@g00322 
					IF status_pk_supported_products(frm_sup_products.cmpy_code,frm_sup_products.prd_code) THEN #@g00323 
						ERROR "supported_products: already exists" #@g00324 
						NEXT FIELD prd_code #@g00325 
					END IF #@g00326 
					#@G00327
					#@G00327

					#@G00328
					#@G00328
			END INPUT #@g00329 
			IF int_flag = true THEN #@g00330 
				# Resign FROM INPUT		                                                                                                   	#@G00331
				LET int_flag=false #@g00332 
				LET frm_sup_products.* = sav_sup_products.* #@g00333 
				DISPLAY BY NAME frm_sup_products.* #@g00334 
				MESSAGE "Quit with quit key Control-C" #@g00335 
				ROLLBACK WORK #@g00336 
				#@G00336
				EXIT WHILE #@g00337 
			END IF #@g00338 

			CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00340 
			CASE ACTION #@g00341 
				WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00342 
					CONTINUE WHILE # ON laisse tout affiche comme tel #@g00343 

				WHEN 2 # ON valide la transaction #@g00345 
					CALL set_table_record_sup_products_supported_products("I",frm_sup_products.*) #@g00346 
					RETURNING tbl_sup_products.* #@g00347 
					CALL sql_add_supported_products() RETURNING sql_stmt_status #@g00348 

					CASE #@g00350 
						WHEN sql_stmt_status = 0 #@g00351 
							MESSAGE "Add Successful operation" #@g00352 
						COMMIT WORK #@g00353 
						#@G00353
						WHEN sql_stmt_status < 0 #@g00354 
							CALL display_eric_error("Add supported_products:failed ") #@g00355 
							ROLLBACK WORK #@g00356 
							#@G00356
					END CASE #@g00357 
					EXIT WHILE #@g00358 

				WHEN 0 #@g00360 
					EXIT WHILE #@g00361 
			END CASE #@g00362 
		END WHILE #@g00363 
		RETURN sql_stmt_status #@g00364 
END FUNCTION ## add_supported_products #@g00365 


#######################################################################		                                                  	#@G00368
# Modify_supported_products : Edit a supported_products RECORD		                                                           	#@G00369
# inbound: table primary key		                                                                                             	#@G00370
FUNCTION modify_supported_products(pky) #@g00371 
	DEFINE ACTION SMALLINT #@g00372 
	DEFINE sql_stmt_status SMALLINT #@g00373 
	#@G00373
	DEFINE row_count SMALLINT #@g00374 
	DEFINE pky RECORD #@g00375 
		cmpy_code CHAR(2), #@g00376 
		prd_code CHAR(13) #@g00377 
	END RECORD #@g00378 

	## check IF RECORD can be accessed		                                                                                      	#@G00380
	WHILE true #@g00381 
		LET int_flag = false #@g00382 
		# Save Screen RECORD VALUES before altering		                                                                            	#@G00383
		LET sav_sup_products.* = frm_sup_products.* #@g00384 
		BEGIN WORK #@g00385 
			#@G00385

			INPUT BY NAME frm_sup_products.prd_barcode, #@g00387 
			frm_sup_products.prd_name, #@g00388 
			frm_sup_products.prd_family, #@g00389 
			frm_sup_products.prd_subfam, #@g00390 
			frm_sup_products.prd_category, #@g00391 
			frm_sup_products.prd_end_support_date #@g00392 
			WITHOUT DEFAULTS #@g00393 
			#@G00393

			#@G00394

			#@G00395
			END INPUT #@g00396 
			IF int_flag = true THEN #@g00397 
				LET int_flag=false #@g00398 
				# Restore previous value		                                                                                              	#@G00399
				LET frm_sup_products.* = sav_sup_products.* #@g00400 
				DISPLAY BY NAME frm_sup_products.* #@g00401 
				MESSAGE "$CancelCom Control-C" #@g00402 
				ROLLBACK WORK #@g00403 
				#@G00403
				EXIT WHILE #@g00404 
			END IF #@g00405 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00407 

			CASE #@g00409 
				WHEN ACTION = 0 #@g00410 
					# Resign, restore previous VALUES		                                                                                     	#@G00411
					LET frm_sup_products.* = sav_sup_products.* #@g00412 
					DISPLAY BY NAME frm_sup_products.* #@g00413 
					EXIT WHILE # CANCEL operation #@g00414 

				WHEN ACTION = 1 #@g00416 
					# Redo		                                                                                                                	#@G00417
					CONTINUE WHILE #@g00418 

				WHEN ACTION = 2 #@g00420 
					# confirm UPDATE		                                                                                                      	#@G00421
					CALL set_table_record_sup_products_supported_products("U",frm_sup_products.*) #@g00422 
					RETURNING tbl_sup_products.* #@g00423 
					LET sql_stmt_status = sql_modify_supported_products(pky.*) #@g00424 
					CASE #@g00425 
						WHEN sql_stmt_status = 0 #@g00426 
							MESSAGE "Modify Successful operation" #@g00427 
						COMMIT WORK #@g00428 
						#@G00428
						WHEN sql_stmt_status < 0 #@g00429 
							CALL display_eric_error("Modify supported_products:failed ") #@g00430 
							ROLLBACK WORK #@g00431 
							#@G00431
					END CASE #@g00432 
					EXIT WHILE #@g00433 
			END CASE #@g00434 
		END WHILE #@g00435 
		RETURN sql_stmt_status #@g00436 
END FUNCTION ## modify_supported_products(pky) #@g00437 


#######################################################################		                                                  	#@G00440
# DELETE A supported_products row		                                                                                        	#@G00441
# inbound: table primary key		                                                                                             	#@G00442
FUNCTION suppress_supported_products(pky) #@g00443 
	DEFINE ACTION SMALLINT #@g00444 
	DEFINE sql_stmt_status SMALLINT #@g00445 
	DEFINE pky RECORD #@g00446 
		cmpy_code CHAR(2), #@g00447 
		prd_code CHAR(13) #@g00448 
	END RECORD #@g00449 

	WHILE true #@g00451 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00452 
		BEGIN WORK #@g00453 
			#@G00453
			CASE #@g00454 
				WHEN ACTION = 0 OR ACTION = 1 #@g00455 
					EXIT WHILE # degage abandon #@g00456 
				WHEN ACTION = 2 #@g00457 
					CALL sql_suppress_supported_products(pky.*) RETURNING sql_stmt_status #@g00458 
					CASE #@g00459 
						WHEN sql_stmt_status = 0 #@g00460 
							MESSAGE "Suppress Successful operation" #@g00461 
						COMMIT WORK #@g00462 
						#@G00462
						INITIALIZE frm_sup_products.* TO NULL #@g00463 
						DISPLAY BY NAME frm_sup_products.* #@g00464 
						#@G00464
						WHEN sql_stmt_status < 0 #@g00465 
							CALL display_eric_error("Suppress supported_products:failed ") #@g00466 
							ROLLBACK WORK #@g00467 
							#@G00467
					END CASE #@g00468 
					EXIT WHILE #@g00469 
			END CASE #@g00470 
		END WHILE #@g00471 
		RETURN sql_stmt_status #@g00472 
END FUNCTION ## suppress_supported_products(pky) #@g00473 

#########################################################################		                                                	#@G00475
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00476
FUNCTION init_cursor_sup_products_supported_products () #@g00477 
	DEFINE req_text CHAR(1500) #@g00478 

	# PREPARE CURSOR FOR full master table row contents, access by primary key		                                              	#@G00480
	LET req_text= #@g00481 
	"SELECT cmpy_code,prd_code,prd_barcode,prd_name,prd_family,prd_subfam,prd_category,prd_end_support_date ", #@g00482 
	" FROM supported_products ", #@g00483 
	"WHERE cmpy_code = ? 
	AND prd_code = ? " #@G00485 

	PREPARE sel_mrw_msupported_products FROM req_text #@g00487 
	DECLARE crs_row_msupported_products CURSOR FOR sel_mrw_msupported_products #@g00488 

	# PREPARE CURSOR FOR row test / check IF locked		                                                                         	#@G00490
	LET req_text= "SELECT cmpy_code,prd_code ", #@g00491 
	" FROM supported_products ", #@g00492 
	" WHERE cmpy_code = ? 
	AND prd_code = ? " #@G00494 

	PREPARE sel_pky_msupported_products FROM req_text #@g00496 
	DECLARE crs_pky_msupported_products CURSOR FOR sel_pky_msupported_products #@g00497 

	# PREPARE INSERT statement		                                                                                              	#@G00499
	LET req_text = #@g00500 
	"INSERT INTO supported_products ( cmpy_code,prd_code,prd_barcode,prd_name,prd_family,prd_subfam,prd_category,prd_end_support_date )", #@g00501 
	" VALUES ( ?,?,?,?,?,?,?,? )" #@g00502 
	PREPARE pr_ins_msupported_products FROM req_text #@g00503 

	# PREPARE UPDATE statement		                                                                                              	#@G00505
	LET req_text= #@g00506 
	"UPDATE supported_products ", #@g00507 
	"SET ( prd_barcode,prd_name,prd_family,prd_subfam,prd_category,prd_end_support_date )", #@g00508 
	" = ( ?,?,?,?,?,? )", #@g00509 
	" WHERE cmpy_code = ? 
	AND prd_code = ? " #@G00511 
	PREPARE pr_upd_msupported_products FROM req_text #@g00512 

	# PREPARE DELETE statement		                                                                                              	#@G00514
	LET req_text= "DELETE FROM supported_products ", #@g00515 
	" WHERE cmpy_code = ? 
	AND prd_code = ? " #@G00517 

	PREPARE pr_del_msupported_products FROM req_text #@g00519 

END FUNCTION ## init_cursor_sup_products_supported_products #@g00521 


#########################################################		                                                                	#@G00524
# Open the QBE CURSOR,		                                                                                                   	#@G00525
# counts returned rows_count,		                                                                                            	#@G00526
# OPEN the data SET,		                                                                                                     	#@G00527
# FETCH first row		                                                                                                        	#@G00528
# inbound parameter: query predicate		                                                                                     	#@G00529
# outbound parameters: number of rows retried		                                                                            	#@G00530
FUNCTION build_qbe_count_supported_products(qry_stmt) #@g00531 
	DEFINE qry_stmt CHAR(500) #@g00532 
	DEFINE rec_supported_products CHAR(1000) #@g00533 
	DEFINE row_count INTEGER #@g00534 
	DEFINE lsql_stmt_status INTEGER #@g00535 

	# DEFINE primary_key record		                                                                                             	#@G00537
	DEFINE l_pky RECORD #@g00538 
		cmpy_code CHAR(2), #@g00539 
		prd_code CHAR(13) #@g00540 
	END RECORD #@g00541 

	LET rec_supported_products = #@g00543 
	"SELECT count(*) FROM supported_products", #@g00544 
	" WHERE ",qry_stmt clipped #@g00545 

	PREPARE rec_nbr_msupported_products FROM rec_supported_products #@g00547 
	DECLARE crs_nbr_msupported_products CURSOR FOR rec_nbr_msupported_products #@g00548 

	WHENEVER ERROR CONTINUE #@g00550 
	OPEN crs_nbr_msupported_products #@g00551 
	FETCH crs_nbr_msupported_products INTO row_count #@g00552 
	WHENEVER ERROR CALL error_mngmt #@g00553 

	# IF FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00555
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00556 
		LET row_count =0 #@g00557 
	END IF #@g00558 
	RETURN row_count #@g00559 
END FUNCTION ## build_qbe_count_supported_products #@g00560 

#########################################################		                                                                	#@G00562
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00563
# Declare AND OPEN the CURSOR		                                                                                            	#@G00564
# inbound param: query predicate		                                                                                         	#@G00565
#outbound parameter: query STATUS		                                                                                        	#@G00566
FUNCTION build_qbe_row_contents_supported_products(qry_stmt) #@g00567 
	DEFINE qry_stmt CHAR(500) #@g00568 
	DEFINE rec_supported_products CHAR(1000) #@g00569 
	DEFINE row_count INTEGER #@g00570 
	DEFINE lsql_stmt_status INTEGER #@g00571 

	# DEFINE primary_key record		                                                                                             	#@G00573
	DEFINE l_pky RECORD #@g00574 
		cmpy_code CHAR(2), #@g00575 
		prd_code CHAR(13) #@g00576 
	END RECORD #@g00577 

	# DISPLAY the selected columns		                                                                                          	#@G00579

	LET rec_supported_products = "SELECT cmpy_code,prd_code ", #@g00581 
	" FROM supported_products ", #@g00582 
	"WHERE ",qry_stmt clipped #@g00583 
	PREPARE rech_msupported_products FROM rec_supported_products #@g00584 

	# crs_scrl_msupported_products : the first CURSOR selects all the primary keys (NOT all the table columns)		              	#@G00586

	DECLARE crs_scrl_msupported_products SCROLL CURSOR with HOLD FOR rech_msupported_products #@g00588 

	WHENEVER ERROR CONTINUE #@g00590 
	OPEN crs_scrl_msupported_products #@g00591 
	WHENEVER ERROR CALL error_mngmt #@g00592 

	RETURN sqlca.sqlcode #@g00594 
END FUNCTION ## build_qbe_row_contents_supported_products #@g00595 

#######################################################################		                                                  	#@G00597
# sql_nxtprev_supported_products : FETCH NEXT OR PREVIOUS RECORD		                                                         	#@G00598
FUNCTION sql_nxtprev_supported_products(offset) #@g00599 
	DEFINE offset SMALLINT #@g00600 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00601 
	DEFINE pky RECORD #@g00602 
		cmpy_code CHAR(2), #@g00603 
		prd_code CHAR(13) #@g00604 
	END RECORD #@g00605 

	WHENEVER ERROR CONTINUE #@g00607 
	FETCH relative offset crs_scrl_msupported_products INTO pky_supported_products.* #@g00608 
	WHENEVER ERROR CALL error_mngmt #@g00609 

	CASE #@g00611 
		WHEN sqlca.sqlcode = 100 #@g00612 
			LET record_found = 0 #@g00613 
		WHEN sqlca.sqlcode < 0 #@g00614 
			LET record_found = -1 #@g00615 
		OTHERWISE #@g00616 
			LET lsql_stmt_status = 1 #@g00617 
			CALL sql_fetch_mrw_supported_products (pky_supported_products.*) #@g00618 
			RETURNING record_found #@g00619 

	END CASE #@g00621 
	RETURN record_found #@g00622 
END FUNCTION ## sql_nxtprev_supported_products #@g00623 

########################################################################		                                                 	#@G00625
# sql_FETCH_mrw_supported_products : read a complete row accessing by primary key		                                        	#@G00626
# inbound parameter : primary key		                                                                                        	#@G00627
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00628
FUNCTION sql_fetch_mrw_supported_products(pky_supported_products) #@g00629 
	DEFINE sql_stmt_status SMALLINT #@g00630 
	DEFINE pky_supported_products RECORD #@g00631 
		cmpy_code CHAR(2), #@g00632 
		prd_code CHAR(13) #@g00633 
	END RECORD #@g00634 
	#@G00634

	# read the table, access on primary key		                                                                                 	#@G00636
	WHENEVER ERROR CONTINUE #@g00637 
	OPEN crs_row_msupported_products #@g00638 
	USING pky_supported_products.* #@g00639 

	FETCH crs_row_msupported_products INTO tbl_sup_products.* #@g00641 

	WHENEVER ERROR CALL error_mngmt #@g00643 
	CASE #@g00644 
		WHEN sqlca.sqlcode = 100 #@g00645 
			LET sql_stmt_status = 0 #@g00646 
		WHEN sqlca.sqlcode < 0 #@g00647 
			LET sql_stmt_status = -1 #@g00648 
		OTHERWISE #@g00649 
			LET sql_stmt_status = 1 #@g00650 
			CALL set_form_record_sup_products_f_sup_products(tbl_sup_products.*) #@g00651 
			RETURNING frm_sup_products.* #@g00652 
			#@G00652
	END CASE #@g00653 
	RETURN sql_stmt_status #@g00654 
END FUNCTION ## sql_fetch_mrw_supported_products #@g00655 

########################################################################		                                                 	#@G00657
## INSERT in table supported_products 		                                                                                   	#@G00658
########################################################################		                                                 	#@G00659
FUNCTION sql_add_supported_products() #@g00660 
	DEFINE lsql_stmt_status INTEGER #@g00661 
	DEFINE row_count SMALLINT #@g00662 
	WHENEVER ERROR CONTINUE #@g00663 
	EXECUTE pr_ins_msupported_products #@g00664 
	USING tbl_sup_products.cmpy_code, #@g00664 
	tbl_sup_products.prd_code, #@g00664 
	tbl_sup_products.prd_barcode, #@g00664 
	tbl_sup_products.prd_name, #@g00664 
	tbl_sup_products.prd_family, #@g00664 
	tbl_sup_products.prd_subfam, #@g00664 
	tbl_sup_products.prd_category, #@g00664 
	tbl_sup_products.prd_end_support_date # #@g00665 
	WHENEVER ERROR CALL error_mngmt #@g00666 

	IF sqlca.sqlcode < 0 THEN #@g00668 
		LET lsql_stmt_status = -1 #@g00669 
	ELSE #@g00670 
		LET lsql_stmt_status = 0 #@g00671 
	END IF #@g00672 
	RETURN lsql_stmt_status #@g00673 
END FUNCTION ## sql_add_supported_products #@g00674 

########################################################################		                                                 	#@G00676
## sql_Modify_supported_products :UPDATE supported_products record		                                                       	#@G00677
FUNCTION sql_modify_supported_products(pky) #@g00678 
	DEFINE lsql_stmt_status INTEGER #@g00679 
	DEFINE pky RECORD #@g00680 
		cmpy_code CHAR(2), #@g00681 
		prd_code CHAR(13) #@g00682 
	END RECORD #@g00683 

	WHENEVER ERROR CONTINUE #@g00685 
	EXECUTE pr_upd_msupported_products #@g00686 
	USING tbl_sup_products.prd_barcode, #@g00686 
	tbl_sup_products.prd_name, #@g00686 
	tbl_sup_products.prd_family, #@g00686 
	tbl_sup_products.prd_subfam, #@g00686 
	tbl_sup_products.prd_category, #@g00686 
	tbl_sup_products.prd_end_support_date , #@g00687 
	pky.* #@g00688 

	WHENEVER ERROR CALL error_mngmt #@g00690 
	IF sqlca.sqlcode < 0 THEN #@g00691 

		LET lsql_stmt_status = -1 #@g00693 
	ELSE #@g00694 
		LET lsql_stmt_status = 0 #@g00695 
	END IF #@g00696 
	RETURN lsql_stmt_status #@g00697 
END FUNCTION ## sql_modify_supported_products #@g00698 

########################################################################		                                                 	#@G00700
## sql_delete_supported_products :delete current row in table supported_products 		                                        	#@G00701
FUNCTION sql_suppress_supported_products(pky) #@g00702 
	DEFINE lsql_stmt_status SMALLINT #@g00703 
	DEFINE pky RECORD #@g00704 
		cmpy_code CHAR(2), #@g00705 
		prd_code CHAR(13) #@g00706 
	END RECORD #@g00707 

	WHENEVER ERROR CONTINUE #@g00709 
	EXECUTE pr_del_msupported_products #@g00710 
	USING pky.* #@g00711 

	WHENEVER ERROR CALL error_mngmt #@g00713 
	IF sqlca.sqlcode < 0 THEN #@g00714 
		LET lsql_stmt_status = -1 #@g00715 
	ELSE #@g00716 
		LET lsql_stmt_status=0 #@g00717 
	END IF #@g00718 
	RETURN lsql_stmt_status #@g00719 
END FUNCTION ## sql_suppress_supported_products #@g00720 

################################################################################		                                         	#@G00722
#   status_pk_supported_products : Check IF primary key exists		                                                           	#@G00723
# inbound parameter : RECORD of primary key		                                                                              	#@G00724
# outbound parameter:  STATUS > 0  IF exists, 0 IF no record, < 0 IF error		                                               	#@G00725
FUNCTION status_pk_supported_products(pky) #@g00726 
	DEFINE pky RECORD #@g00727 
		cmpy_code CHAR(2), #@g00728 
		prd_code CHAR(13) #@g00729 
	END RECORD #@g00730 
	DEFINE pk_status INTEGER #@g00731 

	WHENEVER ERROR CONTINUE #@g00733 
	OPEN crs_pky_msupported_products USING pky.* #@g00734 
	FETCH crs_pky_msupported_products #@g00735 
	WHENEVER ERROR CALL error_mngmt #@g00736 

	CASE sqlca.sqlcode #@g00738 
		WHEN 0 #@g00739 
			LET pk_status = 1 #@g00740 
		WHEN 100 #@g00741 
			LET pk_status = 0 #@g00742 
		WHEN sqlca.sqlerrd[2] = 104 #@g00743 
			LET pk_status = -1 # RECORD locked #@g00744 
		WHEN sqlca.sqlcode < 0 #@g00745 
			LET pk_status = sqlca.sqlcode #@g00746 
	END CASE #@g00747 

	RETURN pk_status #@g00749 
END FUNCTION ## status_pk_supported_products #@g00750 

################################################################################################		                         	#@G00752
#   set_form_record_sup_products_f_sup_products: assigns table VALUES TO form fields VALUES		                              	#@G00753
FUNCTION set_form_record_sup_products_f_sup_products(tbl_contents) #@g00754 
	DEFINE frm_contents RECORD #@g00755 
		cmpy_code CHAR(2), #@g00756 
		prd_code CHAR(13), #@g00757 
		prd_barcode VARCHAR(128), #@g00758 
		prd_name CHAR(40), #@g00759 
		prd_family CHAR(6), #@g00760 
		prd_subfam CHAR(6), #@g00761 
		prd_category CHAR(6), #@g00762 
		prd_end_support_date DATE #@g00763 
	END RECORD #@g00764 

	DEFINE tbl_contents RECORD #@g00766 
		cmpy_code CHAR(2), #@g00767 
		prd_code CHAR(13), #@g00768 
		prd_barcode VARCHAR(128), #@g00769 
		prd_name CHAR(40), #@g00770 
		prd_family CHAR(6), #@g00771 
		prd_subfam CHAR(6), #@g00772 
		prd_category CHAR(6), #@g00773 
		prd_end_support_date DATE #@g00774 
	END RECORD #@g00775 

	INITIALIZE frm_contents.* TO NULL #@g00777 
	LET frm_contents.cmpy_code = tbl_sup_products.cmpy_code #@g00778 
	LET frm_contents.prd_code = tbl_sup_products.prd_code #@g00779 
	LET frm_contents.prd_barcode = tbl_sup_products.prd_barcode #@g00780 
	LET frm_contents.prd_name = tbl_sup_products.prd_name #@g00781 
	LET frm_contents.prd_family = tbl_sup_products.prd_family #@g00782 
	LET frm_contents.prd_subfam = tbl_sup_products.prd_subfam #@g00783 
	LET frm_contents.prd_category = tbl_sup_products.prd_category #@g00784 
	LET frm_contents.prd_end_support_date = tbl_sup_products.prd_end_support_date #@g00785 
	#@G00786
	RETURN frm_contents.* #@g00787 
END FUNCTION ## set_form_record_sup_products_f_sup_products #@g00788 

################################################################################################		                         	#@G00790
## set_table_record_sup_products_supported_products: assigns form fields value TO table VALUES		                           	#@G00791
FUNCTION set_table_record_sup_products_supported_products(mode,frm_contents) #@g00792 
	DEFINE MODE CHAR(1) #@g00793 
	DEFINE frm_contents RECORD #@g00794 
		cmpy_code CHAR(2), #@g00795 
		prd_code CHAR(13), #@g00796 
		prd_barcode VARCHAR(128), #@g00797 
		prd_name CHAR(40), #@g00798 
		prd_family CHAR(6), #@g00799 
		prd_subfam CHAR(6), #@g00800 
		prd_category CHAR(6), #@g00801 
		prd_end_support_date DATE #@g00802 
	END RECORD #@g00803 

	DEFINE tbl_contents RECORD #@g00805 
		cmpy_code CHAR(2), #@g00806 
		prd_code CHAR(13), #@g00807 
		prd_barcode VARCHAR(128), #@g00808 
		prd_name CHAR(40), #@g00809 
		prd_family CHAR(6), #@g00810 
		prd_subfam CHAR(6), #@g00811 
		prd_category CHAR(6), #@g00812 
		prd_end_support_date DATE #@g00813 
	END RECORD #@g00814 

	INITIALIZE tbl_contents.* TO NULL #@g00816 
	LET tbl_contents.cmpy_code = frm_sup_products.cmpy_code #@g00817 
	LET tbl_contents.prd_code = frm_sup_products.prd_code #@g00818 
	LET tbl_contents.prd_barcode = frm_sup_products.prd_barcode #@g00819 
	LET tbl_contents.prd_name = frm_sup_products.prd_name #@g00820 
	LET tbl_contents.prd_family = frm_sup_products.prd_family #@g00821 
	LET tbl_contents.prd_subfam = frm_sup_products.prd_subfam #@g00822 
	LET tbl_contents.prd_category = frm_sup_products.prd_category #@g00823 
	LET tbl_contents.prd_end_support_date = frm_sup_products.prd_end_support_date #@g00824 
	#@G00825

	RETURN tbl_contents.* #@g00827 
END FUNCTION ## set_table_record_sup_products_supported_products #@g00828 

#@G00830
{
FUNCTION error_mngmt()		                                                                                                   	#@G00832
	DEFINE context RECORD		                                                                                                   	#@G00833
   logname       CHAR(8),		                                                                                                	#@G00834
   terminal      CHAR(8),		                                                                                                	#@G00835
   text_err      CHAR(80)		                                                                                                	#@G00836
END RECORD		                                                                                                               	#@G00837
	DEFINE fgl_err INTEGER		                                                                                                  	#@G00838
	DEFINE isam_err INTEGER		                                                                                                 	#@G00839
	DEFINE fullerrorMESSAGE String		                                                                                          	#@G00840
	LET fgl_err = sqlca.sqlcode		                                                                                             	#@G00841
	LET isam_err = sqlca.sqlerrd[2]		                                                                                         	#@G00842

END FUNCTION		                                                                                                             	#@G00844


FUNCTION confirm_operation(xpos,ypos,msg)		                                                                                	#@G00847
	DEFINE xpos,ypos SMALLINT  #can be removed		                                                                              	#@G00848
	DEFINE msg CHAR(40)		                                                                                                     	#@G00849
	DEFINE reply CHAR(5)		                                                                                                    	#@G00850
	DEFINE action SMALLINT		                                                                                                  	#@G00851
	DEFINE prpmsg CHAR(60)		                                                                                                  	#@G00852
	LET reply = fgl_winbutton("",msg,"Yes","Yes|No|Cancel","question",0) 		                                                   	#@G00853
	CASE		                                                                                                                    	#@G00854
	WHEN reply = "Yes"		                                                                                                      	#@G00855
		LET action= 2		                                                                                                          	#@G00856
	WHEN reply = "No"		                                                                                                       	#@G00857
		LET action= 1		                                                                                                          	#@G00858
	WHEN reply = "Cancel"		                                                                                                   	#@G00859
		LET action= 0		                                                                                                          	#@G00860
	OTHERWISE		                                                                                                               	#@G00861
		LET action= 1		                                                                                                          	#@G00862
	END CASE		                                                                                                                	#@G00863
	RETURN action		                                                                                                           	#@G00864
END FUNCTION		## confirm_operation		                                                                                       	#@G00865

FUNCTION display_eric_error(mesg)		                                                                                             	#@G00867
	DEFINE mesg CHAR(30)		                                                                                                    	#@G00868
	DEFINE error_MESSAGE STRING		                                                                                             	#@G00869
	CALL Errorlog(sqlerrMESSAGE)		                                                                                            	#@G00870
	LET error_MESSAGE = mesg clipped, " ",sqlca.sqlcode," ",sqlca.sqlerrd[2]," ",sqlca.sqlerrm clipped		                      	#@G00871
	CALL fgl_winmessage("Type OK TO continue",error_MESSAGE,"error")		                                                        	#@G00872
END FUNCTION		                                                                                                             	#@G00873

FUNCTION init_program(dbname,progname)		                                                                                   	#@G00875
	DEFINE progname CHAR(8)		                                                                                                 	#@G00876
	DEFINE dbname CHAR(8)		                                                                                                   	#@G00877
	DEFINE query CHAR(100)		                                                                                                  	#@G00878
	DEFINE logdir CHAR(128)		                                                                                                 	#@G00879
	DEFINE logfile CHAR(128)		                                                                                                	#@G00880

	WHENEVER ERROR CALL error_mngmt		                                                                                         	#@G00882
	LET logdir=fgl_getenv("LOGDIR")		                                                                                         	#@G00883
	IF length(logdir) = 0 THEN		                                                                                              	#@G00884
	   LET logdir="."		                                                                                                       	#@G00885
	END IF		                                                                                                                  	#@G00886
	LET logfile=logdir clipped,"/",progname clipped,".log"		                                                                  	#@G00887
	CALL STARTLOG (logfile)		                                                                                                 	#@G00888
	LET query = "database ",dbname clipped		                                                                                  	#@G00889
	PREPARE openbase FROM query		                                                                                             	#@G00890
	EXECUTE openbase		                                                                                                        	#@G00891
	WHENEVER ERROR CONTINUE		                                                                                                 	#@G00892
	IF sqlca.sqlcode < 0 THEN		                                                                                               	#@G00893
	   ERROR "The database IS NOT available"		                                                                                	#@G00894
	   EXIT PROGRAM		                                                                                                         	#@G00895
	END IF		                                                                                                                  	#@G00896
	WHENEVER ERROR CALL error_mngmt		                                                                                         	#@G00897
END FUNCTION		                                                                                                             	#@G00898

#@G00900

#@G00902
}