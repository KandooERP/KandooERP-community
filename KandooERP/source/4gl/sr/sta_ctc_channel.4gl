# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-08-26 10:08:10		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl" 
DEFINE m_program CHAR(30) #@g00006 

DEFINE tbl_ctc_channel RECORD #@g00008 
	contact_seed BIGINT, #@g00009 
	cc_id VARCHAR(64), #@g00010 
	cc_channel CHAR(6), #@g00011 
	valid_from DATE, #@g00012 
	valid_to DATE #@g00013 
END RECORD #@g00014 

DEFINE frm_ctc_channel RECORD #@g00016 
	cc_channel CHAR(6), #@g00017 
	cc_id VARCHAR(64), #@g00018 
	contact_seed BIGINT, #@g00019 
	valid_to DATE, #@g00020 
	valid_from DATE #@g00021 
END RECORD #@g00022 

DEFINE sav_ctc_channel RECORD #@g00024 
	cc_channel CHAR(6), #@g00025 
	cc_id VARCHAR(64), #@g00026 
	contact_seed BIGINT, #@g00027 
	valid_to DATE, #@g00028 
	valid_from DATE #@g00029 
END RECORD #@g00030 

DEFINE lup_ctc_channel RECORD #@g00031 
	last_org_name CHAR(50) 
END RECORD #@g00032 
#@G00033

MAIN #@g00035 
	DEFER interrupt #@g00036 
	#OPTIONS		                                                                                                                 	#@G00037
	#help file "ctc_channel.iem",		                                                                                            	#@G00038
	#help key F1		                                                                                                             	#@G00039

	WHENEVER ERROR CALL error_mngmt #@g00041 
	CALL ui_init(0) 		                                                                                                      	#@G00042
	LET m_program="p_ctc_channel_contact_channel" #@g00043 
	#
	CALL main_ctc_channel_contact_channel() #@g00045 

END MAIN #@g00047 

#######################################################		                                                                  	#@G00049
# definition variable sccs		                                                                                               	#@G00050
FUNCTION mc_ctc_channel_sccs() #@g00051 
	DEFINE sccs_var CHAR(70) #@g00052 
	LET sccs_var="%W% %D%" #@g00053 
END FUNCTION #@g00054 

FUNCTION main_ctc_channel_contact_channel () #@g00056 

	--CALL init_program("kandoodb",m_program) #@g00058 

	OPEN WINDOW f_ctc_channel with FORM "f_ctc_channel" attributes(border) #@g00060 

	CALL init_cursor_ctc_channel_contact_channel () # INITIALIZE all cursors ON master TABLE #@g00062 
	#@G00062

	CALL menu_ctc_channel_contact_channel() #@g00064 

	CLOSE WINDOW f_ctc_channel #@g00066 

END FUNCTION #@g00068 

######################################################################		                                                   	#@G00070
# menu_ctc_channel_contact_channel		                                                                                       	#@G00071
# the top level menu 		                                                                                                    	#@G00072
# input arguments: none		                                                                                                  	#@G00073
# output arguments: none		                                                                                                 	#@G00074
FUNCTION menu_ctc_channel_contact_channel () #@g00075 
	DEFINE nbsel_contact_channel INTEGER #@g00076 
	DEFINE sql_stmt_status INTEGER #@g00077 
	DEFINE record_num INTEGER #@g00078 
	DEFINE ACTION SMALLINT #@g00079 
	DEFINE xnumber SMALLINT #@g00080 
	DEFINE arr_elem_num SMALLINT #@g00081 
	DEFINE pky_contact_channel RECORD #@g00082 
		contact_seed BIGINT #@g00083 
	END RECORD #@g00084 

	LET nbsel_contact_channel = 0 #@g00086 
	MENU "contact_channel" #@g00087 
		BEFORE MENU #@g00088 
			HIDE option "Next","Previous" #@g00089 
		COMMAND "Query" "Query data with multiple criteria contact_channel" #@g00090 
			#HELP 1000		                                                                                                              	#@G00091
			MESSAGE "" #@g00092 
			INITIALIZE frm_ctc_channel.* TO NULL #@g00093 
			DISPLAY BY NAME frm_ctc_channel.* #@g00094 
			HIDE option "Next","Previous" #@g00095 

			INITIALIZE lup_ctc_channel.* TO NULL #@g00097 
			DISPLAY BY NAME lup_ctc_channel.* #@g00098 
			#@G00098

			CALL query_contact_channel() RETURNING nbsel_contact_channel #@g00100 
			IF nbsel_contact_channel <>0 THEN #@g00101 
				CALL sql_nxtprev_contact_channel(1) RETURNING sql_stmt_status,pky_contact_channel.* #@g00102 
				LET record_num = 1 #@g00103 
				DISPLAY BY NAME frm_ctc_channel.* #@g00104 
				IF nbsel_contact_channel > 1 THEN #@g00105 
					SHOW option "Next" #@g00106 
					NEXT option "Next" #@g00107 
				END IF #@g00108 
				DISPLAY BY NAME lup_ctc_channel.* #@g00109 
				#@G00109
				#@G00109
			ELSE #@g00110 
				ERROR "No row matches the criteria" #@g00111 
				NEXT option "Query" #@g00112 
			END IF #@g00113 

		COMMAND "Next" "Display Next record contact_channel" #@g00115 
			#HELP 2000		                                                                                                              	#@G00116
			MESSAGE "" #@g00117 
			INITIALIZE frm_ctc_channel.* TO NULL #@g00118 
			DISPLAY BY NAME frm_ctc_channel.* #@g00119 
			INITIALIZE lup_ctc_channel.* TO NULL #@g00120 
			DISPLAY BY NAME lup_ctc_channel.* #@g00121 
			#@G00121

			IF record_num < nbsel_contact_channel THEN #@g00123 
				CALL sql_nxtprev_contact_channel(1) RETURNING sql_stmt_status,pky_contact_channel.* #@g00124 
				CASE #@g00125 
					WHEN sql_stmt_status = 0 #@g00126 
						ERROR "FETCH Last record of this selection contact_channel" #@g00127 
					WHEN sql_stmt_status = -1 #@g00128 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00129 
					WHEN sql_stmt_status = 1 #@g00130 
						LET record_num = record_num + 1 #@g00131 
						DISPLAY BY NAME frm_ctc_channel.* #@g00132 
						IF record_num >= nbsel_contact_channel THEN #@g00133 
							HIDE option "Next" #@g00134 
						END IF #@g00135 
						IF record_num > 1 THEN #@g00136 
							SHOW option "Previous" #@g00137 
						ELSE #@g00138 
							HIDE option "Previous" #@g00139 
						END IF #@g00140 
						DISPLAY BY NAME lup_ctc_channel.* #@g00141 
						#@G00141
						#@G00141
				END CASE #@g00142 
			ELSE #@g00143 
				ERROR " Please SET query criteria previously contact_channel " #@g00144 
				NEXT option "Query" #@g00145 
			END IF #@g00146 

		COMMAND "Previous" "Display Previous Record contact_channel" #@g00148 
			#HELP 3000		                                                                                                              	#@G00149
			MESSAGE "" #@g00150 
			INITIALIZE frm_ctc_channel.* TO NULL #@g00151 
			DISPLAY BY NAME frm_ctc_channel.* #@g00152 
			INITIALIZE lup_ctc_channel.* TO NULL #@g00153 
			DISPLAY BY NAME lup_ctc_channel.* #@g00154 
			#@G00154

			IF record_num > 1 THEN #@g00156 
				CALL sql_nxtprev_contact_channel(-1) RETURNING sql_stmt_status,pky_contact_channel.* #@g00157 
				CASE #@g00158 
					WHEN sql_stmt_status = 0 #@g00159 
						ERROR "FETCH First record of this selection contact_channel" #@g00160 
					WHEN sql_stmt_status < -1 #@g00161 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00162 
					WHEN sql_stmt_status = 1 #@g00163 
						LET record_num = record_num - 1 #@g00164 
						CALL set_form_record_ctc_channel_f_ctc_channel(tbl_ctc_channel.*) #@g00165 
						RETURNING frm_ctc_channel.* #@g00166 
						DISPLAY BY NAME frm_ctc_channel.* #@g00167 
						IF record_num = 1 THEN #@g00168 
							HIDE option "Previous" #@g00169 
						END IF #@g00170 
						IF record_num < nbsel_contact_channel THEN #@g00171 
							SHOW option "Next" #@g00172 
						ELSE #@g00173 
							HIDE option "Next" #@g00174 
						END IF #@g00175 
						DISPLAY BY NAME lup_ctc_channel.* #@g00176 
						#@G00176
						#@G00176
				END CASE #@g00177 
			ELSE #@g00178 
				ERROR " Please SET query criteria previously contact_channel " #@g00179 
				NEXT option "Query" #@g00180 
			END IF #@g00181 

			#@G00182

		COMMAND "Add" "Add a new record contact_channel" #@g00184 
			#HELP 3000		                                                                                                              	#@G00185
			MESSAGE "" #@g00186 
			CALL add_contact_channel() #@g00187 
			MESSAGE "" #@g00188 

		COMMAND "Modify" "Modify current record contact_channel" #@g00190 
			#HELP 4000		                                                                                                              	#@G00191
			MESSAGE "" #@g00192 
			IF nbsel_contact_channel THEN #@g00193 
				IF status_pk_contact_channel(pky_contact_channel.*) < 0 THEN #@g00194 
					ERROR "IS locked " #@g00195 
					NEXT option "Next" #@g00196 
				ELSE #@g00197 
					LET sql_stmt_status = modify_contact_channel(pky_contact_channel.*) #@g00198 
				END IF #@g00199 
			ELSE #@g00200 
				ERROR " Please SET query criteria previously contact_channel " #@g00201 
				NEXT option "Query" #@g00202 
			END IF #@g00203 

		COMMAND "Suppress" "Suppress current record contact_channel" #@g00205 
			#HELP 5000		                                                                                                              	#@G00206
			MESSAGE "" #@g00207 
			IF nbsel_contact_channel THEN #@g00208 
				IF status_pk_contact_channel(pky_contact_channel.*) < 0 THEN #@g00209 
					ERROR "IS locked " #@g00210 
					NEXT option "Next" #@g00211 
				END IF #@g00212 
				WHILE true #@g00213 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00214 
					CASE #@g00215 
						WHEN ACTION = 0 OR ACTION = 1 #@g00216 
							EXIT WHILE # degage abandon #@g00217 
						WHEN ACTION = 2 #@g00218 
							CALL suppress_contact_channel(pky_contact_channel.*) #@g00219 
							RETURNING sql_stmt_status #@g00220 
							EXIT WHILE #@g00221 
					END CASE #@g00222 
				END WHILE #@g00223 
			ELSE #@g00224 
				ERROR "Please SET query criteria previously contact_channel " #@g00225 
				NEXT option "Query" #@g00226 
			END IF #@g00227 

		COMMAND "Exit" "EXIT PROGRAM" #@g00229 
			#HELP 9000		                                                                                                              	#@G00230
			MESSAGE "" #@g00231 
			EXIT MENU #@g00232 
	END MENU #@g00233 
END FUNCTION #@g00234 

#######################################################################		                                                  	#@G00236
#    Query_contact_channel : Query By Example on table contact_channel		                                                   	#@G00237
# Input selection criteria,		                                                                                              	#@G00238
# PREPARE the query,		                                                                                                     	#@G00239
# OPEN the data SET		                                                                                                      	#@G00240
#######################################################################		                                                  	#@G00241
FUNCTION query_contact_channel() #@g00242 
	DEFINE rec_contact_channel,where_clause STRING #@g00243 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00244 
	DEFINE l_pky RECORD #@g00245 
		contact_seed BIGINT #@g00246 
	END RECORD #@g00247 
	DEFINE reply CHAR(5) #@g00248 
	LET xnumber = 0 #@g00249 
	MESSAGE "Please input query criteria" #@g00250 
	# INITIALIZE record AND display blank		                                                                                   	#@G00251
	INITIALIZE frm_ctc_channel.* TO NULL #@g00252 
	DISPLAY BY NAME frm_ctc_channel.* #@g00253 
	INITIALIZE lup_ctc_channel.* TO NULL #@g00254 
	DISPLAY BY NAME lup_ctc_channel.* #@g00255 
	#@G00255

	CONSTRUCT BY NAME where_clause ON contact_channel.cc_channel, #@g00257 
	contact_channel.cc_id, #@g00258 
	contact_channel.contact_seed, #@g00259 
	contact_channel.valid_from, #@g00260 
	contact_channel.valid_to #@g00261 

	#@G00262

	## Check whether criteria have been entered		                                                                             	#@G00264
		AFTER CONSTRUCT #@g00265 
			IF NOT field_touched(contact_channel.*) AND NOT int_flag THEN #@g00266 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00267 
				CASE #@g00268 
					WHEN reply matches "Yes" #@g00269 
						EXIT CONSTRUCT #@g00270 
					OTHERWISE # saisie d'un critere de selection #@g00271 
						ERROR "Please input a least one criteria" #@g00272 
						CONTINUE CONSTRUCT #@g00273 
				END CASE #@g00274 
			END IF #@g00275 
	END CONSTRUCT #@g00276 

	IF int_flag = true THEN #@g00278 
		MESSAGE "Quit with quit key" #@g00279 
		LET int_flag=0 #@g00280 
	ELSE #@g00281 
		LET xnumber = build_qbe_count_contact_channel(where_clause) #@g00282 
		IF xnumber > 0 THEN #@g00283 
			LET sql_stmt_status = build_qbe_row_contents_contact_channel(where_clause) #@g00284 
		ELSE #@g00285 
			RETURN -1 #@g00286 
		END IF #@g00287 

	END IF #@g00289 
	RETURN xnumber #@g00290 
END FUNCTION ## query_contact_channel #@g00291 

####################################################################		                                                     	#@G00293
## Add_contact_channel: add a new contact_channel row		                                                                    	#@G00294
FUNCTION add_contact_channel() #@g00295 
	DEFINE sql_stmt_status SMALLINT #@g00296 
	DEFINE row_count SMALLINT #@g00297 
	DEFINE nbre_contact_channel ,action SMALLINT #@g00298 
	DEFINE lookup_status INTEGER #@g00299 
	#@G00299
	#INITIALIZE pky_contact_channel.* TO NULL		                                                                               	#@G00300
	INITIALIZE tbl_ctc_channel.* TO NULL #@g00301 
	INITIALIZE frm_ctc_channel.* TO NULL #@g00302 
	INITIALIZE sav_ctc_channel.* TO NULL #@g00303 
	INITIALIZE lup_ctc_channel.* TO NULL #@g00304 
	#@G00304
	WHILE true #@g00305 
		LET int_flag = false #@g00306 
		#@G00308
		INPUT BY NAME frm_ctc_channel.cc_channel, #@g00309 
		frm_ctc_channel.cc_id, #@g00310 
		frm_ctc_channel.contact_seed, #@g00311 
		frm_ctc_channel.valid_from, #@g00312 
		frm_ctc_channel.valid_to #@g00313 
		WITHOUT DEFAULTS 

			AFTER FIELD contact_seed #@g00315 
				IF status_pk_contact_channel(frm_ctc_channel.contact_seed) THEN #@g00316 
					ERROR "contact_channel: already exists" #@g00317 
					NEXT FIELD contact_seed #@g00318 
				END IF #@g00319 
				#@G00320
			#AFTER FIELD contact_seed #@g00321 
				IF frm_ctc_channel.contact_seed IS NOT NULL THEN #@g00321 
					CALL lookup_contact_channel_contact(frm_ctc_channel.contact_seed) #@g00322 
					RETURNING lookup_status, #@g00322 
					lup_ctc_channel.last_org_name #@g00323 
					CASE #@g00324 
						WHEN lookup_status = 0 #@g00325 
							DISPLAY BY NAME #@g00325 
							lup_ctc_channel.last_org_name #@g00326 
						WHEN lookup_status = 100 #@g00327 
							ERROR " " #@g00328 
							NEXT FIELD contact_seed #@g00329 
						WHEN lookup_status < 0 #@g00330 
							ERROR " " #@g00331 
							NEXT FIELD contact_seed #@g00332 
					END CASE #@g00333 
				END IF #@g00334 
				#@G00334

				#@G00335
				#@G00335
		END INPUT #@g00336 
		IF int_flag = true THEN #@g00337 
			# Resign FROM input		                                                                                                   	#@G00338
			LET int_flag=false #@g00339 
			LET frm_ctc_channel.* = sav_ctc_channel.* #@g00340 
			DISPLAY BY NAME frm_ctc_channel.* #@g00341 
			MESSAGE "Quit with quit key Control-C" #@g00342 
			EXIT WHILE #@g00343 
		END IF #@g00344 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00346 
		CASE ACTION #@g00347 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00348 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00349 

			WHEN 2 # ON valide la transaction #@g00351 
				CALL set_table_record_ctc_channel_contact_channel("I",frm_ctc_channel.*) #@g00352 
				RETURNING tbl_ctc_channel.* #@g00353 
				CALL sql_add_contact_channel() RETURNING sql_stmt_status #@g00354 

				CASE #@g00356 
					WHEN sql_stmt_status = 0 #@g00357 
						MESSAGE "Add Successful operation" #@g00358 
					COMMIT WORK #@g00359 
					#@G00359
					WHEN sql_stmt_status < 0 #@g00360 
						CALL display_eric_error("Add contact_channel:failed ") #@g00361 
						ROLLBACK WORK #@g00362 
						#@G00362
				END CASE #@g00363 
				EXIT WHILE #@g00364 

			WHEN 0 #@g00366 
				EXIT WHILE #@g00367 
		END CASE #@g00368 
	END WHILE #@g00369 
	RETURN sql_stmt_status #@g00370 
END FUNCTION ## add_contact_channel #@g00371 


#######################################################################		                                                  	#@G00374
# Modify_contact_channel : Edit a contact_channel RECORD		                                                                 	#@G00375
# inbound: table primary key		                                                                                             	#@G00376
FUNCTION modify_contact_channel(pky) #@g00377 
	DEFINE ACTION SMALLINT #@g00378 
	DEFINE sql_stmt_status SMALLINT #@g00379 
	DEFINE lookup_status INTEGER #@g00380 
	#@G00380
	DEFINE row_count SMALLINT #@g00381 
	DEFINE pky RECORD #@g00382 
		contact_seed BIGINT #@g00383 
	END RECORD #@g00384 

	## check if record can be accessed		                                                                                      	#@G00386
	WHILE true #@g00387 
		LET int_flag = false #@g00388 
		# Save Screen Record VALUES before altering		                                                                            	#@G00389
		LET sav_ctc_channel.* = frm_ctc_channel.* #@g00390 
		BEGIN WORK #@g00391 
			#@G00391

			INPUT BY NAME frm_ctc_channel.cc_channel, #@g00393 
			frm_ctc_channel.cc_id, #@g00394 
			frm_ctc_channel.contact_seed, #@g00395 
			frm_ctc_channel.valid_from, #@g00396 
			frm_ctc_channel.valid_to #@g00397 
			WITHOUT DEFAULTS #@g00398 
				AFTER FIELD contact_seed #@g00399 
					IF frm_ctc_channel.contact_seed IS NOT NULL THEN #@g00399 
						CALL lookup_contact_channel_contact(frm_ctc_channel.contact_seed) #@g00400 
						RETURNING lookup_status, #@g00400 
						lup_ctc_channel.last_org_name #@g00401 
						CASE #@g00402 
							WHEN lookup_status = 0 #@g00403 
								DISPLAY BY NAME #@g00403 
								lup_ctc_channel.last_org_name #@g00404 
							WHEN lookup_status = 100 #@g00405 
								ERROR " " #@g00406 
								NEXT FIELD contact_seed #@g00407 
							WHEN lookup_status < 0 #@g00408 
								ERROR " " #@g00409 
								NEXT FIELD contact_seed #@g00410 
						END CASE #@g00411 
					END IF #@g00412 
					#@G00412

					#@G00413

					#@G00414
			END INPUT #@g00415 
			IF int_flag = true THEN #@g00416 
				LET int_flag=false #@g00417 
				# Restore previous value		                                                                                              	#@G00418
				LET frm_ctc_channel.* = sav_ctc_channel.* #@g00419 
				DISPLAY BY NAME frm_ctc_channel.* #@g00420 
				MESSAGE "$CancelCom Control-C" #@g00421 
				EXIT WHILE #@g00422 
			END IF #@g00423 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00425 

			CASE #@g00427 
				WHEN ACTION = 0 #@g00428 
					# Resign, restore previous VALUES		                                                                                     	#@G00429
					LET frm_ctc_channel.* = sav_ctc_channel.* #@g00430 
					DISPLAY BY NAME frm_ctc_channel.* #@g00431 
					EXIT WHILE # CANCEL operation #@g00432 

				WHEN ACTION = 1 #@g00434 
					# Redo		                                                                                                                	#@G00435
					CONTINUE WHILE #@g00436 

				WHEN ACTION = 2 #@g00438 
					# confirm UPDATE		                                                                                                      	#@G00439
					CALL set_table_record_ctc_channel_contact_channel("U",frm_ctc_channel.*) #@g00440 
					RETURNING tbl_ctc_channel.* #@g00441 
					LET sql_stmt_status = sql_modify_contact_channel(pky.*) #@g00442 
					CASE #@g00443 
						WHEN sql_stmt_status = 0 #@g00444 
							MESSAGE "Modify Successful operation" #@g00445 
						COMMIT WORK #@g00446 
						#@G00446
						WHEN sql_stmt_status < 0 #@g00447 
							CALL display_eric_error("Modify contact_channel:failed ") #@g00448 
							ROLLBACK WORK #@g00449 
							#@G00449
					END CASE #@g00450 
					EXIT WHILE #@g00451 
			END CASE #@g00452 
		END WHILE #@g00453 
		RETURN sql_stmt_status #@g00454 
END FUNCTION ## modify_contact_channel(pky) #@g00455 


#######################################################################		                                                  	#@G00458
# DELETE A contact_channel row		                                                                                           	#@G00459
# inbound: table primary key		                                                                                             	#@G00460
FUNCTION suppress_contact_channel(pky) #@g00461 
	DEFINE ACTION SMALLINT #@g00462 
	DEFINE sql_stmt_status SMALLINT #@g00463 
	DEFINE pky RECORD #@g00464 
		contact_seed BIGINT #@g00465 
	END RECORD #@g00466 

	WHILE true #@g00468 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00469 
		BEGIN WORK #@g00470 
			#@G00470
			CASE #@g00471 
				WHEN ACTION = 0 OR ACTION = 1 #@g00472 
					EXIT WHILE # degage abandon #@g00473 
				WHEN ACTION = 2 #@g00474 
					CALL sql_suppress_contact_channel(pky.*) RETURNING sql_stmt_status #@g00475 
					CASE #@g00476 
						WHEN sql_stmt_status = 0 #@g00477 
							MESSAGE "Suppress Successful operation" #@g00478 
						COMMIT WORK #@g00479 
						#@G00479
						INITIALIZE frm_ctc_channel.* TO NULL #@g00480 
						DISPLAY BY NAME frm_ctc_channel.* #@g00481 
						INITIALIZE lup_ctc_channel.* TO NULL #@g00482 
						INITIALIZE lup_ctc_channel.* TO NULL #@g00483 
						DISPLAY BY NAME lup_ctc_channel.* #@g00484 
						#@G00484
						WHEN sql_stmt_status < 0 #@g00485 
							CALL display_eric_error("Suppress contact_channel:failed ") #@g00486 
							ROLLBACK WORK #@g00487 
							#@G00487
					END CASE #@g00488 
					EXIT WHILE #@g00489 
			END CASE #@g00490 
		END WHILE #@g00491 
		RETURN sql_stmt_status #@g00492 
END FUNCTION ## suppress_contact_channel(pky) #@g00493 

#########################################################################		                                                	#@G00495
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00496
FUNCTION init_cursor_ctc_channel_contact_channel () #@g00497 
	DEFINE query_text STRING #@g00498 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00500
	LET query_text= #@g00501 
	"SELECT contact_seed,cc_id,cc_channel,valid_from,valid_to ", #@g00502 
	" FROM contact_channel ", #@g00503 
	"WHERE contact_seed = ? " #@g00504 

	PREPARE sel_mrw_mcontact_channel FROM query_text #@g00506 
	DECLARE crs_row_mcontact_channel CURSOR FOR sel_mrw_mcontact_channel #@g00507 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00509
	LET query_text= "SELECT contact_seed ", #@g00510 
	" FROM contact_channel ", #@g00511 
	" WHERE contact_seed = ? " #@g00512 

	PREPARE sel_pky_mcontact_channel FROM query_text #@g00514 
	DECLARE crs_pky_mcontact_channel CURSOR FOR sel_pky_mcontact_channel #@g00515 

	# PREPARE INSERT statement		                                                                                              	#@G00517
	LET query_text = #@g00518 
	"INSERT INTO contact_channel ( contact_seed,cc_id,cc_channel,valid_from,valid_to )", #@g00519 
	" VALUES ( ?,?,?,?,? )" #@g00520 
	PREPARE pr_ins_mcontact_channel FROM query_text #@g00521 

	# PREPARE UPDATE statement		                                                                                              	#@G00523
	LET query_text= #@g00524 
	"UPDATE contact_channel ", #@g00525 
	"SET ( cc_id,cc_channel,valid_from,valid_to )", #@g00526 
	" = ( ?,?,?,? )", #@g00527 
	" WHERE contact_seed = ? " #@g00528 
	PREPARE pr_upd_mcontact_channel FROM query_text #@g00529 

	# PREPARE DELETE statement		                                                                                              	#@G00531
	LET query_text= "DELETE FROM contact_channel ", #@g00532 
	" WHERE contact_seed = ? " #@g00533 

	PREPARE pr_del_mcontact_channel FROM query_text #@g00535 

END FUNCTION ## init_cursor_ctc_channel_contact_channel #@g00537 


#########################################################		                                                                	#@G00540
# Open the QBE CURSOR,		                                                                                                   	#@G00541
# counts returned rows_count,		                                                                                            	#@G00542
# OPEN the data SET,		                                                                                                     	#@G00543
# FETCH first row		                                                                                                        	#@G00544
# inbound parameter: query predicate		                                                                                     	#@G00545
# outbound parameters: number of rows retried		                                                                            	#@G00546
FUNCTION build_qbe_count_contact_channel(qry_stmt) #@g00547 
	DEFINE qry_stmt STRING #@g00548 
	DEFINE rec_contact_channel STRING #@g00549 
	DEFINE row_count INTEGER #@g00550 
	DEFINE lsql_stmt_status INTEGER #@g00551 

	# define primary_key record		                                                                                             	#@G00553
	DEFINE l_pky RECORD #@g00554 
		contact_seed BIGINT #@g00555 
	END RECORD #@g00556 

	LET rec_contact_channel = #@g00558 
	"SELECT count(*) FROM contact_channel", #@g00559 
	" WHERE ",qry_stmt clipped #@g00560 


	PREPARE rec_nbr_mcontact_channel FROM rec_contact_channel #@g00563 
	DECLARE crs_nbr_mcontact_channel CURSOR FOR rec_nbr_mcontact_channel #@g00564 

	OPEN crs_nbr_mcontact_channel #@g00566 
	SET ISOLATION TO dirty read #@g00567 
	WHENEVER ERROR CONTINUE #@g00568 
	FETCH crs_nbr_mcontact_channel INTO row_count #@g00569 
	WHENEVER ERROR CALL error_mngmt #@g00570 
	SET ISOLATION TO committed read #@g00571 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00573
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00574 
		LET row_count =0 #@g00575 
	END IF #@g00576 
	FREE crs_nbr_mcontact_channel #@g00577 
	RETURN row_count #@g00578 
END FUNCTION ## build_qbe_count_contact_channel #@g00579 

#########################################################		                                                                	#@G00581
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00582
# Declare AND OPEN the CURSOR		                                                                                            	#@G00583
# inbound param: query predicate		                                                                                         	#@G00584
#outbound parameter: query STATUS		                                                                                        	#@G00585
FUNCTION build_qbe_row_contents_contact_channel(qry_stmt) #@g00586 
	DEFINE qry_stmt STRING #@g00587 
	DEFINE rec_contact_channel STRING #@g00588 
	DEFINE row_count INTEGER #@g00589 
	DEFINE lsql_stmt_status INTEGER #@g00590 

	# define primary_key record		                                                                                             	#@G00592
	DEFINE l_pky RECORD #@g00593 
		contact_seed BIGINT #@g00594 
	END RECORD #@g00595 

	# display the selected columns		                                                                                          	#@G00597

	LET rec_contact_channel = "SELECT contact_seed ", #@g00599 
	" FROM contact_channel ", #@g00600 
	"WHERE ",qry_stmt clipped, #@g00601 
	" ORDER BY contact_seed " #@g00602 

	PREPARE rech_mcontact_channel FROM rec_contact_channel #@g00604 

	# crs_scrl_mcontact_channel : the first CURSOR selects all the primary keys (NOT all the table columns)		                 	#@G00606

	DECLARE crs_scrl_mcontact_channel SCROLL CURSOR with HOLD FOR rech_mcontact_channel #@g00608 

	WHENEVER ERROR CONTINUE #@g00610 
	OPEN crs_scrl_mcontact_channel #@g00611 
	WHENEVER ERROR CALL error_mngmt #@g00612 

	RETURN sqlca.sqlcode #@g00614 
END FUNCTION ## build_qbe_row_contents_contact_channel #@g00615 

#######################################################################		                                                  	#@G00617
# sql_nxtprev_contact_channel : FETCH NEXT OR PREVIOUS RECORD		                                                            	#@G00618
FUNCTION sql_nxtprev_contact_channel(offset) #@g00619 
	DEFINE offset SMALLINT #@g00620 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00621 
	DEFINE pky RECORD #@g00622 
		contact_seed BIGINT #@g00623 
	END RECORD #@g00624 

	WHENEVER ERROR CONTINUE #@g00626 
	FETCH relative offset crs_scrl_mcontact_channel INTO pky.* #@g00627 
	WHENEVER ERROR CALL error_mngmt #@g00628 

	CASE #@g00630 
		WHEN sqlca.sqlcode = 100 #@g00631 
			LET record_found = 0 #@g00632 
		WHEN sqlca.sqlcode < 0 #@g00633 
			LET record_found = -1 #@g00634 
		OTHERWISE #@g00635 
			LET lsql_stmt_status = 1 #@g00636 
			CALL sql_fetch_mrw_contact_channel (pky.*) #@g00637 
			RETURNING record_found #@g00638 

	END CASE #@g00640 
	RETURN record_found,pky.* #@g00641 
END FUNCTION ## sql_nxtprev_contact_channel #@g00642 

########################################################################		                                                 	#@G00644
# sql_FETCH_mrw_contact_channel : read a complete row accessing by primary key		                                           	#@G00645
# inbound parameter : primary key		                                                                                        	#@G00646
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00647
FUNCTION sql_fetch_mrw_contact_channel(pky_contact_channel) #@g00648 
	DEFINE sql_stmt_status SMALLINT #@g00649 
	DEFINE pky_contact_channel RECORD #@g00650 
		contact_seed BIGINT #@g00651 
	END RECORD #@g00652 
	DEFINE lookup_status INTEGER #@g00653 
	#@G00653

	# read the table, access on primary key		                                                                                 	#@G00655
	WHENEVER ERROR CONTINUE #@g00656 
	OPEN crs_row_mcontact_channel #@g00657 
	USING pky_contact_channel.* #@g00658 

	FETCH crs_row_mcontact_channel INTO tbl_ctc_channel.* #@g00660 

	WHENEVER ERROR CALL error_mngmt #@g00662 
	CASE #@g00663 
		WHEN sqlca.sqlcode = 100 #@g00664 
			LET sql_stmt_status = 0 #@g00665 
		WHEN sqlca.sqlcode < 0 #@g00666 
			LET sql_stmt_status = -1 #@g00667 
		OTHERWISE #@g00668 
			LET sql_stmt_status = 1 #@g00669 
			CALL set_form_record_ctc_channel_f_ctc_channel(tbl_ctc_channel.*) #@g00670 
			RETURNING frm_ctc_channel.* #@g00671 
			IF frm_ctc_channel.contact_seed IS NOT NULL THEN #@g00671 
				CALL lookup_contact_channel_contact(frm_ctc_channel.contact_seed) #@g00672 
				RETURNING lookup_status, #@g00672 
				lup_ctc_channel.last_org_name #@g00673 
			END IF #@g00674 
			#@G00674
	END CASE #@g00675 
	RETURN sql_stmt_status #@g00676 
END FUNCTION ## sql_fetch_mrw_contact_channel #@g00677 

########################################################################		                                                 	#@G00679
## INSERT in table contact_channel 		                                                                                      	#@G00680
########################################################################		                                                 	#@G00681
FUNCTION sql_add_contact_channel() #@g00682 
	DEFINE lsql_stmt_status INTEGER #@g00683 
	DEFINE row_count SMALLINT #@g00684 
	WHENEVER ERROR CONTINUE #@g00685 
	EXECUTE pr_ins_mcontact_channel #@g00686 
	USING tbl_ctc_channel.contact_seed, #@g00686 
	tbl_ctc_channel.cc_id, #@g00686 
	tbl_ctc_channel.cc_channel, #@g00686 
	tbl_ctc_channel.valid_from, #@g00686 
	tbl_ctc_channel.valid_to # #@g00687 
	WHENEVER ERROR CALL error_mngmt #@g00688 

	IF sqlca.sqlcode < 0 THEN #@g00690 
		LET lsql_stmt_status = -1 #@g00691 
	ELSE #@g00692 
		LET lsql_stmt_status = 0 #@g00693 
	END IF #@g00694 
	RETURN lsql_stmt_status #@g00695 
END FUNCTION ## sql_add_contact_channel #@g00696 

########################################################################		                                                 	#@G00698
## sql_Modify_contact_channel :UPDATE contact_channel record		                                                             	#@G00699
FUNCTION sql_modify_contact_channel(pky) #@g00700 
	DEFINE lsql_stmt_status INTEGER #@g00701 
	DEFINE pky RECORD #@g00702 
		contact_seed BIGINT #@g00703 
	END RECORD #@g00704 

	WHENEVER ERROR CONTINUE #@g00706 
	EXECUTE pr_upd_mcontact_channel #@g00707 
	USING tbl_ctc_channel.cc_id, #@g00707 
	tbl_ctc_channel.cc_channel, #@g00707 
	tbl_ctc_channel.valid_from, #@g00707 
	tbl_ctc_channel.valid_to , #@g00708 
	pky.* #@g00709 

	WHENEVER ERROR CALL error_mngmt #@g00711 
	IF sqlca.sqlcode < 0 THEN #@g00712 

		LET lsql_stmt_status = -1 #@g00714 
	ELSE #@g00715 
		LET lsql_stmt_status = 0 #@g00716 
	END IF #@g00717 
	RETURN lsql_stmt_status #@g00718 
END FUNCTION ## sql_modify_contact_channel #@g00719 

########################################################################		                                                 	#@G00721
## sql_delete_contact_channel :delete current row in table contact_channel 		                                              	#@G00722
FUNCTION sql_suppress_contact_channel(pky) #@g00723 
	DEFINE lsql_stmt_status SMALLINT #@g00724 
	DEFINE pky RECORD #@g00725 
		contact_seed BIGINT #@g00726 
	END RECORD #@g00727 

	WHENEVER ERROR CONTINUE #@g00729 
	EXECUTE pr_del_mcontact_channel #@g00730 
	USING pky.* #@g00731 

	WHENEVER ERROR CALL error_mngmt #@g00733 
	IF sqlca.sqlcode < 0 THEN #@g00734 
		LET lsql_stmt_status = -1 #@g00735 
	ELSE #@g00736 
		LET lsql_stmt_status=0 #@g00737 
	END IF #@g00738 
	RETURN lsql_stmt_status #@g00739 
END FUNCTION ## sql_suppress_contact_channel #@g00740 

################################################################################		                                         	#@G00742
#   status_pk_contact_channel : Check if primary key exists		                                                              	#@G00743
# inbound parameter : record of primary key		                                                                              	#@G00744
# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00745
FUNCTION status_pk_contact_channel(pky) #@g00746 
	DEFINE pky RECORD #@g00747 
		contact_seed BIGINT #@g00748 
	END RECORD #@g00749 
	DEFINE pk_status INTEGER #@g00750 

	WHENEVER ERROR CONTINUE #@g00752 
	OPEN crs_pky_mcontact_channel USING pky.* #@g00753 
	FETCH crs_pky_mcontact_channel #@g00754 
	WHENEVER ERROR CALL error_mngmt #@g00755 

	CASE sqlca.sqlcode #@g00757 
		WHEN 0 #@g00758 
			LET pk_status = 1 #@g00759 
		WHEN 100 #@g00760 
			LET pk_status = 0 #@g00761 
		WHEN sqlca.sqlerrd[2] = 104 #@g00762 
			LET pk_status = -1 # RECORD locked #@g00763 
		WHEN sqlca.sqlcode < 0 #@g00764 
			LET pk_status = sqlca.sqlcode #@g00765 
	END CASE #@g00766 

	RETURN pk_status #@g00768 
END FUNCTION ## status_pk_contact_channel #@g00769 

################################################################################################		                         	#@G00771
#   set_form_record_ctc_channel_f_ctc_channel: assigns table VALUES TO form fields VALUES		                                	#@G00772
FUNCTION set_form_record_ctc_channel_f_ctc_channel(tbl_contents) #@g00773 
	DEFINE frm_contents RECORD #@g00774 
		cc_channel CHAR(6), #@g00775 
		cc_id VARCHAR(64), #@g00776 
		contact_seed BIGINT, #@g00777 
		valid_to DATE, #@g00778 
		valid_from DATE #@g00779 
	END RECORD #@g00780 

	DEFINE tbl_contents RECORD #@g00782 
		contact_seed BIGINT, #@g00783 
		cc_id VARCHAR(64), #@g00784 
		cc_channel CHAR(6), #@g00785 
		valid_from DATE, #@g00786 
		valid_to DATE #@g00787 
	END RECORD #@g00788 

	INITIALIZE frm_contents.* TO NULL #@g00790 
	LET frm_contents.cc_channel = tbl_ctc_channel.cc_channel #@g00791 
	LET frm_contents.cc_id = tbl_ctc_channel.cc_id #@g00792 
	LET frm_contents.contact_seed = tbl_ctc_channel.contact_seed #@g00793 
	LET frm_contents.valid_to = tbl_ctc_channel.valid_to #@g00794 
	LET frm_contents.valid_from = tbl_ctc_channel.valid_from #@g00795 
	#@G00796
	RETURN frm_contents.* #@g00797 
END FUNCTION ## set_form_record_ctc_channel_f_ctc_channel #@g00798 

################################################################################################		                         	#@G00800
## set_table_record_ctc_channel_contact_channel: assigns form fields value TO table VALUES		                               	#@G00801
FUNCTION set_table_record_ctc_channel_contact_channel(mode,frm_contents) #@g00802 
	DEFINE MODE CHAR(1) #@g00803 
	DEFINE frm_contents RECORD #@g00804 
		cc_channel CHAR(6), #@g00805 
		cc_id VARCHAR(64), #@g00806 
		contact_seed BIGINT, #@g00807 
		valid_to DATE, #@g00808 
		valid_from DATE #@g00809 
	END RECORD #@g00810 

	DEFINE tbl_contents RECORD #@g00812 
		contact_seed BIGINT, #@g00813 
		cc_id VARCHAR(64), #@g00814 
		cc_channel CHAR(6), #@g00815 
		valid_from DATE, #@g00816 
		valid_to DATE #@g00817 
	END RECORD #@g00818 

	INITIALIZE tbl_contents.* TO NULL #@g00820 
	LET tbl_contents.contact_seed = frm_ctc_channel.contact_seed #@g00821 
	LET tbl_contents.cc_id = frm_ctc_channel.cc_id #@g00822 
	LET tbl_contents.cc_channel = frm_ctc_channel.cc_channel #@g00823 
	LET tbl_contents.valid_from = frm_ctc_channel.valid_from #@g00824 
	LET tbl_contents.valid_to = frm_ctc_channel.valid_to #@g00825 
	#@G00826

	RETURN tbl_contents.* #@g00828 
END FUNCTION ## set_table_record_ctc_channel_contact_channel #@g00829 

FUNCTION lookup_contact_channel_contact(l_contact_seed) #@g00831 
	DEFINE l_contact_seed BIGSERIAL #@g00832 
	DEFINE l_last_org_name CHAR(50) #@g00833 
	WHENEVER ERROR CONTINUE #@g00834 
	SELECT last_org_name #@g00834 
	INTO l_last_org_name #@g00835 
	FROM contact #@g00836 
	WHERE contact_seed = l_contact_seed #@g00837 
	IF sqlca.sqlcode = 100 THEN #@g00838 
		LET l_last_org_name = NULL #@g00839 
	END IF #@g00840 
	WHENEVER ERROR CALL error_mngmt #@g00841 
	RETURN sqlca.sqlcode,l_last_org_name #@g00842 
END FUNCTION #@g00843 

#@G00845

#@G00847

#@G00849
