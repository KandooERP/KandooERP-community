# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-08-20 17:17:56		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE pky_service_request RECORD #@g00008 
	sr_seed BIGSERIAL #@g00009 
END RECORD #@g00010 

DEFINE tbl_srv_rqst RECORD #@g00012 
	sr_seed BIGSERIAL, #@g00013 
	cmpy_code CHAR(2), #@g00014 
	sr_number VARCHAR(16), #@g00015 
	sr_parent VARCHAR(16), 
	sr_duplicate VARCHAR(16), #@g00016 
	open_date DATETIME year TO minute, #@g00017 
	deadline DATETIME year TO minute, #@g00018 
	abstract CHAR(80), #@g00019 
	prd_code CHAR(13), #@g00020 
	prd_module CHAR(15), #@g00021 
	prd_version CHAR(20), #@g00022 
	os_code CHAR(10), #@g00023 
	os_version CHAR(20), #@g00024 
	cust_references VARCHAR(64), #@g00025 
	serial_number CHAR(20), #@g00026 
	sr_type CHAR(8), #@g00027 
	severity SMALLINT, #@g00028 
	environment CHAR(20), #@g00029 
	description LVARCHAR(32000), #@g00030 
	sr_status CHAR(12), #@g00031 
	reported_by VARCHAR(64), #@g00032 
	rb_channel CHAR(6), #@g00033 
	answer_to VARCHAR(64), #@g00034 
	at_channel CHAR(6), #@g00035 
	sr_owner VARCHAR(64), #@g00036 
	so_channel CHAR(6), #@g00037 
	close_date DATETIME year TO second #@g00038 
END RECORD #@g00039 

DEFINE frm_srv_rqst RECORD #@g00041 
	cmpy_code CHAR(2), #@g00042 
	sr_seed BIGSERIAL, #@g00043 
	sr_number VARCHAR(16), #@g00044 
	sr_parent VARCHAR(16), 
	sr_duplicate VARCHAR(16), #@g00045 
	sr_status CHAR(12), #@g00046 
	deadline DATETIME year TO minute, #@g00047 
	open_date DATETIME year TO minute, #@g00048 
	close_date DATETIME year TO second, #@g00049 
	abstract CHAR(80), #@g00050 
	severity SMALLINT, #@g00051 
	environment CHAR(20), #@g00052 
	sr_type CHAR(8), #@g00053 
	prd_module CHAR(15), #@g00054 
	prd_version CHAR(20), #@g00055 
	prd_code CHAR(13), #@g00056 
	os_code CHAR(10), #@g00057 
	os_version CHAR(20), #@g00058 
	serial_number CHAR(20), #@g00059 
	cust_references VARCHAR(64), #@g00060 
	description LVARCHAR(32000), #@g00061 
	rb_channel CHAR(6), #@g00062 
	reported_by VARCHAR(64), #@g00063 
	answer_to VARCHAR(64), #@g00064 
	at_channel CHAR(6), #@g00065 
	sr_owner VARCHAR(64), #@g00066 
	so_channel CHAR(6) #@g00067 
END RECORD #@g00068 

DEFINE sav_srv_rqst RECORD #@g00070 
	cmpy_code CHAR(2), #@g00071 
	sr_seed BIGSERIAL, #@g00072 
	sr_number VARCHAR(16), #@g00073 
	sr_parent VARCHAR(16), 
	sr_duplicate VARCHAR(16), #@g00074 
	sr_status CHAR(12), #@g00075 
	deadline DATETIME year TO minute, #@g00076 
	open_date DATETIME year TO minute, #@g00077 
	close_date DATETIME year TO second, #@g00078 
	abstract CHAR(80), #@g00079 
	severity SMALLINT, #@g00080 
	environment CHAR(20), #@g00081 
	sr_type CHAR(8), #@g00082 
	prd_module CHAR(15), #@g00083 
	prd_version CHAR(20), #@g00084 
	prd_code CHAR(13), #@g00085 
	os_code CHAR(10), #@g00086 
	os_version CHAR(20), #@g00087 
	serial_number CHAR(20), #@g00088 
	cust_references VARCHAR(64), #@g00089 
	description LVARCHAR(32000), #@g00090 
	rb_channel CHAR(6), #@g00091 
	reported_by VARCHAR(64), #@g00092 
	answer_to VARCHAR(64), #@g00093 
	at_channel CHAR(6), #@g00094 
	sr_owner VARCHAR(64), #@g00095 
	so_channel CHAR(6) #@g00096 
END RECORD #@g00097 

DEFINE lup_srv_rqst RECORD #@g00098 
	prd_name CHAR(40), #@g00099 
	os_name CHAR(30) 
END RECORD #@g00100 

DEFINE cb_srtype ui.combobox 
DEFINE cb_environment ui.combobox 
DEFINE cb_rb_channel ui.combobox 
DEFINE cb_at_channel ui.combobox 
DEFINE cb_so_channel ui.combobox 
DEFINE cb_prd_code ui.combobox 
DEFINE cb_os_code ui.combobox 
MAIN 
	#get this back in AFTER you sorted your mess (HuHO) LOL
	#Initial UI Init
	#CALL setModuleId("A11")
	#CALL ui_init(0)
	#@G00103
	DEFER interrupt #@g00104 
	OPTIONS #@g00105 
	help file "srv_rqst.iem", #@g00106 
	help KEY f1 #@g00107 

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00109
	# CALL ui_init(0) 		                                                                                                      	#@G00110
	LET m_program="p_srv_rqst_service_request" #@g00111 

	CALL main_srv_rqst_service_request() #@g00113 

END MAIN #@g00115 

#######################################################		                                                                  	#@G00117
# definition variable sccs		                                                                                               	#@G00118
FUNCTION mc_srv_rqst_sccs() #@g00119 
	DEFINE sccs_var CHAR(70) #@g00120 
	LET sccs_var="%W% %D%" #@g00121 
END FUNCTION #@g00122 


FUNCTION main_srv_rqst_service_request () #@g00125 

	CALL init_program("kandoodb",m_program) #@g00127 

	OPEN WINDOW f_service_request with FORM "f_service_request" attributes(border) #@g00129 

	CALL init_cursor_srv_rqst_service_request () # INITIALIZE all cursors ON master TABLE #@g00131 

	CALL fillupcomboboxes () 

	CALL menu_srv_rqst_service_request() #@g00133 

	CLOSE WINDOW f_service_request #@g00135 

END FUNCTION #@g00137 

######################################################################		                                                   	#@G00139
# menu_srv_rqst_service_request		                                                                                          	#@G00140
# the top level menu 		                                                                                                    	#@G00141
# INPUT arguments: none		                                                                                                  	#@G00142
# OUTPUT arguments: none		                                                                                                 	#@G00143
FUNCTION menu_srv_rqst_service_request () #@g00144 
	DEFINE nbsel_service_request INTEGER #@g00145 
	DEFINE sql_stmt_status INTEGER #@g00146 
	DEFINE record_num INTEGER #@g00147 
	DEFINE ACTION SMALLINT #@g00148 
	DEFINE xnumber SMALLINT #@g00149 
	DEFINE arr_elem_num SMALLINT #@g00150 

	LET nbsel_service_request = 0 #@g00152 
	MENU "service_request" #@g00153 
		BEFORE MENU #@g00154 
			HIDE option "Next","Previous","Modify","Suppress" #@g00155 
		COMMAND "Query" "Query data with multiple criteria service_request" #@g00156 
			help 1000 #@g00157 
			#MESSAGE ""
			CLEAR FORM #@g00158 
			INITIALIZE frm_srv_rqst.* TO NULL #@g00159 
			DISPLAY BY NAME frm_srv_rqst.* #@g00160 
			HIDE option "Next","Previous","Modify","Suppress" #@g00161 

			INITIALIZE lup_srv_rqst.* TO NULL #@g00163 
			DISPLAY BY NAME lup_srv_rqst.* #@g00164 
			#@G00164

			CALL query_service_request() RETURNING nbsel_service_request #@g00166 
			IF nbsel_service_request >0 THEN #@g00167 
				#LET sql_stmt_status = sql_nxtprev_service_request(1)		                                                                  	#@G00168
				CALL sql_nxtprev_service_request(0) RETURNING sql_stmt_status,pky_service_request.* 
				LET record_num = 1 #@g00169 
				DISPLAY BY NAME frm_srv_rqst.* 
				SHOW option "Modify","Suppress" 
				HIDE option "ADD" #@g00170 
				IF nbsel_service_request > 1 THEN #@g00171 
					SHOW option "Next" #@g00172 
					NEXT option "Next" #@g00173 
				END IF #@g00174 
				DISPLAY BY NAME lup_srv_rqst.* #@g00175 
				#@G00175
				#@G00175
			ELSE #@g00176 
				ERROR "No row matches the criteria" #@g00177 
				NEXT option "Query" #@g00178 
			END IF #@g00179 

		COMMAND "Next" "DISPLAY Next RECORD service_request" #@g00181 
			help 2000 #@g00182 
			MESSAGE "" #@g00183 
			INITIALIZE frm_srv_rqst.* TO NULL #@g00184 
			DISPLAY BY NAME frm_srv_rqst.* #@g00185 
			INITIALIZE lup_srv_rqst.* TO NULL #@g00186 
			DISPLAY BY NAME lup_srv_rqst.* #@g00187 
			#@G00187

			IF record_num < nbsel_service_request THEN 
				#@G00189
				#LET sql_stmt_status = sql_nxtprev_service_request(1)		                                                                  	#@G00190
				CALL sql_nxtprev_service_request(1) RETURNING sql_stmt_status,pky_service_request.* 
				CASE #@g00191 
					WHEN sql_stmt_status = 0 #@g00192 
						ERROR "FETCH Last RECORD of this selection service_request" #@g00193 
					WHEN sql_stmt_status = -1 #@g00194 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00195 
					WHEN sql_stmt_status = 1 #@g00196 
						LET record_num = record_num + 1 #@g00197 
						DISPLAY BY NAME frm_srv_rqst.* #@g00198 
						IF record_num >= nbsel_service_request THEN #@g00199 
							HIDE option "Next" #@g00200 
						END IF #@g00201 
						IF record_num > 1 THEN #@g00202 
							SHOW option "Previous" #@g00203 
						ELSE #@g00204 
							HIDE option "Previous" #@g00205 
						END IF #@g00206 
						DISPLAY BY NAME lup_srv_rqst.* #@g00207 
						#@G00207
						#@G00207
				END CASE #@g00208 
			ELSE #@g00209 
				ERROR " Please SET query criteria previously service_request " #@g00210 
				NEXT option "Query" #@g00211 
			END IF #@g00212 

		COMMAND "Previous" "DISPLAY Previous RECORD service_request" #@g00214 
			help 3000 #@g00215 
			MESSAGE "" #@g00216 
			INITIALIZE frm_srv_rqst.* TO NULL #@g00217 
			DISPLAY BY NAME frm_srv_rqst.* #@g00218 
			INITIALIZE lup_srv_rqst.* TO NULL #@g00219 
			DISPLAY BY NAME lup_srv_rqst.* #@g00220 
			#@G00220

			IF record_num > 1 THEN #@g00222 
				#LET sql_stmt_status = sql_nxtprev_service_request(-1)		                                                                 	#@G00223
				CALL sql_nxtprev_service_request(-1) RETURNING sql_stmt_status,pky_service_request.* 
				CASE #@g00224 
					WHEN sql_stmt_status = 0 #@g00225 
						ERROR "FETCH First RECORD of this selection service_request" #@g00226 
					WHEN sql_stmt_status < -1 #@g00227 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00228 
					WHEN sql_stmt_status = 1 #@g00229 
						LET record_num = record_num - 1 #@g00230 
						CALL set_form_record_srv_rqst_f_service_request(tbl_srv_rqst.*) #@g00231 
						RETURNING frm_srv_rqst.* #@g00232 
						DISPLAY BY NAME frm_srv_rqst.* #@g00233 
						IF record_num = 1 THEN #@g00234 
							HIDE option "Previous" #@g00235 
						END IF #@g00236 
						IF record_num < nbsel_service_request THEN #@g00237 
							SHOW option "Next" #@g00238 
						ELSE #@g00239 
							HIDE option "Next" #@g00240 
						END IF #@g00241 
						DISPLAY BY NAME lup_srv_rqst.* #@g00242 
						#@G00242
						#@G00242
				END CASE #@g00243 
			ELSE #@g00244 
				ERROR " Please SET query criteria previously service_request " #@g00245 
				NEXT option "Query" #@g00246 
			END IF #@g00247 

			#@G00248

		COMMAND "Add" "Add a new RECORD service_request" #@g00250 
			help 3000 #@g00251 
			MESSAGE "" 
			HIDE option "Next","Previous" #@g00252 
			CALL add_service_request() #@g00253 
			MESSAGE "" #@g00254 

		COMMAND "Edit" "Modify current RECORD service_request" #@g00256 
			help 4000 #@g00257 
			MESSAGE "" #@g00258 
			IF nbsel_service_request THEN #@g00259 
				IF status_pk_service_request(pky_service_request.*) < 0 THEN #@g00260 
					ERROR "IS locked " #@g00261 
					NEXT option "Next" #@g00262 
				ELSE #@g00263 
					LET sql_stmt_status = modify_service_request(pky_service_request.*) #@g00264 
				END IF #@g00265 
			ELSE #@g00266 
				ERROR " Please SET query criteria previously service_request " #@g00267 
				NEXT option "Query" #@g00268 
			END IF #@g00269 

		COMMAND "Suppress" "Suppress current RECORD service_request" #@g00271 
			help 5000 #@g00272 
			MESSAGE "" #@g00273 
			IF nbsel_service_request THEN #@g00274 
				IF status_pk_service_request(pky_service_request.*) < 0 THEN #@g00275 
					ERROR "IS locked " #@g00276 
					NEXT option "Next" #@g00277 
				END IF #@g00278 
				WHILE true #@g00279 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00280 
					CASE #@g00281 
						WHEN ACTION = 0 OR ACTION = 1 #@g00282 
							EXIT WHILE # degage abandon #@g00283 
						WHEN ACTION = 2 #@g00284 
							CALL suppress_service_request(pky_service_request.*) #@g00285 
							RETURNING sql_stmt_status #@g00286 
							EXIT WHILE #@g00287 
					END CASE #@g00288 
				END WHILE #@g00289 
			ELSE #@g00290 
				ERROR "Please SET query criteria previously service_request " #@g00291 
				NEXT option "Query" #@g00292 
			END IF #@g00293 


		COMMAND "Exit" "EXIT PROGRAM" #@g00296 
			help 9000 #@g00297 
			MESSAGE "" #@g00298 
			EXIT MENU #@g00299 
	END MENU #@g00300 
END FUNCTION #@g00301 

#######################################################################		                                                  	#@G00303
#    Query_service_request : Query By Example on table service_request		                                                   	#@G00304
# INPUT selection criteria,		                                                                                              	#@G00305
# PREPARE the query,		                                                                                                     	#@G00306
# OPEN the data SET		                                                                                                      	#@G00307
#######################################################################		                                                  	#@G00308
FUNCTION query_service_request() #@g00309 
	DEFINE rec_service_request STRING #@g00310 
	DEFINE where_clause STRING 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00311 
	DEFINE l_pky RECORD #@g00312 
		sr_seed BIGSERIAL #@g00313 
	END RECORD #@g00314 
	DEFINE reply CHAR(1) #@g00315 
	LET xnumber = 0 #@g00316 
	MESSAGE "Please INPUT query criteria" #@g00317 
	# INITIALIZE RECORD AND DISPLAY blank		                                                                                   	#@G00318
	INITIALIZE frm_srv_rqst.* TO NULL 
	INITIALIZE lup_srv_rqst.* TO NULL #@g00319 
	INITIALIZE l_pky.* TO NULL 
	DISPLAY BY NAME frm_srv_rqst.* #@g00320 
	DISPLAY BY NAME lup_srv_rqst.* #@g00322 
	#@G00322

	CONSTRUCT BY NAME where_clause ON service_request.cmpy_code, #@g00324 
	service_request.sr_number, #@g00325 
	service_request.sr_parent, 
	service_request.sr_duplicate, #@g00327 
	service_request.sr_status, #@g00326 
	service_request.open_date, #@g00328 
	service_request.deadline, #@g00329 
	service_request.close_date, #@g00330 
	service_request.abstract, #@g00331 
	service_request.sr_type, #@g00332 
	service_request.severity, #@g00333 
	service_request.environment, #@g00334 
	service_request.prd_code, #@g00335 
	service_request.prd_module, #@g00336 
	service_request.prd_version, #@g00337 
	service_request.os_code, #@g00338 
	service_request.os_version, #@g00339 
	service_request.cust_references, #@g00340 
	service_request.serial_number, #@g00341 
	service_request.description, #@g00342 
	service_request.rb_channel, #@g00343 
	service_request.reported_by, #@g00344 
	service_request.at_channel, #@g00345 
	service_request.answer_to, #@g00346 
	service_request.so_channel, #@g00347 
	service_request.sr_owner #@g00348 

	#@G00349

	## Check whether criteria have been entered		                                                                             	#@G00351
		AFTER CONSTRUCT #@g00352 
			IF NOT field_touched(service_request.*) AND NOT int_flag THEN 
				LET reply = fgl_winbutton("Query by Example","SELECT all rows, are you sure? ","Yes","Yes|No","question",0) #@g00353 
				CASE #@g00355 
					WHEN reply matches "[Yy]" #@g00356 
						EXIT CONSTRUCT #@g00357 
					OTHERWISE # saisie d'un critere de selection #@g00358 
						ERROR "Please INPUT a least one criteria" #@g00359 
						CONTINUE CONSTRUCT #@g00360 
				END CASE #@g00361 
			END IF #@g00362 
	END CONSTRUCT #@g00363 

	IF int_flag = true THEN #@g00365 
		MESSAGE "Quit with quit key" #@g00366 
		LET int_flag=0 #@g00367 
	ELSE #@g00368 
		LET xnumber = build_qbe_count_service_request(where_clause) #@g00369 
		IF xnumber > 0 THEN #@g00370 
			LET sql_stmt_status = build_qbe_row_contents_service_request(where_clause) #@g00371 
		ELSE #@g00372 
			RETURN -1 #@g00373 
		END IF #@g00374 

	END IF #@g00376 
	RETURN xnumber #@g00377 
END FUNCTION ## query_service_request #@g00378 

####################################################################		                                                     	#@G00380
## Add_service_request: add a new service_request row		                                                                    	#@G00381
FUNCTION add_service_request() #@g00382 
	DEFINE sql_stmt_status SMALLINT #@g00383 
	DEFINE row_count SMALLINT #@g00384 
	DEFINE nbre_service_request ,action SMALLINT #@g00385 
	DEFINE lookup_status INTEGER #@g00386 
	#@G00386
	INITIALIZE pky_service_request.* TO NULL #@g00387 
	INITIALIZE tbl_srv_rqst.* TO NULL #@g00388 
	INITIALIZE frm_srv_rqst.* TO NULL #@g00389 
	INITIALIZE sav_srv_rqst.* TO NULL #@g00390 
	INITIALIZE lup_srv_rqst.* TO NULL #@g00391 
	CLEAR FORM #@g00391 
	WHILE true #@g00392 
		LET int_flag = false #@g00393 

		LET frm_srv_rqst.severity = 2 
		LET frm_srv_rqst.sr_status = "creation" #@g00411 
		DISPLAY BY NAME frm_srv_rqst.open_date, 
		frm_srv_rqst.severity, 
		frm_srv_rqst.sr_status 
		#@G00395
		INPUT BY NAME frm_srv_rqst.cmpy_code, #@g00396 
		frm_srv_rqst.abstract, #@g00403 
		frm_srv_rqst.sr_type, #@g00404 
		frm_srv_rqst.severity, #@g00405 
		frm_srv_rqst.environment, #@g00406 
		frm_srv_rqst.prd_code, #@g00407 
		frm_srv_rqst.prd_module, #@g00408 
		frm_srv_rqst.prd_version, #@g00409 
		frm_srv_rqst.os_code, #@g00410 
		frm_srv_rqst.os_version, #@g00411 
		frm_srv_rqst.cust_references, #@g00412 
		frm_srv_rqst.serial_number, #@g00413 
		frm_srv_rqst.description, #@g00414 
		frm_srv_rqst.rb_channel, #@g00415 
		frm_srv_rqst.reported_by, #@g00416 
		frm_srv_rqst.at_channel, #@g00417 
		frm_srv_rqst.answer_to, #@g00418 
		frm_srv_rqst.so_channel, #@g00419 
		frm_srv_rqst.sr_owner #@g00420 

		#@G00422
			AFTER FIELD os_code #@g00423 
				IF frm_srv_rqst.os_code IS NOT NULL THEN #@g00423 
					CALL lookup_service_request_operating_systems(frm_srv_rqst.os_code) #@g00424 
					RETURNING lookup_status, #@g00424 
					lup_srv_rqst.os_name #@g00425 
					CASE #@g00426 
						WHEN lookup_status = 0 #@g00427 
							DISPLAY BY NAME #@g00427 
							lup_srv_rqst.os_name #@g00428 
						WHEN lookup_status = 100 #@g00429 
							ERROR " " #@g00430 
							NEXT FIELD os_code #@g00431 
						WHEN lookup_status < 0 #@g00432 
							ERROR " " #@g00433 
							NEXT FIELD os_code #@g00434 
					END CASE #@g00435 
				END IF #@g00436 
			AFTER FIELD prd_code #@g00437 
				IF frm_srv_rqst.cmpy_code IS NOT NULL AND frm_srv_rqst.prd_code IS NOT NULL THEN #@g00437 
					CALL lookup_service_request_supported_products(frm_srv_rqst.cmpy_code,frm_srv_rqst.prd_code) #@g00438 
					RETURNING lookup_status, #@g00438 
					lup_srv_rqst.prd_name #@g00439 
					CASE #@g00440 
						WHEN lookup_status = 0 #@g00441 
							DISPLAY BY NAME #@g00441 
							lup_srv_rqst.prd_name #@g00442 
						WHEN lookup_status = 100 #@g00443 
							ERROR " " #@g00444 
							NEXT FIELD cmpy_code #@g00445 
						WHEN lookup_status < 0 #@g00446 
							ERROR " " #@g00447 
							NEXT FIELD cmpy_code #@g00448 
					END CASE #@g00449 
				END IF 
				#@G00450
			AFTER FIELD reported_by 
				LET frm_srv_rqst.answer_to = frm_srv_rqst.reported_by 
				LET frm_srv_rqst.at_channel = frm_srv_rqst.rb_channel 
				DISPLAY BY NAME frm_srv_rqst.answer_to,frm_srv_rqst.at_channel 

		END INPUT #@g00452 
		IF int_flag = true THEN #@g00453 
			# Resign FROM INPUT		                                                                                                   	#@G00454
			LET int_flag=false #@g00455 
			LET frm_srv_rqst.* = sav_srv_rqst.* #@g00456 
			DISPLAY BY NAME frm_srv_rqst.* #@g00457 
			MESSAGE "Quit with quit key Control-C" #@g00458 
			#@G00459
			EXIT WHILE #@g00460 
		END IF #@g00461 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00463 
		CASE ACTION #@g00464 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00465 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00466 

			WHEN 2 # ON valide la transaction 
				BEGIN WORK 
					LET frm_srv_rqst.sr_number = get_sr_number(frm_srv_rqst.cmpy_code) 
					LET frm_srv_rqst.open_date = CURRENT 
					CALL set_table_record_srv_rqst_service_request("I",frm_srv_rqst.*) #@g00469 
					RETURNING tbl_srv_rqst.* #@g00470 
					CALL sql_add_service_request() RETURNING sql_stmt_status #@g00471 

					CASE #@g00473 
						WHEN sql_stmt_status = 0 #@g00474 
							MESSAGE "Add Successful operation" 
							DISPLAY BY NAME frm_srv_rqst.sr_number,frm_srv_rqst.open_date 
						COMMIT WORK #@g00476 
						#@G00476
						WHEN sql_stmt_status < 0 #@g00477 
							CALL display_eric_error("Add service_request:failed ") #@g00478 
							ROLLBACK WORK 
						OTHERWISE #@g00479 
							ROLLBACK WORK 
					END CASE #@g00480 
					EXIT WHILE #@g00481 

			WHEN 0 #@g00483 
				EXIT WHILE #@g00484 
		END CASE #@g00485 
	END WHILE #@g00486 
	RETURN sql_stmt_status #@g00487 
END FUNCTION ## add_service_request #@g00488 


#######################################################################		                                                  	#@G00491
# Modify_service_request : Edit a service_request RECORD		                                                                 	#@G00492
# inbound: table primary key		                                                                                             	#@G00493
FUNCTION modify_service_request(pky) #@g00494 
	DEFINE ACTION SMALLINT #@g00495 
	DEFINE sql_stmt_status SMALLINT #@g00496 
	DEFINE lookup_status INTEGER #@g00497 
	#@G00497
	DEFINE row_count SMALLINT #@g00498 
	DEFINE pky RECORD #@g00499 
		sr_seed BIGSERIAL #@g00500 
	END RECORD #@g00501 

	## check IF RECORD can be accessed		                                                                                      	#@G00503
	WHILE true #@g00504 
		LET int_flag = false #@g00505 
		# Save Screen RECORD VALUES before altering		                                                                            	#@G00506
		LET sav_srv_rqst.* = frm_srv_rqst.* #@g00507 

		#@G00508
		INPUT BY NAME frm_srv_rqst.cmpy_code, #@g00510 
		#		frm_srv_rqst.sr_number,		                                                                                                 	#@G00511
		#		frm_srv_rqst.sr_status,		                                                                                                  	#@G00512
		#		frm_srv_rqst.sr_duplicate,		                                                                                                	#@G00513
		#		frm_srv_rqst.open_date,		                                                                                                  	#@G00514
		#		frm_srv_rqst.deadline,		                                                                                                   	#@G00515
		#		frm_srv_rqst.close_date,		                                                                                                 	#@G00516
		frm_srv_rqst.abstract, #@g00517 
		frm_srv_rqst.sr_type, #@g00518 
		frm_srv_rqst.severity, #@g00519 
		frm_srv_rqst.environment, #@g00520 
		frm_srv_rqst.prd_code, #@g00521 
		frm_srv_rqst.prd_module, #@g00522 
		frm_srv_rqst.prd_version, #@g00523 
		frm_srv_rqst.os_code, #@g00524 
		frm_srv_rqst.os_version, #@g00525 
		frm_srv_rqst.cust_references, #@g00526 
		frm_srv_rqst.serial_number, #@g00527 
		frm_srv_rqst.description, #@g00528 
		frm_srv_rqst.rb_channel, #@g00529 
		frm_srv_rqst.reported_by, #@g00530 
		frm_srv_rqst.at_channel, #@g00531 
		frm_srv_rqst.answer_to, #@g00532 
		frm_srv_rqst.so_channel, #@g00533 
		frm_srv_rqst.sr_owner #@g00534 
		WITHOUT DEFAULTS #@g00535 
			AFTER FIELD os_code #@g00536 
				IF frm_srv_rqst.os_code IS NOT NULL THEN #@g00536 
					CALL lookup_service_request_operating_systems(frm_srv_rqst.os_code) #@g00537 
					RETURNING lookup_status, #@g00537 
					lup_srv_rqst.os_name #@g00538 
					CASE #@g00539 
						WHEN lookup_status = 0 #@g00540 
							DISPLAY BY NAME #@g00540 
							lup_srv_rqst.os_name #@g00541 
						WHEN lookup_status = 100 #@g00542 
							ERROR " " #@g00543 
							NEXT FIELD os_code #@g00544 
						WHEN lookup_status < 0 #@g00545 
							ERROR " " #@g00546 
							NEXT FIELD os_code #@g00547 
					END CASE #@g00548 
				END IF #@g00549 
			AFTER FIELD prd_code #@g00550 
				IF frm_srv_rqst.cmpy_code IS NOT NULL AND frm_srv_rqst.prd_code IS NOT NULL THEN #@g00550 
					CALL lookup_service_request_supported_products(frm_srv_rqst.cmpy_code,frm_srv_rqst.prd_code) #@g00551 
					RETURNING lookup_status, #@g00551 
					lup_srv_rqst.prd_name #@g00552 
					CASE #@g00553 
						WHEN lookup_status = 0 #@g00554 
							DISPLAY BY NAME #@g00554 
							lup_srv_rqst.prd_name #@g00555 
						WHEN lookup_status = 100 #@g00556 
							ERROR " " #@g00557 
							NEXT FIELD cmpy_code #@g00558 
						WHEN lookup_status < 0 #@g00559 
							ERROR " " #@g00560 
							NEXT FIELD cmpy_code #@g00561 
					END CASE #@g00562 
				END IF #@g00563 
				#@G00563
		END INPUT #@g00566 
		IF int_flag = true THEN #@g00567 
			LET int_flag=false #@g00568 
			# Restore previous value		                                                                                              	#@G00569
			LET frm_srv_rqst.* = sav_srv_rqst.* #@g00570 
			DISPLAY BY NAME frm_srv_rqst.* #@g00571 
			MESSAGE "$CancelCom Control-C" #@g00572 
			#@G00573
			EXIT WHILE #@g00574 
		END IF #@g00575 

		CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00577 

		CASE #@g00579 
			WHEN ACTION = 0 #@g00580 
				# Resign, restore previous VALUES		                                                                                     	#@G00581
				LET frm_srv_rqst.* = sav_srv_rqst.* #@g00582 
				DISPLAY BY NAME frm_srv_rqst.* #@g00583 
				EXIT WHILE # CANCEL operation #@g00584 

			WHEN ACTION = 1 #@g00586 
				# Redo		                                                                                                                	#@G00587
				CONTINUE WHILE #@g00588 

			WHEN ACTION = 2 #@g00590 
				# confirm UPDATE		                                                                                                      	#@G00591
				BEGIN WORK 
					CALL set_table_record_srv_rqst_service_request("U",frm_srv_rqst.*) #@g00592 
					RETURNING tbl_srv_rqst.* #@g00593 
					LET sql_stmt_status = sql_modify_service_request(pky.*) #@g00594 
					CASE #@g00595 
						WHEN sql_stmt_status = 0 #@g00596 
							MESSAGE "Modify Successful operation" #@g00597 
						COMMIT WORK #@g00598 
						#@G00598
						WHEN sql_stmt_status < 0 #@g00599 
							CALL display_eric_error("Modify service_request:failed ") #@g00600 
							ROLLBACK WORK #@g00601 
							#@G00601
					END CASE #@g00602 
					EXIT WHILE #@g00603 
		END CASE #@g00604 
	END WHILE #@g00605 
	RETURN sql_stmt_status #@g00606 
END FUNCTION ## modify_service_request(pky) #@g00607 


#######################################################################		                                                  	#@G00610
# DELETE A service_request row		                                                                                           	#@G00611
# inbound: table primary key		                                                                                             	#@G00612
FUNCTION suppress_service_request(pky) #@g00613 
	DEFINE ACTION SMALLINT #@g00614 
	DEFINE sql_stmt_status SMALLINT #@g00615 
	DEFINE pky RECORD #@g00616 
		sr_seed BIGSERIAL #@g00617 
	END RECORD #@g00618 

	WHILE true #@g00620 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00621 
		BEGIN WORK #@g00622 
			#@G00622
			CASE #@g00623 
				WHEN ACTION = 0 OR ACTION = 1 #@g00624 
					EXIT WHILE # degage abandon #@g00625 
				WHEN ACTION = 2 #@g00626 
					CALL sql_suppress_service_request(pky.*) RETURNING sql_stmt_status #@g00627 
					CASE #@g00628 
						WHEN sql_stmt_status = 0 #@g00629 
							MESSAGE "Suppress Successful operation" #@g00630 
						COMMIT WORK #@g00631 
						#@G00631
						INITIALIZE frm_srv_rqst.* TO NULL #@g00632 
						DISPLAY BY NAME frm_srv_rqst.* #@g00633 
						INITIALIZE lup_srv_rqst.* TO NULL #@g00634 
						INITIALIZE lup_srv_rqst.* TO NULL #@g00635 
						DISPLAY BY NAME lup_srv_rqst.* #@g00636 
						#@G00636
						WHEN sql_stmt_status < 0 #@g00637 
							CALL display_eric_error("Suppress service_request:failed ") #@g00638 
							ROLLBACK WORK #@g00639 
							#@G00639
					END CASE #@g00640 
					EXIT WHILE #@g00641 
			END CASE #@g00642 
		END WHILE #@g00643 
		RETURN sql_stmt_status #@g00644 
END FUNCTION ## suppress_service_request(pky) #@g00645 

#########################################################################		                                                	#@G00647
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00648
FUNCTION init_cursor_srv_rqst_service_request () #@g00649 
	DEFINE query_text STRING #@g00650 

	# PREPARE CURSOR FOR full master table row contents, access by primary key		                                              	#@G00652
	LET query_text= #@g00653 
	"SELECT sr_seed,cmpy_code,sr_number,sr_parent,sr_duplicate,open_date,deadline,abstract,prd_code,prd_module,prd_version,os_code,os_version,cust_references,serial_number,sr_type,severity,environment,description,sr_status,reported_by,rb_channel,answer_to,at_channel,sr_owner,so_channel,close_date ", #@g00654 
	" FROM service_request ", #@g00655 
	"WHERE sr_seed = ? " #@g00656 

	PREPARE sel_mrw_mservice_request FROM query_text #@g00658 
	DECLARE crs_row_mservice_request CURSOR FOR sel_mrw_mservice_request #@g00659 

	# PREPARE CURSOR FOR row test / check IF locked		                                                                         	#@G00661
	LET query_text= "SELECT sr_seed ", #@g00662 
	" FROM service_request ", #@g00663 
	" WHERE sr_seed = ? " #@g00664 

	PREPARE sel_pky_mservice_request FROM query_text #@g00666 
	DECLARE crs_pky_mservice_request CURSOR FOR sel_pky_mservice_request #@g00667 

	# PREPARE INSERT statement		                                                                                              	#@G00669
	LET query_text = #@g00670 
	"INSERT INTO service_request ( sr_seed,cmpy_code,sr_number,sr_parent,sr_duplicate,open_date,deadline,abstract,prd_code,prd_module,prd_version,os_code,os_version,cust_references,serial_number,sr_type,severity,environment,description,sr_status,reported_by,rb_channel,answer_to,at_channel,sr_owner,so_channel,close_date )", #@g00671 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00672 
	PREPARE pr_ins_mservice_request FROM query_text #@g00673 

	# PREPARE UPDATE statement		                                                                                              	#@G00675
	LET query_text= #@g00676 
	"UPDATE service_request ", #@g00677 
	"SET ( cmpy_code,sr_number,sr_parent,sr_duplicate,open_date,deadline,abstract,prd_code,prd_module,prd_version,os_code,os_version,cust_references,serial_number,sr_type,severity,environment,description,sr_status,reported_by,rb_channel,answer_to,at_channel,sr_owner,so_channel,close_date )", #@g00678 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )", #@g00679 
	" WHERE sr_seed = ? " #@g00680 
	PREPARE pr_upd_mservice_request FROM query_text #@g00681 

	# PREPARE DELETE statement		                                                                                              	#@G00683
	LET query_text= "DELETE FROM service_request ", #@g00684 
	" WHERE sr_seed = ? " #@g00685 

	PREPARE pr_del_mservice_request FROM query_text #@g00687 

END FUNCTION ## init_cursor_srv_rqst_service_request #@g00689 


#########################################################		                                                                	#@G00692
# Open the QBE CURSOR,		                                                                                                   	#@G00693
# counts returned rows_count,		                                                                                            	#@G00694
# OPEN the data SET,		                                                                                                     	#@G00695
# FETCH first row		                                                                                                        	#@G00696
# inbound parameter: query predicate		                                                                                     	#@G00697
# outbound parameters: number of rows retried		                                                                            	#@G00698
FUNCTION build_qbe_count_service_request(qry_stmt) #@g00699 
	DEFINE qry_stmt STRING #@g00700 
	DEFINE rec_service_request STRING #@g00701 
	DEFINE row_count INTEGER #@g00702 
	DEFINE lsql_stmt_status INTEGER #@g00703 

	# DEFINE primary_key record		                                                                                             	#@G00705
	DEFINE l_pky RECORD #@g00706 
		sr_seed BIGSERIAL #@g00707 
	END RECORD #@g00708 

	LET rec_service_request = #@g00710 
	"SELECT count(*) FROM service_request", #@g00711 
	" WHERE ",qry_stmt clipped #@g00712 


	PREPARE rec_nbr_mservice_request FROM rec_service_request #@g00715 
	DECLARE crs_nbr_mservice_request CURSOR FOR rec_nbr_mservice_request #@g00716 

	OPEN crs_nbr_mservice_request #@g00718 
	SET ISOLATION TO dirty read #@g00719 
	WHENEVER ERROR CONTINUE #@g00720 
	FETCH crs_nbr_mservice_request INTO row_count #@g00721 
	WHENEVER ERROR CALL error_mngmt #@g00722 
	SET ISOLATION TO committed read #@g00723 

	# IF FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00725
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00726 
		LET row_count =0 #@g00727 
	END IF #@g00728 
	# FREE crs_nbr_mservice_request		                                                                                           	#@G00729
	RETURN row_count #@g00730 
END FUNCTION ## build_qbe_count_service_request #@g00731 

#########################################################		                                                                	#@G00733
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00734
# Declare AND OPEN the CURSOR		                                                                                            	#@G00735
# inbound param: query predicate		                                                                                         	#@G00736
#outbound parameter: query STATUS		                                                                                        	#@G00737
FUNCTION build_qbe_row_contents_service_request(qry_stmt) #@g00738 
	DEFINE qry_stmt STRING #@g00739 
	DEFINE rec_service_request STRING #@g00740 
	DEFINE row_count INTEGER #@g00741 
	DEFINE lsql_stmt_status INTEGER #@g00742 

	# DEFINE primary_key record		                                                                                             	#@G00744
	DEFINE l_pky RECORD #@g00745 
		sr_seed BIGSERIAL #@g00746 
	END RECORD #@g00747 

	# DISPLAY the selected columns		                                                                                          	#@G00749

	LET rec_service_request = "SELECT sr_seed ", #@g00751 
	" FROM service_request ", #@g00752 
	"WHERE ",qry_stmt clipped, #@g00753 
	" ORDER BY sr_seed " #@g00754 

	PREPARE rech_mservice_request FROM rec_service_request #@g00756 

	# crs_scrl_mservice_request : the first CURSOR selects all the primary keys (NOT all the table columns)		                 	#@G00758


	DECLARE crs_scrl_mservice_request SCROLL CURSOR with HOLD FOR rech_mservice_request #@g00760 
	#WHENEVER ERROR CONTINUE		                                                                                                 	#@G00762
	OPEN crs_scrl_mservice_request #@g00763 
	# WHENEVER ERROR CALL error_mngmt		                                                                                         	#@G00764

	RETURN sqlca.sqlcode #@g00766 
END FUNCTION ## build_qbe_row_contents_service_request #@g00767 

#######################################################################		                                                  	#@G00769
# sql_nxtprev_service_request : FETCH NEXT OR PREVIOUS RECORD		                                                            	#@G00770
FUNCTION sql_nxtprev_service_request(offset) #@g00771 
	DEFINE offset SMALLINT #@g00772 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00773 
	DEFINE pky RECORD #@g00774 
		sr_seed BIGSERIAL #@g00775 
	END RECORD #@g00776 

	WHENEVER ERROR CONTINUE #@g00778 
	IF offset = 0 THEN 
		FETCH FIRST crs_scrl_mservice_request INTO pky.* 
	ELSE 
		FETCH relative offset crs_scrl_mservice_request INTO pky.* #@g00779 
	END IF 
	WHENEVER ERROR CALL error_mngmt #@g00780 

	CASE #@g00782 
		WHEN sqlca.sqlcode = 100 #@g00783 
			LET record_found = 0 #@g00784 
		WHEN sqlca.sqlcode < 0 #@g00785 
			LET record_found = -1 #@g00786 
		OTHERWISE #@g00787 
			LET lsql_stmt_status = 1 #@g00788 
			CALL sql_fetch_mrw_service_request (pky.*) #@g00789 
			RETURNING record_found #@g00790 

	END CASE #@g00792 
	RETURN record_found,pky.* #@g00793 
END FUNCTION ## sql_nxtprev_service_request #@g00794 

########################################################################		                                                 	#@G00796
# sql_FETCH_mrw_service_request : read a complete row accessing by primary key		                                           	#@G00797
# inbound parameter : primary key		                                                                                        	#@G00798
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00799
FUNCTION sql_fetch_mrw_service_request(pky_service_request) #@g00800 
	DEFINE sql_stmt_status SMALLINT #@g00801 
	DEFINE pky_service_request RECORD #@g00802 
		sr_seed BIGSERIAL #@g00803 
	END RECORD #@g00804 
	DEFINE lookup_status INTEGER #@g00805 
	#@G00805

	# read the table, access on primary key		                                                                                 	#@G00807
	#WHENEVER ERROR CONTINUE		                                                                                                  	#@G00808
	OPEN crs_row_mservice_request #@g00809 
	USING pky_service_request.* #@g00810 

	FETCH crs_row_mservice_request INTO tbl_srv_rqst.* #@g00812 

	WHENEVER ERROR CALL error_mngmt #@g00814 
	CASE #@g00815 
		WHEN sqlca.sqlcode = 100 #@g00816 
			LET sql_stmt_status = 0 #@g00817 
		WHEN sqlca.sqlcode < 0 #@g00818 
			LET sql_stmt_status = -1 #@g00819 
		OTHERWISE #@g00820 
			LET sql_stmt_status = 1 #@g00821 
			CALL set_form_record_srv_rqst_f_service_request(tbl_srv_rqst.*) #@g00822 
			RETURNING frm_srv_rqst.* #@g00823 
			IF frm_srv_rqst.os_code IS NOT NULL THEN #@g00823 
				CALL lookup_service_request_operating_systems(frm_srv_rqst.os_code) #@g00824 
				RETURNING lookup_status, #@g00824 
				lup_srv_rqst.os_name #@g00825 
			END IF #@g00826 
			IF frm_srv_rqst.cmpy_code IS NOT NULL AND frm_srv_rqst.prd_code IS NOT NULL THEN #@g00826 
				CALL lookup_service_request_supported_products(frm_srv_rqst.cmpy_code,frm_srv_rqst.prd_code) #@g00827 
				RETURNING lookup_status, #@g00827 
				lup_srv_rqst.prd_name #@g00828 
			END IF #@g00829 
			#@G00829
	END CASE #@g00830 
	RETURN sql_stmt_status #@g00831 
END FUNCTION ## sql_fetch_mrw_service_request #@g00832 

########################################################################		                                                 	#@G00834
## INSERT in table service_request 		                                                                                      	#@G00835
########################################################################		                                                 	#@G00836
FUNCTION sql_add_service_request() #@g00837 
	DEFINE lsql_stmt_status INTEGER #@g00838 
	DEFINE row_count SMALLINT #@g00839 
	WHENEVER ERROR CONTINUE #@g00840 
	EXECUTE pr_ins_mservice_request #@g00841 
	USING tbl_srv_rqst.sr_seed, #@g00841 
	tbl_srv_rqst.cmpy_code, #@g00841 
	tbl_srv_rqst.sr_number, 
	tbl_srv_rqst.sr_parent, #@g00841 
	tbl_srv_rqst.sr_duplicate, #@g00841 
	tbl_srv_rqst.open_date, #@g00841 
	tbl_srv_rqst.deadline, #@g00841 
	tbl_srv_rqst.abstract, #@g00841 
	tbl_srv_rqst.prd_code, #@g00841 
	tbl_srv_rqst.prd_module, #@g00841 
	tbl_srv_rqst.prd_version, #@g00841 
	tbl_srv_rqst.os_code, #@g00841 
	tbl_srv_rqst.os_version, #@g00841 
	tbl_srv_rqst.cust_references, #@g00841 
	tbl_srv_rqst.serial_number, #@g00841 
	tbl_srv_rqst.sr_type, #@g00841 
	tbl_srv_rqst.severity, #@g00841 
	tbl_srv_rqst.environment, #@g00841 
	tbl_srv_rqst.description, #@g00841 
	tbl_srv_rqst.sr_status, #@g00841 
	tbl_srv_rqst.reported_by, #@g00841 
	tbl_srv_rqst.rb_channel, #@g00841 
	tbl_srv_rqst.answer_to, #@g00841 
	tbl_srv_rqst.at_channel, #@g00841 
	tbl_srv_rqst.sr_owner, #@g00841 
	tbl_srv_rqst.so_channel, #@g00841 
	tbl_srv_rqst.close_date # #@g00842 
	WHENEVER ERROR CALL error_mngmt #@g00843 

	IF sqlca.sqlcode < 0 THEN #@g00845 
		LET lsql_stmt_status = -1 #@g00846 
	ELSE #@g00847 
		LET lsql_stmt_status = 0 #@g00848 
	END IF #@g00849 
	RETURN lsql_stmt_status #@g00850 
END FUNCTION ## sql_add_service_request #@g00851 

########################################################################		                                                 	#@G00853
## sql_Modify_service_request :UPDATE service_request record		         s                                                    	#@G00854
FUNCTION sql_modify_service_request(pky) #@g00855 
	DEFINE lsql_stmt_status INTEGER #@g00856 
	DEFINE pky RECORD #@g00857 
		sr_seed BIGSERIAL #@g00858 
	END RECORD #@g00859 

	WHENEVER ERROR CONTINUE #@g00861 
	EXECUTE pr_upd_mservice_request #@g00862 
	USING tbl_srv_rqst.cmpy_code, #@g00862 
	tbl_srv_rqst.sr_number, #@g00862 
	tbl_srv_rqst.sr_parent, 
	tbl_srv_rqst.sr_duplicate, #@g00862 
	tbl_srv_rqst.open_date, #@g00862 
	tbl_srv_rqst.deadline, #@g00862 
	tbl_srv_rqst.abstract, #@g00862 
	tbl_srv_rqst.prd_code, #@g00862 
	tbl_srv_rqst.prd_module, #@g00862 
	tbl_srv_rqst.prd_version, #@g00862 
	tbl_srv_rqst.os_code, #@g00862 
	tbl_srv_rqst.os_version, #@g00862 
	tbl_srv_rqst.cust_references, #@g00862 
	tbl_srv_rqst.serial_number, #@g00862 
	tbl_srv_rqst.sr_type, #@g00862 
	tbl_srv_rqst.severity, #@g00862 
	tbl_srv_rqst.environment, #@g00862 
	tbl_srv_rqst.description, #@g00862 
	tbl_srv_rqst.sr_status, #@g00862 
	tbl_srv_rqst.reported_by, #@g00862 
	tbl_srv_rqst.rb_channel, #@g00862 
	tbl_srv_rqst.answer_to, #@g00862 
	tbl_srv_rqst.at_channel, #@g00862 
	tbl_srv_rqst.sr_owner, #@g00862 
	tbl_srv_rqst.so_channel, #@g00862 
	tbl_srv_rqst.close_date , #@g00863 
	pky.* #@g00864 

	WHENEVER ERROR CALL error_mngmt #@g00866 
	IF sqlca.sqlcode < 0 THEN #@g00867 

		LET lsql_stmt_status = -1 #@g00869 
	ELSE #@g00870 
		LET lsql_stmt_status = 0 #@g00871 
	END IF #@g00872 
	RETURN lsql_stmt_status #@g00873 
END FUNCTION ## sql_modify_service_request #@g00874 

########################################################################		                                                 	#@G00876
## sql_delete_service_request :delete current row in table service_request 		                                              	#@G00877
FUNCTION sql_suppress_service_request(pky) #@g00878 
	DEFINE lsql_stmt_status SMALLINT #@g00879 
	DEFINE pky RECORD #@g00880 
		sr_seed BIGSERIAL #@g00881 
	END RECORD #@g00882 

	WHENEVER ERROR CONTINUE #@g00884 
	EXECUTE pr_del_mservice_request #@g00885 
	USING pky.* #@g00886 

	WHENEVER ERROR CALL error_mngmt #@g00888 
	IF sqlca.sqlcode < 0 THEN #@g00889 
		LET lsql_stmt_status = -1 #@g00890 
	ELSE #@g00891 
		LET lsql_stmt_status=0 #@g00892 
	END IF #@g00893 
	RETURN lsql_stmt_status #@g00894 
END FUNCTION ## sql_suppress_service_request #@g00895 

################################################################################		                                         	#@G00897
#   status_pk_service_request : Check IF primary key exists		                                                              	#@G00898
# inbound parameter : RECORD of primary key		                                                                              	#@G00899
# outbound parameter:  STATUS > 0  IF exists, 0 IF no record, < 0 IF error		                                               	#@G00900
FUNCTION status_pk_service_request(pky) #@g00901 
	DEFINE pky RECORD #@g00902 
		sr_seed BIGSERIAL #@g00903 
	END RECORD #@g00904 
	DEFINE pk_status INTEGER #@g00905 

	WHENEVER ERROR CONTINUE #@g00907 
	OPEN crs_pky_mservice_request USING pky.* #@g00908 
	FETCH crs_pky_mservice_request #@g00909 
	WHENEVER ERROR CALL error_mngmt #@g00910 

	CASE sqlca.sqlcode #@g00912 
		WHEN 0 #@g00913 
			LET pk_status = 1 #@g00914 
		WHEN 100 #@g00915 
			LET pk_status = 0 #@g00916 
		WHEN sqlca.sqlerrd[2] = 104 #@g00917 
			LET pk_status = -1 # RECORD locked #@g00918 
		WHEN sqlca.sqlcode < 0 #@g00919 
			LET pk_status = sqlca.sqlcode #@g00920 
	END CASE #@g00921 

	RETURN pk_status #@g00923 
END FUNCTION ## status_pk_service_request #@g00924 

################################################################################################		                         	#@G00926
#   set_form_record_srv_rqst_f_service_request: assigns table VALUES TO form fields VALUES		                               	#@G00927
FUNCTION set_form_record_srv_rqst_f_service_request(tbl_contents) #@g00928 
	DEFINE frm_contents RECORD #@g00929 
		cmpy_code CHAR(2), #@g00930 
		sr_seed BIGSERIAL, #@g00931 
		sr_number VARCHAR(16), #@g00932 
		sr_parent VARCHAR(16), 
		sr_duplicate VARCHAR(16), #@g00933 
		sr_status CHAR(12), #@g00934 
		deadline DATETIME year TO minute, #@g00935 
		open_date DATETIME year TO minute, #@g00936 
		close_date DATETIME year TO second, #@g00937 
		abstract CHAR(80), #@g00938 
		severity SMALLINT, #@g00939 
		environment CHAR(20), #@g00940 
		sr_type CHAR(8), #@g00941 
		prd_module CHAR(15), #@g00942 
		prd_version CHAR(20), #@g00943 
		prd_code CHAR(13), #@g00944 
		os_code CHAR(10), #@g00945 
		os_version CHAR(20), #@g00946 
		serial_number CHAR(20), #@g00947 
		cust_references VARCHAR(64), #@g00948 
		description LVARCHAR(32000), #@g00949 
		rb_channel CHAR(6), #@g00950 
		reported_by VARCHAR(64), #@g00951 
		answer_to VARCHAR(64), #@g00952 
		at_channel CHAR(6), #@g00953 
		sr_owner VARCHAR(64), #@g00954 
		so_channel CHAR(6) #@g00955 
	END RECORD #@g00956 

	DEFINE tbl_contents RECORD #@g00958 
		sr_seed BIGSERIAL, #@g00959 
		cmpy_code CHAR(2), #@g00960 
		sr_number VARCHAR(16), #@g00961 
		sr_parent VARCHAR(16), 
		sr_duplicate VARCHAR(16), #@g00962 
		open_date DATETIME year TO minute, #@g00963 
		deadline DATETIME year TO minute, #@g00964 
		abstract CHAR(80), #@g00965 
		prd_code CHAR(13), #@g00966 
		prd_module CHAR(15), #@g00967 
		prd_version CHAR(20), #@g00968 
		os_code CHAR(10), #@g00969 
		os_version CHAR(20), #@g00970 
		cust_references VARCHAR(64), #@g00971 
		serial_number CHAR(20), #@g00972 
		sr_type CHAR(8), #@g00973 
		severity SMALLINT, #@g00974 
		environment CHAR(20), #@g00975 
		description LVARCHAR(32000), #@g00976 
		sr_status CHAR(12), #@g00977 
		reported_by VARCHAR(64), #@g00978 
		rb_channel CHAR(6), #@g00979 
		answer_to VARCHAR(64), #@g00980 
		at_channel CHAR(6), #@g00981 
		sr_owner VARCHAR(64), #@g00982 
		so_channel CHAR(6), #@g00983 
		close_date DATETIME year TO second #@g00984 
	END RECORD #@g00985 

	INITIALIZE frm_contents.* TO NULL #@g00987 
	LET frm_contents.cmpy_code = tbl_srv_rqst.cmpy_code #@g00988 
	LET frm_contents.sr_seed = tbl_srv_rqst.sr_seed #@g00989 
	LET frm_contents.sr_number = tbl_srv_rqst.sr_number #@g00990 
	LET frm_contents.sr_parent = tbl_srv_rqst.sr_parent 
	LET frm_contents.sr_duplicate = tbl_srv_rqst.sr_duplicate #@g00991 
	LET frm_contents.sr_status = tbl_srv_rqst.sr_status #@g00992 
	LET frm_contents.deadline = tbl_srv_rqst.deadline #@g00993 
	LET frm_contents.open_date = tbl_srv_rqst.open_date #@g00994 
	LET frm_contents.close_date = tbl_srv_rqst.close_date #@g00995 
	LET frm_contents.abstract = tbl_srv_rqst.abstract #@g00996 
	LET frm_contents.severity = tbl_srv_rqst.severity #@g00997 
	LET frm_contents.environment = tbl_srv_rqst.environment #@g00998 
	LET frm_contents.sr_type = tbl_srv_rqst.sr_type #@g00999 
	LET frm_contents.prd_module = tbl_srv_rqst.prd_module #@g01000 
	LET frm_contents.prd_version = tbl_srv_rqst.prd_version #@g01001 
	LET frm_contents.prd_code = tbl_srv_rqst.prd_code #@g01002 
	LET frm_contents.os_code = tbl_srv_rqst.os_code #@g01003 
	LET frm_contents.os_version = tbl_srv_rqst.os_version #@g01004 
	LET frm_contents.serial_number = tbl_srv_rqst.serial_number #@g01005 
	LET frm_contents.cust_references = tbl_srv_rqst.cust_references #@g01006 
	LET frm_contents.description = tbl_srv_rqst.description #@g01007 
	LET frm_contents.rb_channel = tbl_srv_rqst.rb_channel #@g01008 
	LET frm_contents.reported_by = tbl_srv_rqst.reported_by #@g01009 
	LET frm_contents.answer_to = tbl_srv_rqst.answer_to #@g01010 
	LET frm_contents.at_channel = tbl_srv_rqst.at_channel #@g01011 
	LET frm_contents.sr_owner = tbl_srv_rqst.sr_owner #@g01012 
	LET frm_contents.so_channel = tbl_srv_rqst.so_channel #@g01013 
	#@G01014
	RETURN frm_contents.* #@g01015 
END FUNCTION ## set_form_record_srv_rqst_f_service_request #@g01016 

################################################################################################		                         	#@G01018
## set_table_record_srv_rqst_service_request: assigns form fields value TO table VALUES		                                  	#@G01019
FUNCTION set_table_record_srv_rqst_service_request(mode,frm_contents) #@g01020 
	DEFINE MODE CHAR(1) #@g01021 
	DEFINE frm_contents RECORD #@g01022 
		cmpy_code CHAR(2), #@g01023 
		sr_seed BIGSERIAL, #@g01024 
		sr_number VARCHAR(16), #@g01025 
		sr_parent VARCHAR(16), 
		sr_duplicate VARCHAR(16), #@g01026 
		sr_status CHAR(12), #@g01027 
		deadline DATETIME year TO minute, #@g01028 
		open_date DATETIME year TO minute, #@g01029 
		close_date DATETIME year TO second, #@g01030 
		abstract CHAR(80), #@g01031 
		severity SMALLINT, #@g01032 
		environment CHAR(20), #@g01033 
		sr_type CHAR(8), #@g01034 
		prd_module CHAR(15), #@g01035 
		prd_version CHAR(20), #@g01036 
		prd_code CHAR(13), #@g01037 
		os_code CHAR(10), #@g01038 
		os_version CHAR(20), #@g01039 
		serial_number CHAR(20), #@g01040 
		cust_references VARCHAR(64), #@g01041 
		description LVARCHAR(32000), #@g01042 
		rb_channel CHAR(6), #@g01043 
		reported_by VARCHAR(64), #@g01044 
		answer_to VARCHAR(64), #@g01045 
		at_channel CHAR(6), #@g01046 
		sr_owner VARCHAR(64), #@g01047 
		so_channel CHAR(6) #@g01048 
	END RECORD #@g01049 

	DEFINE tbl_contents RECORD #@g01051 
		sr_seed BIGSERIAL, #@g01052 
		cmpy_code CHAR(2), #@g01053 
		sr_number VARCHAR(16), #@g01054 
		sr_parent VARCHAR(16), 
		sr_duplicate VARCHAR(16), #@g01055 
		open_date DATETIME year TO minute, #@g01056 
		deadline DATETIME year TO minute, #@g01057 
		abstract CHAR(80), #@g01058 
		prd_code CHAR(13), #@g01059 
		prd_module CHAR(15), #@g01060 
		prd_version CHAR(20), #@g01061 
		os_code CHAR(10), #@g01062 
		os_version CHAR(20), #@g01063 
		cust_references VARCHAR(64), #@g01064 
		serial_number CHAR(20), #@g01065 
		sr_type CHAR(8), #@g01066 
		severity SMALLINT, #@g01067 
		environment CHAR(20), #@g01068 
		description LVARCHAR(32000), #@g01069 
		sr_status CHAR(12), #@g01070 
		reported_by VARCHAR(64), #@g01071 
		rb_channel CHAR(6), #@g01072 
		answer_to VARCHAR(64), #@g01073 
		at_channel CHAR(6), #@g01074 
		sr_owner VARCHAR(64), #@g01075 
		so_channel CHAR(6), #@g01076 
		close_date DATETIME year TO second #@g01077 
	END RECORD #@g01078 

	INITIALIZE tbl_contents.* TO NULL #@g01080 
	IF MODE = "I" THEN #@g01081 
		LET tbl_contents.sr_seed = 0 #@g01082 
	END IF #@g01083 
	LET tbl_contents.cmpy_code = frm_srv_rqst.cmpy_code #@g01084 
	LET tbl_contents.sr_number = frm_srv_rqst.sr_number #@g01085 
	LET tbl_contents.sr_parent = frm_srv_rqst.sr_parent 
	LET tbl_contents.sr_duplicate = frm_srv_rqst.sr_duplicate #@g01086 
	LET tbl_contents.open_date = frm_srv_rqst.open_date #@g01087 
	LET tbl_contents.deadline = frm_srv_rqst.deadline #@g01088 
	LET tbl_contents.abstract = frm_srv_rqst.abstract #@g01089 
	LET tbl_contents.prd_code = frm_srv_rqst.prd_code #@g01090 
	LET tbl_contents.prd_module = frm_srv_rqst.prd_module #@g01091 
	LET tbl_contents.prd_version = frm_srv_rqst.prd_version #@g01092 
	LET tbl_contents.os_code = frm_srv_rqst.os_code #@g01093 
	LET tbl_contents.os_version = frm_srv_rqst.os_version #@g01094 
	LET tbl_contents.cust_references = frm_srv_rqst.cust_references #@g01095 
	LET tbl_contents.serial_number = frm_srv_rqst.serial_number #@g01096 
	LET tbl_contents.sr_type = frm_srv_rqst.sr_type #@g01097 
	LET tbl_contents.severity = frm_srv_rqst.severity #@g01098 
	LET tbl_contents.environment = frm_srv_rqst.environment #@g01099 
	LET tbl_contents.description = frm_srv_rqst.description #@g01100 
	LET tbl_contents.sr_status = frm_srv_rqst.sr_status #@g01101 
	LET tbl_contents.reported_by = frm_srv_rqst.reported_by #@g01102 
	LET tbl_contents.rb_channel = frm_srv_rqst.rb_channel #@g01103 
	LET tbl_contents.answer_to = frm_srv_rqst.answer_to #@g01104 
	LET tbl_contents.at_channel = frm_srv_rqst.at_channel #@g01105 
	LET tbl_contents.sr_owner = frm_srv_rqst.sr_owner #@g01106 
	LET tbl_contents.so_channel = frm_srv_rqst.so_channel #@g01107 
	LET tbl_contents.close_date = frm_srv_rqst.close_date #@g01108 
	#@G01109

	RETURN tbl_contents.* #@g01111 
END FUNCTION ## set_table_record_srv_rqst_service_request #@g01112 

FUNCTION lookup_service_request_operating_systems(l_os_code) #@g01114 
	DEFINE l_os_code CHAR(10) #@g01115 
	DEFINE l_os_name CHAR(30) #@g01116 
	WHENEVER ERROR CONTINUE #@g01117 
	SELECT os_name #@g01117 
	INTO l_os_name #@g01118 
	FROM operating_systems #@g01119 
	WHERE os_code = l_os_code #@g01120 
	IF sqlca.sqlcode = 100 THEN #@g01121 
		LET l_os_name = NULL #@g01122 
	END IF #@g01123 
	WHENEVER ERROR CALL error_mngmt #@g01124 
	RETURN sqlca.sqlcode,l_os_name #@g01125 
END FUNCTION #@g01126 

FUNCTION lookup_service_request_supported_products(l_cmpy_code,l_prd_code) #@g01128 
	DEFINE l_cmpy_code LIKE supported_products.cmpy_code #@g01129 
	DEFINE l_prd_code CHAR(13) #@g01130 
	DEFINE l_prd_name CHAR(40) #@g01131 
	WHENEVER ERROR CONTINUE #@g01132 
	SELECT prd_name #@g01132 
	INTO l_prd_name #@g01133 
	FROM supported_products #@g01134 
	WHERE cmpy_code = l_cmpy_code #@g01135 
	AND prd_code = l_prd_code 
	WHENEVER ERROR CALL error_mngmt #@g01140 
	IF sqlca.sqlcode = 100 THEN #@g01137 
		LET l_prd_name = NULL #@g01138 
	END IF #@g01139 

	RETURN sqlca.sqlcode,l_prd_name #@g01141 
END FUNCTION #@g01142 


FUNCTION lookup_service_request_sr_types(l_sr_type) #@g01128 
	DEFINE l_sr_type CHAR(13) #@g01130 
	DEFINE l_description CHAR(40) #@g01131 
	WHENEVER ERROR CONTINUE #@g01132 
	SELECT description #@g01132 
	INTO l_description #@g01133 
	FROM sr_types #@g01134 
	WHERE sr_type = l_sr_type #@g01136 
	IF sqlca.sqlcode = 100 THEN #@g01137 
		LET l_description = NULL #@g01138 
	END IF #@g01139 
	WHENEVER ERROR CALL error_mngmt #@g01140 
	RETURN sqlca.sqlcode,l_description #@g01141 
END FUNCTION 

FUNCTION fillupcomboboxes () 
	DEFINE l_prd_code CHAR(12) 
	DEFINE l_os_code CHAR(12) 

	# Sr Types
	LET cb_srtype = ui.Combobox.ForName("sr_type") #@g00101 
	CALL cb_srtype.AddItem("QUESTION") 
	CALL cb_srtype.AddItem("PROBLEM") 
	CALL cb_srtype.AddItem("FEATRQST") 
	CALL cb_srtype.AddItem("BUG") 
	CALL cb_srtype.AddItem("INFO") 

	# Environments
	LET cb_environment = ui.Combobox.ForName("environment") #@g00101 
	CALL cb_environment.AddItem("PRODUCTION") 
	CALL cb_environment.AddItem("DEVELOP") 
	CALL cb_environment.AddItem("TEST") 
	CALL cb_environment.AddItem("QA") 

	# reported_by channel
	LET cb_rb_channel = ui.Combobox.ForName("rb_channel") #@g00101 
	CALL cb_rb_channel.AddItem("email") 
	CALL cb_rb_channel.AddItem("phone") 
	CALL cb_rb_channel.AddItem("slack") 
	CALL cb_rb_channel.AddItem("skype") 

	# answerto channel
	LET cb_at_channel = ui.Combobox.ForName("at_channel") #@g00101 
	CALL cb_at_channel.AddItem("email") 
	CALL cb_at_channel.AddItem("phone") 
	CALL cb_at_channel.AddItem("slack") 
	CALL cb_at_channel.AddItem("skype") 

	# sr_owner channel
	LET cb_so_channel = ui.Combobox.ForName("so_channel") #@g00101 
	CALL cb_so_channel.AddItem("email") 
	CALL cb_so_channel.AddItem("phone") 
	CALL cb_so_channel.AddItem("slack") 
	CALL cb_so_channel.AddItem("skype") 

	# Products
	LET cb_prd_code = ui.Combobox.ForName("prd_code") 
	DECLARE crs_cb_prd_code CURSOR FOR 
	SELECT prd_code FROM supported_products 
	ORDER BY 1 

	FOREACH crs_cb_prd_code INTO l_prd_code 
		CALL cb_prd_code.additem(l_prd_code) 
	END FOREACH 

	# Operating Systems
	LET cb_os_code = ui.Combobox.ForName("os_code") 
	DECLARE crs_cb_os_code CURSOR FOR 
	SELECT os_code FROM operating_systems 
	ORDER BY 1 

	FOREACH crs_cb_os_code INTO l_os_code 
		CALL cb_os_code.additem(l_os_code) 
	END FOREACH 
END FUNCTION 
