# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-08-18 14:24:23		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\ffg/templates/standalone_standard.mtplt 		                            	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE pky_operating_systems RECORD #@g00008 
	os_code CHAR(10) #@g00009 
END RECORD #@g00010 

DEFINE tbl_opr_systems RECORD #@g00012 
	os_code CHAR(10), #@g00013 
	os_name CHAR(30) #@g00014 
END RECORD #@g00015 

DEFINE frm_opr_systems RECORD #@g00017 
	os_code CHAR(10), #@g00018 
	os_name CHAR(30) #@g00019 
END RECORD #@g00020 

DEFINE sav_opr_systems RECORD #@g00022 
	os_code CHAR(10), #@g00023 
	os_name CHAR(30) #@g00024 
END RECORD #@g00025 

#@G00027

MAIN #@g00029 
	DEFER interrupt #@g00030 
	#OPTIONS		                                                                                                                 	#@G00031
	#help file "opr_systems.iem",		                                                                                            	#@G00032
	#help key F1		                                                                                                             	#@G00033

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00035
	CALL ui_init(0) 		                                                                                                      	#@G00036
	LET m_program="p_opr_systems_operating_systems" #@g00037 

	CALL main_opr_systems_operating_systems() #@g00039 

END MAIN #@g00041 

#######################################################		                                                                  	#@G00043
# definition variable sccs		                                                                                               	#@G00044
FUNCTION mc_opr_systems_sccs() #@g00045 
	DEFINE sccs_var CHAR(70) #@g00046 
	LET sccs_var="%W% %D%" #@g00047 
END FUNCTION #@g00048 


FUNCTION main_opr_systems_operating_systems () #@g00051 

	--CALL init_program("kandoodb",m_program) #@g00053 

	OPEN WINDOW f_op_systems with FORM "f_op_systems" attributes(border) #@g00055 

	CALL init_cursor_opr_systems_operating_systems () # INITIALIZE all cursors ON master TABLE #@g00057 
	#@G00057

	CALL menu_opr_systems_operating_systems() #@g00059 

	CLOSE WINDOW f_op_systems #@g00061 

END FUNCTION #@g00063 

######################################################################		                                                   	#@G00065
# menu_opr_systems_operating_systems		                                                                                     	#@G00066
# the top level menu 		                                                                                                    	#@G00067
# INPUT arguments: none		                                                                                                  	#@G00068
# OUTPUT arguments: none		                                                                                                 	#@G00069
FUNCTION menu_opr_systems_operating_systems () #@g00070 
	DEFINE nbsel_operating_systems INTEGER #@g00071 
	DEFINE sql_stmt_status INTEGER #@g00072 
	DEFINE record_num INTEGER #@g00073 
	DEFINE ACTION SMALLINT #@g00074 
	DEFINE xnumber SMALLINT #@g00075 
	DEFINE arr_elem_num SMALLINT #@g00076 

	LET nbsel_operating_systems = 0 #@g00078 
	MENU "operating_systems" #@g00079 
		BEFORE MENU #@g00080 
			HIDE option "Next","Previous" #@g00081 
		COMMAND "Query" "Query data with multiple criteria operating_systems" #@g00082 
			#HELP 1000		                                                                                                              	#@G00083
			MESSAGE "" #@g00084 
			INITIALIZE frm_opr_systems.* TO NULL #@g00085 
			DISPLAY BY NAME frm_opr_systems.* #@g00086 
			HIDE option "Next","Previous" #@g00087 

			#@G00088

			CALL query_operating_systems() RETURNING nbsel_operating_systems #@g00090 
			IF nbsel_operating_systems <>0 THEN #@g00091 
				LET sql_stmt_status = sql_nxtprev_operating_systems(1) #@g00092 
				LET record_num = 1 #@g00093 
				DISPLAY BY NAME frm_opr_systems.* #@g00094 
				IF nbsel_operating_systems > 1 THEN #@g00095 
					SHOW option "Next" #@g00096 
					NEXT option "Next" #@g00097 
				END IF #@g00098 
				#@G00098
				#@G00098
				NEXT option "Next" #@g00099 
			ELSE #@g00100 
				ERROR "No row matches the criteria" #@g00101 
				NEXT option "Query" #@g00102 
			END IF #@g00103 

		COMMAND "Next" "DISPLAY Next RECORD operating_systems" #@g00105 
			#HELP 2000		                                                                                                              	#@G00106
			MESSAGE "" #@g00107 
			INITIALIZE frm_opr_systems.* TO NULL #@g00108 
			DISPLAY BY NAME frm_opr_systems.* #@g00109 
			#@G00109

			IF nbsel_operating_systems AND record_num < nbsel_operating_systems THEN #@g00111 
				LET sql_stmt_status = sql_nxtprev_operating_systems(1) #@g00112 
				LET record_num = record_num + 1 #@g00113 
				CASE #@g00114 
					WHEN sql_stmt_status = 0 #@g00115 
						ERROR "FETCH Last RECORD of this selection operating_systems" #@g00116 
					WHEN sql_stmt_status = -1 #@g00117 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00118 
					WHEN sql_stmt_status = 1 #@g00119 
						DISPLAY BY NAME frm_opr_systems.* #@g00120 
						IF record_num >= nbsel_operating_systems THEN #@g00121 
							HIDE option "Next" #@g00122 
						END IF #@g00123 
						IF record_num > 1 THEN #@g00124 
							SHOW option "Previous" #@g00125 
						ELSE #@g00126 
							HIDE option "Previous" #@g00127 
						END IF #@g00128 
						#@G00128
						#@G00128
				END CASE #@g00129 
			ELSE #@g00130 
				ERROR " Please SET query criteria previously operating_systems " #@g00131 
				NEXT option "Query" #@g00132 
			END IF #@g00133 

		COMMAND "Previous" "DISPLAY Previous RECORD operating_systems" #@g00135 
			#HELP 3000		                                                                                                              	#@G00136
			MESSAGE "" #@g00137 
			INITIALIZE frm_opr_systems.* TO NULL #@g00138 
			DISPLAY BY NAME frm_opr_systems.* #@g00139 
			#@G00139

			IF nbsel_operating_systems THEN #@g00141 
				LET sql_stmt_status = sql_nxtprev_operating_systems(-1) #@g00142 
				CASE #@g00143 
					WHEN sql_stmt_status = 0 #@g00144 
						ERROR "FETCH First RECORD of this selection operating_systems" #@g00145 
					WHEN sql_stmt_status < -1 #@g00146 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00147 
					WHEN sql_stmt_status = 1 #@g00148 
						LET record_num = record_num - 1 #@g00149 
						CALL set_form_record_opr_systems_f_op_systems(tbl_opr_systems.*) #@g00150 
						RETURNING frm_opr_systems.* #@g00151 
						DISPLAY BY NAME frm_opr_systems.* #@g00152 
						IF record_num = 1 THEN #@g00153 
							HIDE option "Previous" #@g00154 
						END IF #@g00155 
						IF record_num < nbsel_operating_systems THEN #@g00156 
							SHOW option "Next" #@g00157 
						ELSE #@g00158 
							HIDE option "Next" #@g00159 
						END IF #@g00160 
						#@G00160
						#@G00160
				END CASE #@g00161 
			ELSE #@g00162 
				ERROR " Please SET query criteria previously operating_systems " #@g00163 
				NEXT option "Query" #@g00164 
			END IF #@g00165 

			#@G00166

		COMMAND "Add" "Add a new RECORD operating_systems" #@g00168 
			#HELP 3000		                                                                                                              	#@G00169
			MESSAGE "" #@g00170 
			CALL add_operating_systems() #@g00171 
			MESSAGE "" #@g00172 

		COMMAND "Edit" "Modify current RECORD operating_systems" #@g00174 
			#hELP 4000		                                                                                                              	#@G00175
			MESSAGE "" #@g00176 
			IF nbsel_operating_systems THEN #@g00177 
				IF status_pk_operating_systems(pky_operating_systems.*) < 0 THEN #@g00178 
					ERROR "IS locked " #@g00179 
					NEXT option "Next" #@g00180 
				ELSE #@g00181 
					LET sql_stmt_status = modify_operating_systems(pky_operating_systems.*) #@g00182 
				END IF #@g00183 
			ELSE #@g00184 
				ERROR " Please SET query criteria previously operating_systems " #@g00185 
				NEXT option "Query" #@g00186 
			END IF #@g00187 

		COMMAND "Suppress" "Suppress current RECORD operating_systems" #@g00189 
			#HELP 5000		                                                                                                              	#@G00190
			MESSAGE "" #@g00191 
			IF nbsel_operating_systems THEN #@g00192 
				IF status_pk_operating_systems(pky_operating_systems.*) < 0 THEN #@g00193 
					ERROR "IS locked " #@g00194 
					NEXT option "Next" #@g00195 
				END IF #@g00196 
				WHILE true #@g00197 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00198 
					CASE #@g00199 
						WHEN ACTION = 0 OR ACTION = 1 #@g00200 
							EXIT WHILE # degage abandon #@g00201 
						WHEN ACTION = 2 #@g00202 
							CALL suppress_operating_systems(pky_operating_systems.*) #@g00203 
							RETURNING sql_stmt_status #@g00204 
							EXIT WHILE #@g00205 
					END CASE #@g00206 
				END WHILE #@g00207 
			ELSE #@g00208 
				ERROR "Please SET query criteria previously operating_systems " #@g00209 
				NEXT option "Query" #@g00210 
			END IF #@g00211 


		COMMAND "Exit" "EXIT PROGRAM" #@g00214 
			#HELP 9000		                                                                                                              	#@G00215
			MESSAGE "" #@g00216 
			EXIT MENU #@g00217 
	END MENU #@g00218 
END FUNCTION #@g00219 

#######################################################################		                                                  	#@G00221
#    Query_operating_systems : Query By Example on table operating_systems		                                               	#@G00222
# INPUT selection criteria,		                                                                                              	#@G00223
# PREPARE the query,		                                                                                                     	#@G00224
# OPEN the data SET		                                                                                                      	#@G00225
#######################################################################		                                                  	#@G00226
FUNCTION query_operating_systems() #@g00227 
	DEFINE rec_operating_systems,where_clause CHAR(1000) #@g00228 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00229 
	DEFINE l_pky RECORD #@g00230 
		os_code CHAR(10) #@g00231 
	END RECORD #@g00232 
	DEFINE reply CHAR(1) #@g00233 
	LET xnumber = 0 #@g00234 
	MESSAGE "Please INPUT query criteria" #@g00235 
	# INITIALIZE RECORD AND DISPLAY blank		                                                                                   	#@G00236
	INITIALIZE frm_opr_systems.* TO NULL #@g00237 
	DISPLAY BY NAME frm_opr_systems.* #@g00238 
	#@G00238

	CONSTRUCT BY NAME where_clause ON operating_systems.os_code, #@g00240 
	operating_systems.os_name #@g00241 

	#@G00242

	## Check whether criteria have been entered		                                                                             	#@G00244
		AFTER CONSTRUCT #@g00245 
			IF NOT field_touched(operating_systems.*) AND NOT int_flag THEN #@g00246 
				PROMPT "SELECT all rows, are you sure? " FOR CHAR reply #@g00247 
				CASE #@g00248 
					WHEN reply matches "[Oo]" #@g00249 
						EXIT CONSTRUCT #@g00250 
					OTHERWISE # saisie d'un critere de selection #@g00251 
						ERROR "Please INPUT a least one criteria" #@g00252 
						CONTINUE CONSTRUCT #@g00253 
				END CASE #@g00254 
			END IF #@g00255 
	END CONSTRUCT #@g00256 

	IF int_flag = true THEN #@g00258 
		MESSAGE "Quit with quit key" #@g00259 
		LET int_flag=0 #@g00260 
	ELSE #@g00261 
		LET xnumber = build_qbe_count_operating_systems(where_clause) #@g00262 
		IF xnumber > 0 THEN #@g00263 
			LET sql_stmt_status = build_qbe_row_contents_operating_systems(where_clause) #@g00264 
		ELSE #@g00265 
			RETURN -1 #@g00266 
		END IF #@g00267 

	END IF #@g00269 
	RETURN xnumber #@g00270 
END FUNCTION ## query_operating_systems #@g00271 

####################################################################		                                                     	#@G00273
## Add_operating_systems: add a new operating_systems row		                                                                	#@G00274
FUNCTION add_operating_systems() #@g00275 
	DEFINE sql_stmt_status SMALLINT #@g00276 
	DEFINE row_count SMALLINT #@g00277 
	DEFINE nbre_operating_systems ,action SMALLINT #@g00278 
	#@G00278
	INITIALIZE pky_operating_systems.* TO NULL #@g00279 
	INITIALIZE tbl_opr_systems.* TO NULL #@g00280 
	INITIALIZE frm_opr_systems.* TO NULL #@g00281 
	INITIALIZE sav_opr_systems.* TO NULL #@g00282 
	#@G00282
	WHILE true #@g00283 
		LET int_flag = false #@g00284 

		BEGIN WORK #@g00286 
			#@G00286
			INPUT BY NAME frm_opr_systems.os_code, #@g00287 
			frm_opr_systems.os_name #@g00288 

				AFTER FIELD os_code #@g00290 
					IF status_pk_operating_systems(frm_opr_systems.os_code) THEN #@g00291 
						ERROR "operating_systems: already exists" #@g00292 
						NEXT FIELD os_code #@g00293 
					END IF #@g00294 
					#@G00295
					#@G00295

					#@G00296
					#@G00296
			END INPUT #@g00297 
			IF int_flag = true THEN #@g00298 
				# Resign FROM INPUT		                                                                                                   	#@G00299
				LET int_flag=false #@g00300 
				LET frm_opr_systems.* = sav_opr_systems.* #@g00301 
				DISPLAY BY NAME frm_opr_systems.* #@g00302 
				MESSAGE "Quit with quit key Control-C" #@g00303 
				ROLLBACK WORK #@g00304 
				#@G00304
				EXIT WHILE #@g00305 
			END IF #@g00306 

			CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00308 
			CASE ACTION #@g00309 
				WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00310 
					CONTINUE WHILE # ON laisse tout affiche comme tel #@g00311 

				WHEN 2 # ON valide la transaction #@g00313 
					CALL set_table_record_opr_systems_operating_systems("I",frm_opr_systems.*) #@g00314 
					RETURNING tbl_opr_systems.* #@g00315 
					CALL sql_add_operating_systems() RETURNING sql_stmt_status #@g00316 

					CASE #@g00318 
						WHEN sql_stmt_status = 0 #@g00319 
							MESSAGE "Add Successful operation" #@g00320 
						COMMIT WORK #@g00321 
						#@G00321
						WHEN sql_stmt_status < 0 #@g00322 
							CALL display_eric_error("Add operating_systems:failed ") #@g00323 
							ROLLBACK WORK #@g00324 
							#@G00324
					END CASE #@g00325 
					EXIT WHILE #@g00326 

				WHEN 0 #@g00328 
					EXIT WHILE #@g00329 
			END CASE #@g00330 
		END WHILE #@g00331 
		RETURN sql_stmt_status #@g00332 
END FUNCTION ## add_operating_systems #@g00333 


#######################################################################		                                                  	#@G00336
# Modify_operating_systems : Edit a operating_systems RECORD		                                                             	#@G00337
# inbound: table primary key		                                                                                             	#@G00338
FUNCTION modify_operating_systems(pky) #@g00339 
	DEFINE ACTION SMALLINT #@g00340 
	DEFINE sql_stmt_status SMALLINT #@g00341 
	#@G00341
	DEFINE row_count SMALLINT #@g00342 
	DEFINE pky RECORD #@g00343 
		os_code CHAR(10) #@g00344 
	END RECORD #@g00345 

	## check IF RECORD can be accessed		                                                                                      	#@G00347
	WHILE true #@g00348 
		LET int_flag = false #@g00349 
		# Save Screen RECORD VALUES before altering		                                                                            	#@G00350
		LET sav_opr_systems.* = frm_opr_systems.* #@g00351 
		BEGIN WORK #@g00352 
			#@G00352

			INPUT BY NAME frm_opr_systems.os_name #@g00354 
			WITHOUT DEFAULTS #@g00355 
			#@G00355

			#@G00356

			#@G00357
			END INPUT #@g00358 
			IF int_flag = true THEN #@g00359 
				LET int_flag=false #@g00360 
				# Restore previous value		                                                                                              	#@G00361
				LET frm_opr_systems.* = sav_opr_systems.* #@g00362 
				DISPLAY BY NAME frm_opr_systems.* #@g00363 
				MESSAGE "$CancelCom Control-C" #@g00364 
				ROLLBACK WORK #@g00365 
				#@G00365
				EXIT WHILE #@g00366 
			END IF #@g00367 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00369 

			CASE #@g00371 
				WHEN ACTION = 0 #@g00372 
					# Resign, restore previous VALUES		                                                                                     	#@G00373
					LET frm_opr_systems.* = sav_opr_systems.* #@g00374 
					DISPLAY BY NAME frm_opr_systems.* #@g00375 
					EXIT WHILE # CANCEL operation #@g00376 

				WHEN ACTION = 1 #@g00378 
					# Redo		                                                                                                                	#@G00379
					CONTINUE WHILE #@g00380 

				WHEN ACTION = 2 #@g00382 
					# confirm UPDATE		                                                                                                      	#@G00383
					CALL set_table_record_opr_systems_operating_systems("U",frm_opr_systems.*) #@g00384 
					RETURNING tbl_opr_systems.* #@g00385 
					LET sql_stmt_status = sql_modify_operating_systems(pky.*) #@g00386 
					CASE #@g00387 
						WHEN sql_stmt_status = 0 #@g00388 
							MESSAGE "Modify Successful operation" #@g00389 
						COMMIT WORK #@g00390 
						#@G00390
						WHEN sql_stmt_status < 0 #@g00391 
							CALL display_eric_error("Modify operating_systems:failed ") #@g00392 
							ROLLBACK WORK #@g00393 
							#@G00393
					END CASE #@g00394 
					EXIT WHILE #@g00395 
			END CASE #@g00396 
		END WHILE #@g00397 
		RETURN sql_stmt_status #@g00398 
END FUNCTION ## modify_operating_systems(pky) #@g00399 


#######################################################################		                                                  	#@G00402
# DELETE A operating_systems row		                                                                                         	#@G00403
# inbound: table primary key		                                                                                             	#@G00404
FUNCTION suppress_operating_systems(pky) #@g00405 
	DEFINE ACTION SMALLINT #@g00406 
	DEFINE sql_stmt_status SMALLINT #@g00407 
	DEFINE pky RECORD #@g00408 
		os_code CHAR(10) #@g00409 
	END RECORD #@g00410 

	WHILE true #@g00412 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00413 
		BEGIN WORK #@g00414 
			#@G00414
			CASE #@g00415 
				WHEN ACTION = 0 OR ACTION = 1 #@g00416 
					EXIT WHILE # degage abandon #@g00417 
				WHEN ACTION = 2 #@g00418 
					CALL sql_suppress_operating_systems(pky.*) RETURNING sql_stmt_status #@g00419 
					CASE #@g00420 
						WHEN sql_stmt_status = 0 #@g00421 
							MESSAGE "Suppress Successful operation" #@g00422 
						COMMIT WORK #@g00423 
						#@G00423
						INITIALIZE frm_opr_systems.* TO NULL #@g00424 
						DISPLAY BY NAME frm_opr_systems.* #@g00425 
						#@G00425
						WHEN sql_stmt_status < 0 #@g00426 
							CALL display_eric_error("Suppress operating_systems:failed ") #@g00427 
							ROLLBACK WORK #@g00428 
							#@G00428
					END CASE #@g00429 
					EXIT WHILE #@g00430 
			END CASE #@g00431 
		END WHILE #@g00432 
		RETURN sql_stmt_status #@g00433 
END FUNCTION ## suppress_operating_systems(pky) #@g00434 

#########################################################################		                                                	#@G00436
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00437
FUNCTION init_cursor_opr_systems_operating_systems () #@g00438 
	DEFINE req_text CHAR(1500) #@g00439 

	# PREPARE CURSOR FOR full master table row contents, access by primary key		                                              	#@G00441
	LET req_text= #@g00442 
	"SELECT os_code,os_name ", #@g00443 
	" FROM operating_systems ", #@g00444 
	"WHERE os_code = ? " #@g00445 

	PREPARE sel_mrw_moperating_systems FROM req_text #@g00447 
	DECLARE crs_row_moperating_systems CURSOR FOR sel_mrw_moperating_systems #@g00448 

	# PREPARE CURSOR FOR row test / check IF locked		                                                                         	#@G00450
	LET req_text= "SELECT os_code ", #@g00451 
	" FROM operating_systems ", #@g00452 
	" WHERE os_code = ? " #@g00453 

	PREPARE sel_pky_moperating_systems FROM req_text #@g00455 
	DECLARE crs_pky_moperating_systems CURSOR FOR sel_pky_moperating_systems #@g00456 

	# PREPARE INSERT statement		                                                                                              	#@G00458
	LET req_text = #@g00459 
	"INSERT INTO operating_systems ( os_code,os_name )", #@g00460 
	" VALUES ( ?,? )" #@g00461 
	PREPARE pr_ins_moperating_systems FROM req_text #@g00462 

	# PREPARE UPDATE statement		                                                                                              	#@G00464
	LET req_text= #@g00465 
	"UPDATE operating_systems ", #@g00466 
	"SET ( os_name )", #@g00467 
	" = ( ? )", #@g00468 
	" WHERE os_code = ? " #@g00469 
	PREPARE pr_upd_moperating_systems FROM req_text #@g00470 

	# PREPARE DELETE statement		                                                                                              	#@G00472
	LET req_text= "DELETE FROM operating_systems ", #@g00473 
	" WHERE os_code = ? " #@g00474 

	PREPARE pr_del_moperating_systems FROM req_text #@g00476 

END FUNCTION ## init_cursor_opr_systems_operating_systems #@g00478 


#########################################################		                                                                	#@G00481
# Open the QBE CURSOR,		                                                                                                   	#@G00482
# counts returned rows_count,		                                                                                            	#@G00483
# OPEN the data SET,		                                                                                                     	#@G00484
# FETCH first row		                                                                                                        	#@G00485
# inbound parameter: query predicate		                                                                                     	#@G00486
# outbound parameters: number of rows retried		                                                                            	#@G00487
FUNCTION build_qbe_count_operating_systems(qry_stmt) #@g00488 
	DEFINE qry_stmt CHAR(500) #@g00489 
	DEFINE rec_operating_systems CHAR(1000) #@g00490 
	DEFINE row_count INTEGER #@g00491 
	DEFINE lsql_stmt_status INTEGER #@g00492 

	# DEFINE primary_key record		                                                                                             	#@G00494
	DEFINE l_pky RECORD #@g00495 
		os_code CHAR(10) #@g00496 
	END RECORD #@g00497 

	LET rec_operating_systems = #@g00499 
	"SELECT count(*) FROM operating_systems", #@g00500 
	" WHERE ",qry_stmt clipped #@g00501 

	PREPARE rec_nbr_moperating_systems FROM rec_operating_systems #@g00503 
	DECLARE crs_nbr_moperating_systems CURSOR FOR rec_nbr_moperating_systems #@g00504 

	WHENEVER ERROR CONTINUE #@g00506 
	OPEN crs_nbr_moperating_systems #@g00507 
	FETCH crs_nbr_moperating_systems INTO row_count #@g00508 
	WHENEVER ERROR CALL error_mngmt #@g00509 

	# IF FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00511
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00512 
		LET row_count =0 #@g00513 
	END IF #@g00514 
	RETURN row_count #@g00515 
END FUNCTION ## build_qbe_count_operating_systems #@g00516 

#########################################################		                                                                	#@G00518
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00519
# Declare AND OPEN the CURSOR		                                                                                            	#@G00520
# inbound param: query predicate		                                                                                         	#@G00521
#outbound parameter: query STATUS		                                                                                        	#@G00522
FUNCTION build_qbe_row_contents_operating_systems(qry_stmt) #@g00523 
	DEFINE qry_stmt CHAR(500) #@g00524 
	DEFINE rec_operating_systems CHAR(1000) #@g00525 
	DEFINE row_count INTEGER #@g00526 
	DEFINE lsql_stmt_status INTEGER #@g00527 

	# DEFINE primary_key record		                                                                                             	#@G00529
	DEFINE l_pky RECORD #@g00530 
		os_code CHAR(10) #@g00531 
	END RECORD #@g00532 

	# DISPLAY the selected columns		                                                                                          	#@G00534

	LET rec_operating_systems = "SELECT os_code ", #@g00536 
	" FROM operating_systems ", #@g00537 
	"WHERE ",qry_stmt clipped #@g00538 
	PREPARE rech_moperating_systems FROM rec_operating_systems #@g00539 

	# crs_scrl_moperating_systems : the first CURSOR selects all the primary keys (NOT all the table columns)		               	#@G00541

	DECLARE crs_scrl_moperating_systems SCROLL CURSOR with HOLD FOR rech_moperating_systems #@g00543 

	WHENEVER ERROR CONTINUE #@g00545 
	OPEN crs_scrl_moperating_systems #@g00546 
	WHENEVER ERROR CALL error_mngmt #@g00547 

	RETURN sqlca.sqlcode #@g00549 
END FUNCTION ## build_qbe_row_contents_operating_systems #@g00550 

#######################################################################		                                                  	#@G00552
# sql_nxtprev_operating_systems : FETCH NEXT OR PREVIOUS RECORD		                                                          	#@G00553
FUNCTION sql_nxtprev_operating_systems(offset) #@g00554 
	DEFINE offset SMALLINT #@g00555 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00556 
	DEFINE pky RECORD #@g00557 
		os_code CHAR(10) #@g00558 
	END RECORD #@g00559 

	WHENEVER ERROR CONTINUE #@g00561 
	FETCH relative offset crs_scrl_moperating_systems INTO pky_operating_systems.* #@g00562 
	WHENEVER ERROR CALL error_mngmt #@g00563 

	CASE #@g00565 
		WHEN sqlca.sqlcode = 100 #@g00566 
			LET record_found = 0 #@g00567 
		WHEN sqlca.sqlcode < 0 #@g00568 
			LET record_found = -1 #@g00569 
		OTHERWISE #@g00570 
			LET lsql_stmt_status = 1 #@g00571 
			CALL sql_fetch_mrw_operating_systems (pky_operating_systems.*) #@g00572 
			RETURNING record_found #@g00573 

	END CASE #@g00575 
	RETURN record_found #@g00576 
END FUNCTION ## sql_nxtprev_operating_systems #@g00577 

########################################################################		                                                 	#@G00579
# sql_FETCH_mrw_operating_systems : read a complete row accessing by primary key		                                         	#@G00580
# inbound parameter : primary key		                                                                                        	#@G00581
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00582
FUNCTION sql_fetch_mrw_operating_systems(pky_operating_systems) #@g00583 
	DEFINE sql_stmt_status SMALLINT #@g00584 
	DEFINE pky_operating_systems RECORD #@g00585 
		os_code CHAR(10) #@g00586 
	END RECORD #@g00587 
	#@G00587

	# read the table, access on primary key		                                                                                 	#@G00589
	WHENEVER ERROR CONTINUE #@g00590 
	OPEN crs_row_moperating_systems #@g00591 
	USING pky_operating_systems.* #@g00592 

	FETCH crs_row_moperating_systems INTO tbl_opr_systems.* #@g00594 

	WHENEVER ERROR CALL error_mngmt #@g00596 
	CASE #@g00597 
		WHEN sqlca.sqlcode = 100 #@g00598 
			LET sql_stmt_status = 0 #@g00599 
		WHEN sqlca.sqlcode < 0 #@g00600 
			LET sql_stmt_status = -1 #@g00601 
		OTHERWISE #@g00602 
			LET sql_stmt_status = 1 #@g00603 
			CALL set_form_record_opr_systems_f_op_systems(tbl_opr_systems.*) #@g00604 
			RETURNING frm_opr_systems.* #@g00605 
			#@G00605
	END CASE #@g00606 
	RETURN sql_stmt_status #@g00607 
END FUNCTION ## sql_fetch_mrw_operating_systems #@g00608 

########################################################################		                                                 	#@G00610
## INSERT in table operating_systems 		                                                                                    	#@G00611
########################################################################		                                                 	#@G00612
FUNCTION sql_add_operating_systems() #@g00613 
	DEFINE lsql_stmt_status INTEGER #@g00614 
	DEFINE row_count SMALLINT #@g00615 
	WHENEVER ERROR CONTINUE #@g00616 
	EXECUTE pr_ins_moperating_systems #@g00617 
	USING tbl_opr_systems.os_code, #@g00617 
	tbl_opr_systems.os_name # #@g00618 
	WHENEVER ERROR CALL error_mngmt #@g00619 

	IF sqlca.sqlcode < 0 THEN #@g00621 
		LET lsql_stmt_status = -1 #@g00622 
	ELSE #@g00623 
		LET lsql_stmt_status = 0 #@g00624 
	END IF #@g00625 
	RETURN lsql_stmt_status #@g00626 
END FUNCTION ## sql_add_operating_systems #@g00627 

########################################################################		                                                 	#@G00629
## sql_Modify_operating_systems :UPDATE operating_systems record		                                                         	#@G00630
FUNCTION sql_modify_operating_systems(pky) #@g00631 
	DEFINE lsql_stmt_status INTEGER #@g00632 
	DEFINE pky RECORD #@g00633 
		os_code CHAR(10) #@g00634 
	END RECORD #@g00635 

	WHENEVER ERROR CONTINUE #@g00637 
	EXECUTE pr_upd_moperating_systems #@g00638 
	USING tbl_opr_systems.os_name , #@g00639 
	pky.* #@g00640 

	WHENEVER ERROR CALL error_mngmt #@g00642 
	IF sqlca.sqlcode < 0 THEN #@g00643 

		LET lsql_stmt_status = -1 #@g00645 
	ELSE #@g00646 
		LET lsql_stmt_status = 0 #@g00647 
	END IF #@g00648 
	RETURN lsql_stmt_status #@g00649 
END FUNCTION ## sql_modify_operating_systems #@g00650 

########################################################################		                                                 	#@G00652
## sql_delete_operating_systems :delete current row in table operating_systems 		                                          	#@G00653
FUNCTION sql_suppress_operating_systems(pky) #@g00654 
	DEFINE lsql_stmt_status SMALLINT #@g00655 
	DEFINE pky RECORD #@g00656 
		os_code CHAR(10) #@g00657 
	END RECORD #@g00658 

	WHENEVER ERROR CONTINUE #@g00660 
	EXECUTE pr_del_moperating_systems #@g00661 
	USING pky.* #@g00662 

	WHENEVER ERROR CALL error_mngmt #@g00664 
	IF sqlca.sqlcode < 0 THEN #@g00665 
		LET lsql_stmt_status = -1 #@g00666 
	ELSE #@g00667 
		LET lsql_stmt_status=0 #@g00668 
	END IF #@g00669 
	RETURN lsql_stmt_status #@g00670 
END FUNCTION ## sql_suppress_operating_systems #@g00671 

################################################################################		                                         	#@G00673
#   status_pk_operating_systems : Check IF primary key exists		                                                            	#@G00674
# inbound parameter : RECORD of primary key		                                                                              	#@G00675
# outbound parameter:  STATUS > 0  IF exists, 0 IF no record, < 0 IF error		                                               	#@G00676
FUNCTION status_pk_operating_systems(pky) #@g00677 
	DEFINE pky RECORD #@g00678 
		os_code CHAR(10) #@g00679 
	END RECORD #@g00680 
	DEFINE pk_status INTEGER #@g00681 

	WHENEVER ERROR CONTINUE #@g00683 
	OPEN crs_pky_moperating_systems USING pky.* #@g00684 
	FETCH crs_pky_moperating_systems #@g00685 
	WHENEVER ERROR CALL error_mngmt #@g00686 

	CASE sqlca.sqlcode #@g00688 
		WHEN 0 #@g00689 
			LET pk_status = 1 #@g00690 
		WHEN 100 #@g00691 
			LET pk_status = 0 #@g00692 
		WHEN sqlca.sqlerrd[2] = 104 #@g00693 
			LET pk_status = -1 # RECORD locked #@g00694 
		WHEN sqlca.sqlcode < 0 #@g00695 
			LET pk_status = sqlca.sqlcode #@g00696 
	END CASE #@g00697 

	RETURN pk_status #@g00699 
END FUNCTION ## status_pk_operating_systems #@g00700 

################################################################################################		                         	#@G00702
#   set_form_record_opr_systems_f_op_systems: assigns table VALUES TO form fields VALUES		                                 	#@G00703
FUNCTION set_form_record_opr_systems_f_op_systems(tbl_contents) #@g00704 
	DEFINE frm_contents RECORD #@g00705 
		os_code CHAR(10), #@g00706 
		os_name CHAR(30) #@g00707 
	END RECORD #@g00708 

	DEFINE tbl_contents RECORD #@g00710 
		os_code CHAR(10), #@g00711 
		os_name CHAR(30) #@g00712 
	END RECORD #@g00713 

	INITIALIZE frm_contents.* TO NULL #@g00715 
	LET frm_contents.os_code = tbl_opr_systems.os_code #@g00716 
	LET frm_contents.os_name = tbl_opr_systems.os_name #@g00717 
	#@G00718
	RETURN frm_contents.* #@g00719 
END FUNCTION ## set_form_record_opr_systems_f_op_systems #@g00720 

################################################################################################		                         	#@G00722
## set_table_record_opr_systems_operating_systems: assigns form fields value TO table VALUES		                             	#@G00723
FUNCTION set_table_record_opr_systems_operating_systems(mode,frm_contents) #@g00724 
	DEFINE MODE CHAR(1) #@g00725 
	DEFINE frm_contents RECORD #@g00726 
		os_code CHAR(10), #@g00727 
		os_name CHAR(30) #@g00728 
	END RECORD #@g00729 

	DEFINE tbl_contents RECORD #@g00731 
		os_code CHAR(10), #@g00732 
		os_name CHAR(30) #@g00733 
	END RECORD #@g00734 

	INITIALIZE tbl_contents.* TO NULL #@g00736 
	LET tbl_contents.os_code = frm_opr_systems.os_code #@g00737 
	LET tbl_contents.os_name = frm_opr_systems.os_name #@g00738 
	#@G00739

	RETURN tbl_contents.* #@g00741 
END FUNCTION ## set_table_record_opr_systems_operating_systems #@g00742 
{
#@G00744

FUNCTION error_mngmt()		                                                                                                   	#@G00746
	DEFINE context RECORD		                                                                                                   	#@G00747
   logname       CHAR(8),		                                                                                                	#@G00748
   terminal      CHAR(8),		                                                                                                	#@G00749
   text_err      CHAR(80)		                                                                                                	#@G00750
END RECORD		                                                                                                               	#@G00751
	DEFINE fgl_err INTEGER		                                                                                                  	#@G00752
	DEFINE isam_err INTEGER		                                                                                                 	#@G00753
	DEFINE fullerrorMESSAGE String		                                                                                          	#@G00754
	LET fgl_err = sqlca.sqlcode		                                                                                             	#@G00755
	LET isam_err = sqlca.sqlerrd[2]		                                                                                         	#@G00756

END FUNCTION		                                                                                                             	#@G00758


FUNCTION confirm_operation(xpos,ypos,msg)		                                                                                	#@G00761
	DEFINE xpos,ypos SMALLINT  #can be removed		                                                                              	#@G00762
	DEFINE msg CHAR(40)		                                                                                                     	#@G00763
	DEFINE reply CHAR(5)		                                                                                                    	#@G00764
	DEFINE action SMALLINT		                                                                                                  	#@G00765
	DEFINE prpmsg CHAR(60)		                                                                                                  	#@G00766
	LET reply = fgl_winbutton("",msg,"Yes","Yes|No|Cancel","question",0) 		                                                   	#@G00767
	CASE		                                                                                                                    	#@G00768
	WHEN reply = "Yes"		                                                                                                      	#@G00769
		LET action= 2		                                                                                                          	#@G00770
	WHEN reply = "No"		                                                                                                       	#@G00771
		LET action= 1		                                                                                                          	#@G00772
	WHEN reply = "Cancel"		                                                                                                   	#@G00773
		LET action= 0		                                                                                                          	#@G00774
	OTHERWISE		                                                                                                               	#@G00775
		LET action= 1		                                                                                                          	#@G00776
	END CASE		                                                                                                                	#@G00777
	RETURN action		                                                                                                           	#@G00778
END FUNCTION		## confirm_operation		                                                                                       	#@G00779

FUNCTION display_eric_error(mesg)		                                                                                             	#@G00781
	DEFINE mesg CHAR(30)		                                                                                                    	#@G00782
	DEFINE error_MESSAGE STRING		                                                                                             	#@G00783
	CALL Errorlog(sqlerrMESSAGE)		                                                                                            	#@G00784
	LET error_MESSAGE = mesg clipped, " ",sqlca.sqlcode," ",sqlca.sqlerrd[2]," ",sqlca.sqlerrm clipped		                      	#@G00785
	CALL fgl_winmessage("Type OK TO continue",error_MESSAGE,"error")		                                                        	#@G00786
END FUNCTION		                                                                                                             	#@G00787

FUNCTION init_program(dbname,progname)		                                                                                   	#@G00789
	DEFINE progname CHAR(8)		                                                                                                 	#@G00790
	DEFINE dbname CHAR(8)		                                                                                                   	#@G00791
	DEFINE query CHAR(100)		                                                                                                  	#@G00792
	DEFINE logdir CHAR(128)		                                                                                                 	#@G00793
	DEFINE logfile CHAR(128)		                                                                                                	#@G00794

	WHENEVER ERROR CALL error_mngmt		                                                                                         	#@G00796
	LET logdir=fgl_getenv("LOGDIR")		                                                                                         	#@G00797
	IF length(logdir) = 0 THEN		                                                                                              	#@G00798
	   LET logdir="."		                                                                                                       	#@G00799
	END IF		                                                                                                                  	#@G00800
	LET logfile=logdir clipped,"/",progname clipped,".log"		                                                                  	#@G00801
	CALL STARTLOG (logfile)		                                                                                                 	#@G00802
	LET query = "database ",dbname clipped		                                                                                  	#@G00803
	PREPARE openbase FROM query		                                                                                             	#@G00804
	EXECUTE openbase		                                                                                                        	#@G00805
	WHENEVER ERROR CONTINUE		                                                                                                 	#@G00806
	IF sqlca.sqlcode < 0 THEN		                                                                                               	#@G00807
	   ERROR "The database IS NOT available"		                                                                                	#@G00808
	   EXIT PROGRAM		                                                                                                         	#@G00809
	END IF		                                                                                                                  	#@G00810
	WHENEVER ERROR CALL error_mngmt		                                                                                         	#@G00811
END FUNCTION		                                                                                                             	#@G00812

#@G00814

#@G00816
}