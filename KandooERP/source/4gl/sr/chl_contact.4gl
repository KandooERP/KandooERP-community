# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-10-02 19:34:28		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\Ffg/templates/child_standard.mtplt 		                                 	#@G00003
############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE contact_channel_pky_array DYNAMIC ARRAY OF RECORD #@g00005 
	cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00005 
	cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00006 
END RECORD #@g00007 

DEFINE contact_channel_sr_array DYNAMIC ARRAY OF RECORD #@g00009 
	cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00009 
	cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00009 
	is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00009 
	valid_from LIKE contact_channel.valid_from, # DATE #@g00009 
	valid_to LIKE contact_channel.valid_to # DATE #@g00010 
END RECORD #@g00011 

DEFINE contact_channel_status_array DYNAMIC ARRAY OF SMALLINT #@g00013 

DEFINE tbl_contact_channel RECORD #@g00015 
	contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00015 
	cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00015 
	cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00015 
	is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00015 
	valid_from LIKE contact_channel.valid_from, # DATE #@g00015 
	valid_to LIKE contact_channel.valid_to # DATE #@g00016 
END RECORD #@g00017 

#################################################################################################		                        	#@G00019
FUNCTION prepare_queries_contact_contact_channel () #@g00020 
	# this function INITIALIZEs all cursors AND prepared statements for the contact_channel AND lookups		                      	#@G00021
	#################################################################################################		                        	#@G00022
	DEFINE sql_stmt STRING #@g00023 
	# Prepare the CURSOR TO display the contact_channel array		                                                               	#@G00024
	# using foreign key pointing TO contact		                                                                                 	#@G00025

	LET sql_stmt = "SELECT contact_channel.cc_id,contact_channel.cc_channel ,", #@g00027 
	"contact_channel.cc_channel,", #@g00028 
	"contact_channel.cc_id,", #@g00029 
	"contact_channel.is_main_contact,", #@g00030 
	"contact_channel.valid_from,", #@g00031 
	"contact_channel.valid_to", #@g00032 
	#@G00033
	" FROM contact_channel, ", #@g00033 
	"contact ", #@g00033 
	"WHERE contact_channel.contact_seed = contact.contact_seed ", #@g00033 
	#@G00034
	" AND contact_channel.contact_seed = ? ", #@g00035 
	" ORDER BY contact_channel.cc_id,contact_channel.cc_channel " #@g00036 
	PREPARE pr_child_contact_channel FROM sql_stmt #@g00037 
	DECLARE crs_child_contact_channel CURSOR FOR pr_child_contact_channel #@g00038 

	# PREPARE INSERT statement		                                                                                              	#@G00040
	LET sql_stmt = #@g00041 
	"INSERT INTO contact_channel ( contact_seed,cc_id,cc_channel,is_main_contact,valid_from,valid_to )", #@g00042 
	" VALUES ( ?,?,?,?,?,? )" #@g00043 
	PREPARE pr_ins_contact_channel FROM sql_stmt #@g00044 

	# PREPARE UPDATE statement		                                                                                              	#@G00046
	LET sql_stmt= #@g00047 
	"UPDATE contact_channel ", #@g00048 
	"SET ( contact_seed,is_main_contact,valid_from,valid_to )", #@g00049 
	" = ( ?,?,?,? )", #@g00050 
	" WHERE cc_id = ? 
	AND cc_channel = ? " #@G00052 
	PREPARE pr_upd_contact_channel FROM sql_stmt #@g00053 

	# PREPARE DELETE statement		                                                                                              	#@G00055
	LET sql_stmt= "DELETE FROM contact_channel ", #@g00056 
	" WHERE cc_id = ? 
	AND cc_channel = ? " #@G00058 
	PREPARE pr_del_contact_channel FROM sql_stmt #@g00059 

END FUNCTION #@g00061 

#######################################################################		                                                  	#@G00063
FUNCTION open_array_crs_contact_channel_sr_array(fky) #@g00064 
	# This function opens the main CURSOR for the table contact_channel		                                                      	#@G00065
	#######################################################################		                                                  	#@G00066
	DEFINE lsql_ok INTEGER #@g00067 
	DEFINE fky RECORD #@g00068 
		contact_seed LIKE contact_channel.contact_seed # BIGINT #@g00069 
	END RECORD #@g00070 

	WHENEVER ERROR CONTINUE #@g00072 
	OPEN crs_child_contact_channel USING fky.* #@g00073 

	WHENEVER ERROR CALL error_mngmt #@g00075 
	CASE #@g00076 
		WHEN sqlca.sqlcode = 100 #@g00077 
			LET lsql_ok = 0 #@g00078 
		WHEN sqlca.sqlcode < 0 #@g00079 
			LET lsql_ok = -1 #@g00080 
		OTHERWISE #@g00081 
			LET lsql_ok = 1 #@g00082 
	END CASE #@g00083 
	RETURN lsql_ok #@g00084 
END FUNCTION #@g00085 

########################################################################		                                                 	#@G00087
## INSERT in table contact_channel 		                                                                                      	#@G00088
########################################################################		                                                 	#@G00089
FUNCTION sql_insert_contact_channel(lr_contact_channel) #@g00090 
	DEFINE lr_contact_channel RECORD #@g00091 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00091 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00091 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00091 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00091 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00091 
		valid_to LIKE contact_channel.valid_to # DATE #@g00092 
	END RECORD #@g00093 

	DEFINE lsql_stmt_status INTEGER #@g00095 
	DEFINE lookup_status INTEGER #@g00096 
	DEFINE nb_deleted_rows INTEGER #@g00097 

	WHENEVER ERROR CONTINUE #@g00099 
	EXECUTE pr_ins_contact_channel #@g00100 
	USING lr_contact_channel.contact_seed, #@g00100 
	lr_contact_channel.cc_id, #@g00100 
	lr_contact_channel.cc_channel, #@g00100 
	lr_contact_channel.is_main_contact, #@g00100 
	lr_contact_channel.valid_from, #@g00100 
	lr_contact_channel.valid_to # #@g00101 
	WHENEVER ERROR CALL error_mngmt #@g00102 

	CASE #@g00104 
		WHEN sqlca.sqlcode = 0 #@g00105 
			LET lsql_stmt_status = 0 #@g00106 
		WHEN sqlca.sqlcode < 0 #@g00107 
			CALL display_eric_error("sql_insert contact_channel:failed ") #@g00108 
			LET lsql_stmt_status = -1 #@g00109 
	END CASE #@g00110 
	RETURN lsql_stmt_status #@g00111 
END FUNCTION #@g00112 

########################################################################		                                                 	#@G00114
## sql_update_contact_channel :UPDATE current contact_channel record		                                                     	#@G00115
########################################################################		                                                 	#@G00116
FUNCTION sql_update_contact_channel(pky,lr_contact_channel) #@g00117 
	DEFINE lr_contact_channel RECORD #@g00118 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00118 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00118 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00118 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00118 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00118 
		valid_to LIKE contact_channel.valid_to # DATE #@g00119 
	END RECORD #@g00120 
	DEFINE lsql_stmt_status INTEGER #@g00121 
	DEFINE nb_modified_rows INTEGER #@g00122 
	DEFINE pky RECORD #@g00123 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00123 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00124 
	END RECORD #@g00125 

	WHENEVER ERROR CONTINUE #@g00127 
	EXECUTE pr_upd_contact_channel #@g00128 
	USING lr_contact_channel.contact_seed, #@g00128 
	lr_contact_channel.is_main_contact, #@g00128 
	lr_contact_channel.valid_from, #@g00128 
	lr_contact_channel.valid_to , #@g00129 
	pky.* #@g00130 

	WHENEVER ERROR CALL error_mngmt #@g00132 
	CASE #@g00133 
		WHEN sqlca.sqlcode = 0 #@g00134 
			LET lsql_stmt_status = 0 #@g00135 
			LET nb_modified_rows = sqlca.sqlerrd[3] #@g00136 
		WHEN sqlca.sqlcode < 0 #@g00137 
			CALL display_eric_error("sql_update contact_channel:failed ") #@g00138 
			LET lsql_stmt_status = -1 #@g00139 
			LET nb_modified_rows = 0 #@g00140 
	END CASE #@g00141 
	RETURN lsql_stmt_status,nb_modified_rows #@g00142 
END FUNCTION #@g00143 

########################################################################		                                                 	#@G00145
## delete_contact_channel :delete Selected row in table contact_channel 		                                                 	#@G00146
########################################################################		                                                 	#@G00147
FUNCTION sql_delete_contact_channel(pky) #@g00148 
	DEFINE lsql_stmt_status SMALLINT #@g00149 
	DEFINE nb_deleted_rows INTEGER #@g00150 
	DEFINE pky RECORD #@g00151 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00151 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00152 
	END RECORD #@g00153 

	WHENEVER ERROR CONTINUE #@g00155 
	EXECUTE pr_del_contact_channel USING pky.* #@g00156 

	WHENEVER ERROR CALL error_mngmt #@g00158 
	CASE #@g00159 
		WHEN sqlca.sqlcode = 0 #@g00160 
			LET lsql_stmt_status=0 #@g00161 
			LET nb_deleted_rows = sqlca.sqlerrd[3] #@g00162 
		WHEN sqlca.sqlcode < 0 #@g00163 
			CALL display_eric_error("sql_delete contact_channel:failed ") #@g00164 
			LET lsql_stmt_status = -1 #@g00165 
	END CASE #@g00166 

	RETURN lsql_stmt_status,nb_deleted_rows #@g00168 
END FUNCTION #@g00169 

################################################################################		                                         	#@G00171
FUNCTION status_pkcontact_channel(pky) #@g00172 
	# This function Checks if primary key exists		                                                                             	#@G00173
	# inbound parameter : record of primary key		                                                                              	#@G00174
	# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00175
	################################################################################		                                         	#@G00176
	DEFINE pky RECORD #@g00177 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00177 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00178 
	END RECORD #@g00179 
	DEFINE pk_status INTEGER #@g00180 

	WHENEVER ERROR CONTINUE #@g00182 
	OPEN crs_pky_mcontact USING pky.* #@g00183 
	FETCH crs_pky_mcontact #@g00184 
	WHENEVER ERROR CALL error_mngmt #@g00185 

	CASE sqlca.sqlcode #@g00187 
		WHEN 0 #@g00188 
			LET pk_status = 1 #@g00189 
		WHEN 100 #@g00190 
			LET pk_status = 0 #@g00191 
		WHEN sqlca.sqlerrd[2] = 104 #@g00192 
			LET pk_status = -1 # RECORD locked #@g00193 
		WHEN sqlca.sqlcode < 0 #@g00194 
			LET pk_status = sqlca.sqlcode #@g00195 
	END CASE #@g00196 
	RETURN pk_status #@g00197 
END FUNCTION #@g00198 

#@G00200

#######################################################################		                                                  	#@G00202
FUNCTION initialize_array_contact_channel() #@g00203 
	#######################################################################		                                                  	#@G00204
	# INITIALIZEs arrays		                                                                                                    	#@G00205
	CALL contact_channel_sr_array.clear() #@g00206 
	CALL contact_channel_pky_array.clear() #@g00207 
	CALL contact_channel_status_array.clear() #@g00208 
END FUNCTION #@g00209 

######################################################################################################################################################			#@G00211
FUNCTION display_array_contact_channel (fky,browse) #@g00212 
	# This function displays the array data (contact_channel_sr_array) based on the foreign key 		                             	#@G00213
	# browse: FALSE means that the array IS displayed without possibility of browsing inside (just show array AND skip TO next parent row)			#@G00214
	######################################################################################################################################################			#@G00215
	DEFINE elem_num,choice,xpos,ypos INTEGER #@g00216 
	DEFINE arrcurr,srcline INTEGER #@g00217 
	DEFINE sql_ok INTEGER #@g00218 
	DEFINE qbe_stmt STRING #@g00219 
	DEFINE browse boolean #@g00220 
	DEFINE where_clause STRING #@g00221 
	DEFINE fky RECORD #@g00222 
		contact_seed LIKE contact_channel.contact_seed # BIGINT #@g00223 
	END RECORD #@g00224 
	DEFINE sql_stmt_status INTEGER #@g00225 

	IF browse = false THEN #@g00227 
		# opening array CURSOR AND FETCH data only when reading the parent row		                                                 	#@G00228
		LET sql_ok = open_array_crs_contact_channel_sr_array(fky.*) #@g00229 
		LET elem_num = 1 #@g00230 
		FOREACH crs_child_contact_channel INTO contact_channel_pky_array[elem_num].*,contact_channel_sr_array[elem_num].* #@g00231 
			LET contact_channel_status_array[elem_num] = 0 # elements exists #@g00232 
			LET elem_num = elem_num + 1 #@g00233 
		END FOREACH #@g00234 
		IF elem_num > 1 THEN #@g00235 
			CALL contact_channel_sr_array.deleteelement(elem_num) #@g00236 
		END IF #@g00237 
	END IF #@g00238 

	DISPLAY ARRAY contact_channel_sr_array #@g00240 
	TO sr_contact_channel.* #@g00241 
		BEFORE DISPLAY #@g00242 
			IF browse = false THEN #@g00243 
				EXIT DISPLAY #@g00244 
			END IF #@g00245 
	END DISPLAY #@g00246 

	RETURN elem_num-1 #@g00248 
END FUNCTION #@g00249 

###########################################################################################################		              	#@G00251
FUNCTION edit_array_contact_channel (pky_contact,p_do_browse) #@g00252 
	# This function calls the INPUT array function (input_array_contact_channel) TO edit the array data		                      	#@G00253
	# then, accordingly, the SQL statement functions (array_bulk_update_)		                                                    	#@G00254
	# it IS generally called FROM another module		                                                                             	#@G00255
	###########################################################################################################		              	#@G00256
	DEFINE pky_contact RECORD #@g00263 
		contact_seed LIKE contact.contact_seed # BIGSERIAL # OR IS it the foreign KEY here? #@g00264 
	END RECORD #@g00265 
	DEFINE p_do_browse BOOLEAN
	DEFINE srcline INTEGER #@g00257 
	DEFINE arrcurr INTEGER #@g00258 
	DEFINE bulk_update_status SMALLINT #@g00259 
	DEFINE nbr_edited_rows INTEGER #@g00260 
	DEFINE sql_action SMALLINT #@g00261 
	DEFINE i SMALLINT #@g00262 

	BEGIN WORK #@g00266 
		#@G00266
		WHILE true #@g00267 
			CALL input_array_contact_channel (pky_contact.*) RETURNING nbr_edited_rows,sql_action #@g00267 
			#@G00267
			IF nbr_edited_rows > 0 THEN #@g00268 
				CASE #@g00269 
					WHEN sql_action = 2 #@g00270 
						LET bulk_update_status = array_bulk_update_contact_channel (pky_contact) #@g00271 
						IF bulk_update_status < 0 THEN #@g00272 
							ROLLBACK WORK #@g00272 
							#@G00272
							ERROR "input_array_ failed" #@g00273 
						ELSE #@g00274 
							ERROR "input_array_ Successful operation" #@g00275 
						COMMIT WORK #@g00275 
						#@G00275
						EXIT WHILE #@g00276 
					END IF #@g00277 
					WHEN sql_action = 1 #@g00278 
						# No		                                                                                                                 	#@G00279
						ERROR "Please INPUT ARRAY AGAIN" #@g00280 
					WHEN sql_action = 0 #@g00281 
						# Cancel		                                                                                                             	#@G00282
						MESSAGE "Cancelled, EXIT INPUT ARRAY" #@g00283 
						EXIT WHILE #@g00284 
				END CASE #@g00285 
			ELSE #@g00286 
				# Nothing		                                                                                                             	#@G00287
				MESSAGE "Nothing has been changed" #@g00288 
				EXIT WHILE #@g00289 
			END IF #@g00290 
		END WHILE #@g00291 

END FUNCTION #@g00293 

####################################################################################################################		     	#@G00295
FUNCTION input_array_contact_channel (pky_contact) #@g00296 
	## this function operates INPUT ARRAY for the table contact_channel		                                                      	#@G00297
	# it handles 3 arrays:		                                                                                                   	#@G00298
	# 1) The STATUS array  (contact_channel_status_array) contains the STATUS for each element: 		                             	#@G00299
	#    NULL=>no data, 0=>elements NOT touched, 1=>element TO INSERT, 2=>element TO UPDATE, -1=>element TO DELETE		           	#@G00300
	# 2) the Input Data Array (contact_channel_sr_array) will contain the data input by the user		                             	#@G00301
	# 3) the primary key array (pky_contact) contains the primary key VALUES of each element		                                 	#@G00302
	###################################################################################################################		      	#@G00303
	DEFINE arrcnt INTEGER #@g00304 
	DEFINE srcline INTEGER #@g00305 
	DEFINE arrcurr INTEGER #@g00306 
	DEFINE last_element INTEGER #@g00307 
	DEFINE lookup_status INTEGER #@g00308 
	DEFINE sql_stmt_status INTEGER #@g00309 
	DEFINE nbr_edited_rows INTEGER #@g00310 
	DEFINE sql_action SMALLINT #@g00311 
	DEFINE ins_key SMALLINT #@g00312 
	DEFINE pky_contact RECORD #@g00313 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00314 
	END RECORD #@g00315 
	DEFINE sav_contact_channel_sr_array RECORD #@g00316 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00316 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00316 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00316 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00316 
		valid_to LIKE contact_channel.valid_to # DATE #@g00317 
	END RECORD #@g00318 
	DEFINE sql_ok SMALLINT #@g00319 
	LET nbr_edited_rows = 0 #@g00320 

	LET int_flag = false #@g00322 
	LET ins_key = false #@g00323 

	INPUT ARRAY contact_channel_sr_array WITHOUT DEFAULTS #@g00325 
	FROM sr_contact_channel.* #@g00326 
	attribute(normal) #@g00327 
		ON KEY (INTERRUPT) #@g00328 
			# Cancel FROM input		                                                                                                    	#@G00329
			LET int_flag=false #@g00330 
			LET arrcurr = arr_curr() #@g00331 
			LET srcline = scr_line () #@g00332 
			LET contact_channel_sr_array[arrcurr].* = sav_contact_channel_sr_array.* #@g00333 
			DISPLAY contact_channel_sr_array[arrcurr].* TO sr_contact_channel[srcline].* #@g00334 
			MESSAGE "Quit with quit key Control-C" #@g00335 
			ROLLBACK WORK #@g00335 
			#@G00335
			EXIT INPUT #@g00336 

		BEFORE INSERT #@g00338 
			# INSERT a row in pky_array		                                                                                            	#@G00339
			CALL contact_channel_pky_array.insert(arrcurr) #@g00340 
			INITIALIZE contact_channel_pky_array[arrcurr].* TO NULL #@g00341 
			# INSERT a row in status_array		                                                                                         	#@G00342
			CALL contact_channel_status_array.insert(arrcurr) #@g00343 
			LET contact_channel_status_array[arrcurr] = NULL #@g00344 

		AFTER DELETE #@g00346 
			IF contact_channel_status_array[arrcurr] IS NOT NULL THEN #@g00347 
				LET last_element = contact_channel_status_array.getsize() #@g00348 
				# The deleted element becomes the last element of status_array AND flagged -1		                                         	#@G00349
				# The pky IS also copied TO the last element		                                                                          	#@G00350
				LET contact_channel_status_array[last_element] = -1 # TO be deleted #@g00351 
				LET contact_channel_pky_array[last_element].* = contact_channel_pky_array[arrcurr].* #@g00352 
				LET nbr_edited_rows = nbr_edited_rows + 1 #@g00353 
			END IF #@g00354 

		BEFORE ROW #@g00356 
			LET srcline = scr_line() #@g00357 
			LET arrcurr = arr_curr() #@g00358 
			LET sav_contact_channel_sr_array.* = contact_channel_sr_array[arrcurr].* #@g00359 

		BEFORE FIELD valid_from #@g00323 
			LET contact_channel_sr_array[arrcurr].valid_from = CURRENT 

			#@G00361
			#@G00362
		AFTER ROW #@g00364 
			IF field_touched (sr_contact_channel[srcline].*) THEN #@g00365 
				LET nbr_edited_rows = nbr_edited_rows + 1 #@g00366 
				CASE #@g00367 
					WHEN contact_channel_status_array[arrcurr] = 0 # existing #@g00368 
						LET contact_channel_status_array[arrcurr] = 2 # TO be modified #@g00369 
						LET contact_channel_pky_array[arrcurr].cc_channel = contact_channel_sr_array[arrcurr].cc_channel #@g00369 
						LET contact_channel_pky_array[arrcurr].cc_id = contact_channel_sr_array[arrcurr].cc_id #@g00369 
						#@G00370

					WHEN contact_channel_status_array[arrcurr] IS NULL # new #@g00372 
						LET contact_channel_status_array[arrcurr] = 1 # TO be inserted #@g00373 
						LET contact_channel_pky_array[arrcurr].cc_channel = contact_channel_sr_array[arrcurr].cc_channel #@g00373 
						LET contact_channel_pky_array[arrcurr].cc_id = contact_channel_sr_array[arrcurr].cc_id #@g00373 
						#@G00374
				END CASE #@g00375 
				IF status_pkcontact_channel(contact_channel_pky_array[arrcurr].cc_channel,contact_channel_pky_array[arrcurr].cc_id) THEN #@g00376 
					ERROR "contact_channel: already exists" #@g00377 
					NEXT FIELD valid_to #@g00378 
				END IF #@g00379 
				#@G00380
			END IF #@g00381 

		AFTER INPUT #@g00383 
			IF int_flag THEN #@g00384 
				LET int_flag = false #@g00385 
				ERROR " Cancel contact_channel" #@g00386 
				LET nbr_edited_rows = 0 #@g00387 
				LET sql_action = 0 #@g00388 
			ELSE #@g00389 
				LET sql_action = confirm_operation(5,10,"input_array_ ") #@g00390 
				IF sql_action = 1 THEN #@g00391 
					CONTINUE INPUT #@g00392 
				END IF #@g00393 
			END IF #@g00394 
	END INPUT #@g00395 
	RETURN nbr_edited_rows,sql_action #@g00396 
END FUNCTION #@g00397 

######################################################################################################		                   	#@G00399
FUNCTION set_form_record_contact_sr_contact_channel(tbl_contents) #@g00400 
	# This function assigns the VALUES FROM the table sr_contact_channel TO the form record frm_contents		                     	#@G00401
	######################################################################################################		                   	#@G00402
	DEFINE fgl_status SMALLINT #@g00403 
	DEFINE frm_contents RECORD #@g00404 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00404 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00404 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00404 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00404 
		valid_to LIKE contact_channel.valid_to # DATE #@g00405 
	END RECORD #@g00406 

	DEFINE tbl_contents RECORD #@g00408 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00408 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00408 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00408 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00408 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00408 
		valid_to LIKE contact_channel.valid_to # DATE #@g00409 
	END RECORD #@g00410 

	INITIALIZE frm_contents.* TO NULL #@g00412 
	LET frm_contents.cc_channel = tbl_contact_channel.cc_channel #@g00413 
	LET frm_contents.cc_id = tbl_contact_channel.cc_id #@g00414 
	LET frm_contents.is_main_contact = tbl_contact_channel.is_main_contact #@g00415 
	LET frm_contents.valid_from = tbl_contact_channel.valid_from #@g00416 
	LET frm_contents.valid_to = tbl_contact_channel.valid_to #@g00417 
	#@G00418
	CASE #@g00419 
		WHEN status = 0 #@g00420 
			LET fgl_status = 1 #@g00421 
		WHEN status < 0 #@g00422 
			LET fgl_status = status #@g00423 
		OTHERWISE #@g00424 
			LET fgl_status = status #@g00425 
	END CASE #@g00426 
	RETURN fgl_status,frm_contents.* #@g00427 
END FUNCTION #@g00428 

######################################################################################################		                   	#@G00430
FUNCTION set_table_record_contact_contact_channel(fky,sql_stmt,pky,element_contents) #@g00431 
	# This function assigns the VALUES FROM the array element(element_contents) TO the table record (tbl_contents)		           	#@G00432
	# It distinguishes the primary key (pky) of the table contact_channeland the foreign key (fky) point TO the parent table (contact)			#@G00433
	######################################################################################################		                   	#@G00434
	DEFINE sql_stmt SMALLINT #@g00435 
	DEFINE fgl_status SMALLINT #@g00436 
	DEFINE element_contents RECORD #@g00437 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00437 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00437 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00437 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00437 
		valid_to LIKE contact_channel.valid_to # DATE #@g00438 
	END RECORD #@g00439 
	DEFINE fky RECORD #@g00440 
		contact_seed LIKE contact_channel.contact_seed # BIGINT # OR IS it the foreign KEY here? #@g00441 
	END RECORD #@g00442 
	DEFINE pky RECORD #@g00443 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00443 
		cc_channel LIKE contact_channel.cc_channel # CHAR(6) #@g00444 
	END RECORD #@g00445 
	DEFINE tbl_contents RECORD #@g00446 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00446 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00446 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00446 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00446 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00446 
		valid_to LIKE contact_channel.valid_to # DATE #@g00447 
	END RECORD #@g00448 

	#WHENEVER ERROR CONTINUE		                                                                                                	#@G00450
	INITIALIZE tbl_contents.* TO NULL #@g00451 
	LET tbl_contents.contact_seed = fky.contact_seed #@g00452 
	IF sql_stmt = 1 THEN #@g00453 
		LET tbl_contents.cc_id = element_contents.cc_id #@g00454 
	END IF #@g00455 
	IF sql_stmt = 1 THEN #@g00456 
		LET tbl_contents.cc_channel = element_contents.cc_channel #@g00457 
	END IF #@g00458 
	LET tbl_contents.is_main_contact = element_contents.is_main_contact #@g00459 
	LET tbl_contents.valid_from = element_contents.valid_from #@g00460 
	LET tbl_contents.valid_to = element_contents.valid_to #@g00461 
	#@G00462
	WHENEVER ERROR CALL error_mngmt #@g00463 
	CASE #@g00464 
		WHEN status = 0 #@g00465 
			LET fgl_status = 1 #@g00466 
		WHEN status < 0 #@g00467 
			LET fgl_status = status #@g00468 
		OTHERWISE #@g00469 
			LET fgl_status = status #@g00470 
	END CASE #@g00471 
	RETURN fgl_status,tbl_contents.* #@g00472 
END FUNCTION #@g00473 

#############################################################################################################		            	#@G00475
FUNCTION array_bulk_update_contact_channel (fky) #@g00476 
	## This functions browses the STATUS array contact_channel_status_array,		                                                 	#@G00477
	# copies the element VALUES TO table VALUES (contact_channel)		                                                            	#@G00478
	# AND executes the request SQL operation requested for each element		                                                      	#@G00479
	#############################################################################################################		            	#@G00480
	DEFINE idx,arr_size INTEGER #@g00481 
	DEFINE updarr_status,fgl_status,global_status INTEGER #@g00482 
	DEFINE fky RECORD #@g00483 
		contact_seed LIKE contact_channel.contact_seed # BIGINT #@g00484 
	END RECORD #@g00485 

	DEFINE elements_contents RECORD #@g00487 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00487 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00487 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00487 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00487 
		valid_to LIKE contact_channel.valid_to # DATE #@g00488 
	END RECORD #@g00489 
	DEFINE l_contact_channel RECORD #@g00490 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00490 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00490 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00490 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00490 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00490 
		valid_to LIKE contact_channel.valid_to # DATE #@g00491 
	END RECORD #@g00492 
	LET global_status = 0 #@g00493 
	LET arr_size = contact_channel_status_array.getsize() #@g00494 
	FOR idx = 1 TO arr_size #@g00495 
		CASE #@g00496 
			WHEN contact_channel_status_array[idx] IS NULL OR contact_channel_status_array[idx] = 0 #@g00497 
				CONTINUE FOR #@g00498 
			WHEN contact_channel_status_array[idx] > 0 #@g00499 
				LET elements_contents.* = contact_channel_sr_array[idx].* #@g00500 
				CALL set_table_record_contact_contact_channel(fky.*,contact_channel_status_array[idx],contact_channel_pky_array[idx].*,contact_channel_sr_array[idx].*) #@g00501 
				RETURNING fgl_status,l_contact_channel.* #@g00502 
		END CASE #@g00503 
		LET updarr_status = update_one_element_contact_channel(idx,l_contact_channel.*) #@g00504 
		IF updarr_status < 0 THEN #@g00505 
			ERROR "Error on element # ",idx #@g00506 
			LET global_status = global_status + 1 #@g00507 
		END IF #@g00508 
	END FOR #@g00509 
	RETURN global_status #@g00510 
END FUNCTION #@g00511 

###############################################################################		                                          	#@G00513
# This function executes the SQL statement for each element		                                                              	#@G00514
# accord the TO STATUS array value of this element		                                                                       	#@G00515
###############################################################################		                                          	#@G00516
FUNCTION update_one_element_contact_channel(idx,lr_contact_channel) #@g00517 
	DEFINE st SMALLINT #@g00518 
	DEFINE arrcnt SMALLINT #@g00519 
	DEFINE idx SMALLINT #@g00520 
	DEFINE statut SMALLINT #@g00521 
	DEFINE lr_contact_channel RECORD #@g00522 
		contact_seed LIKE contact_channel.contact_seed, # BIGINT #@g00522 
		cc_id LIKE contact_channel.cc_id, # varchar(64) #@g00522 
		cc_channel LIKE contact_channel.cc_channel, # CHAR(6) #@g00522 
		is_main_contact LIKE contact_channel.is_main_contact, # SMALLINT #@g00522 
		valid_from LIKE contact_channel.valid_from, # DATE #@g00522 
		valid_to LIKE contact_channel.valid_to # DATE #@g00523 
	END RECORD #@g00524 
	LET st = 0 #@g00525 
	CASE contact_channel_status_array[idx] #@g00526 
		WHEN 2 # must be updated #@g00527 
			LET statut = sql_update_contact_channel(contact_channel_pky_array[idx].*,lr_contact_channel.*) #@g00528 
		WHEN 1 #@g00529 
			LET statut = sql_insert_contact_channel(lr_contact_channel.*) #@g00530 
		WHEN -1 #@g00531 
			LET statut = sql_delete_contact_channel(contact_channel_pky_array[idx].*) #@g00532 
	END CASE #@g00533 
	RETURN statut #@g00534 
END FUNCTION #@g00534 
