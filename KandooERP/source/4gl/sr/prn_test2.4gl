# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-09-25 11:14:36		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\Ffg/templates/parent_standard.mtplt 		                                	#@G00003
############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE tbl_test2 RECORD #@g00008 
	contact_id LIKE contact.contact_id, # INTEGER #@g00008 
	valid_from LIKE contact.valid_from, # DATE #@g00008 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00008 
	valid_to LIKE contact.valid_to, # DATE #@g00008 
	contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00008 
	org_ind LIKE contact.org_ind, # CHAR(1) #@g00008 
	first_name LIKE contact.first_name, # CHAR(30) #@g00008 
	first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00008 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00008 
	mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00008 
	cust_code LIKE contact.cust_code, # CHAR(8) #@g00008 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00008 
	last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00008 
	mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00008 
	salutation LIKE contact.salutation, # CHAR(20) #@g00008 
	initials LIKE contact.initials, # CHAR(12) #@g00008 
	user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00008 
	user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00008 
	title LIKE contact.title, # CHAR(20) #@g00008 
	age_role_code LIKE contact.age_role_code, # INTEGER #@g00008 
	sex_ind LIKE contact.sex_ind # CHAR(1) #@g00009 
END RECORD #@g00010 

DEFINE frm_test2 RECORD #@g00012 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00012 
	contact_id LIKE contact.contact_id, # INTEGER #@g00012 
	first_name LIKE contact.first_name, # CHAR(30) #@g00012 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00012 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00012 
	salutation LIKE contact.salutation, # CHAR(20) #@g00012 
	initials LIKE contact.initials, # CHAR(12) #@g00012 
	title LIKE contact.title, # CHAR(20) #@g00012 
	valid_from LIKE contact.valid_from, # DATE #@g00012 
	valid_to LIKE contact.valid_to # DATE #@g00013 
END RECORD #@g00014 

DEFINE sav_test2 RECORD #@g00016 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00016 
	contact_id LIKE contact.contact_id, # INTEGER #@g00016 
	first_name LIKE contact.first_name, # CHAR(30) #@g00016 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00016 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00016 
	salutation LIKE contact.salutation, # CHAR(20) #@g00016 
	initials LIKE contact.initials, # CHAR(12) #@g00016 
	title LIKE contact.title, # CHAR(20) #@g00016 
	valid_from LIKE contact.valid_from, # DATE #@g00016 
	valid_to LIKE contact.valid_to # DATE #@g00017 
END RECORD #@g00018 

#@G00020

MAIN #@g00022 
	DEFER interrupt #@g00023 
	OPTIONS #@g00024 
	help file "test2.iem", #@g00025 
	help KEY f1 #@g00026 

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00028
	# CALL ui_init(0) 		                                                                                                      	#@G00029
	LET m_program="p_test2_contact" #@g00030 

	CALL main_test2_contact() #@g00032 

END MAIN #@g00034 

#######################################################		                                                                  	#@G00036
# definition variable sccs		                                                                                               	#@G00037
FUNCTION mc_test2_sccs() #@g00038 
	DEFINE sccs_var CHAR(70) #@g00039 
	LET sccs_var="%W% %D%" #@g00040 
END FUNCTION #@g00041 

FUNCTION main_test2_contact () #@g00043 

	CALL init_program("kandoodb",m_program) #@g00045 

	OPEN WINDOW f_contact with FORM "f_contact" attributes(border) #@g00047 

	CALL init_cursor_test2_contact () # INITIALIZE all cursors ON master TABLE #@g00049 
	CALL init_cursor_test2_contact_channel() #@g00050 
	#@G00050

	CALL menu_test2_contact() #@g00052 

	CLOSE WINDOW f_contact #@g00054 

END FUNCTION #@g00056 

######################################################################		                                                   	#@G00058
# menu_test2_contact		                                                                                                     	#@G00059
# the top level menu 		                                                                                                    	#@G00060
# input arguments: none		                                                                                                  	#@G00061
# output arguments: none		                                                                                                 	#@G00062
FUNCTION menu_test2_contact () #@g00063 
	DEFINE nbsel_contact INTEGER #@g00064 
	DEFINE sql_stmt_status INTEGER #@g00065 
	DEFINE record_num INTEGER #@g00066 
	DEFINE ACTION SMALLINT #@g00067 
	DEFINE xnumber SMALLINT #@g00068 
	DEFINE arr_elem_num SMALLINT #@g00069 
	DEFINE pky_contact RECORD #@g00070 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00071 
	END RECORD #@g00072 

	LET nbsel_contact = 0 #@g00074 
	MENU "contact" #@g00075 
		BEFORE MENU #@g00076 
			HIDE option "Next","Previous" #@g00077 
		COMMAND "Query" "Query data with multiple criteria contact" #@g00078 
			help 1000 #@g00079 
			MESSAGE "" #@g00080 
			INITIALIZE frm_test2.* TO NULL #@g00081 
			DISPLAY BY NAME frm_test2.* #@g00082 
			HIDE option "Next","Previous" #@g00083 

			#@G00084

			CALL query_contact() RETURNING nbsel_contact #@g00086 
			IF nbsel_contact <>0 THEN #@g00087 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00088 
				LET record_num = 1 #@g00089 
				DISPLAY BY NAME frm_test2.* #@g00090 
				IF nbsel_contact > 1 THEN #@g00091 
					SHOW option "Next" #@g00092 
					NEXT option "Next" #@g00093 
				END IF #@g00094 
				#@G00094
				LET arr_elem_num = display_array_contact_channel (pky_contact.*,false) #@g00095 
				#@G00095
			ELSE #@g00096 
				ERROR "No row matches the criteria" #@g00097 
				NEXT option "Query" #@g00098 
			END IF #@g00099 

		COMMAND "Next" "Display Next record contact" #@g00101 
			help 2000 #@g00102 
			MESSAGE "" #@g00103 
			INITIALIZE frm_test2.* TO NULL #@g00104 
			DISPLAY BY NAME frm_test2.* #@g00105 
			#@G00105

			IF record_num < nbsel_contact THEN #@g00107 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00108 
				CASE #@g00109 
					WHEN sql_stmt_status = 0 #@g00110 
						ERROR "FETCH Last record of this selection contact" #@g00111 
					WHEN sql_stmt_status = -1 #@g00112 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00113 
					WHEN sql_stmt_status = 1 #@g00114 
						LET record_num = record_num + 1 #@g00115 
						DISPLAY BY NAME frm_test2.* #@g00116 
						IF record_num >= nbsel_contact THEN #@g00117 
							HIDE option "Next" #@g00118 
						END IF #@g00119 
						IF record_num > 1 THEN #@g00120 
							SHOW option "Previous" #@g00121 
						ELSE #@g00122 
							HIDE option "Previous" #@g00123 
						END IF #@g00124 
						#@G00124
						CALL display_array_contact_channel (pky_contact.*,false) #@g00125 
						#@G00125
				END CASE #@g00126 
			ELSE #@g00127 
				ERROR " Please SET query criteria previously contact " #@g00128 
				NEXT option "Query" #@g00129 
			END IF #@g00130 

		COMMAND "Previous" "Display Previous Record contact" #@g00132 
			help 3000 #@g00133 
			MESSAGE "" #@g00134 
			INITIALIZE frm_test2.* TO NULL #@g00135 
			DISPLAY BY NAME frm_test2.* #@g00136 
			#@G00136

			IF record_num > 1 THEN #@g00138 
				CALL sql_nxtprev_contact(-1) RETURNING sql_stmt_status,pky_contact.* #@g00139 
				CASE #@g00140 
					WHEN sql_stmt_status = 0 #@g00141 
						ERROR "FETCH First record of this selection contact" #@g00142 
					WHEN sql_stmt_status < -1 #@g00143 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00144 
					WHEN sql_stmt_status = 1 #@g00145 
						LET record_num = record_num - 1 #@g00146 
						CALL set_form_record_test2_f_contact(tbl_test2.*) #@g00147 
						RETURNING frm_test2.* #@g00148 
						DISPLAY BY NAME frm_test2.* #@g00149 
						IF record_num = 1 THEN #@g00150 
							HIDE option "Previous" #@g00151 
						END IF #@g00152 
						IF record_num < nbsel_contact THEN #@g00153 
							SHOW option "Next" #@g00154 
						ELSE #@g00155 
							HIDE option "Next" #@g00156 
						END IF #@g00157 
						#@G00157
						CALL display_array_contact_channel (pky_contact.*,false) #@g00158 
						#@G00158
				END CASE #@g00159 
			ELSE #@g00160 
				ERROR " Please SET query criteria previously contact " #@g00161 
				NEXT option "Query" #@g00162 
			END IF #@g00163 

		COMMAND KEY (tab) "View Array contact_channel Press TAB" #@g00165 
			CALL display_array_contact_channel (pky_contact.*,true) #@g00165 
		COMMAND KEY (shift-tab) "Edit Array contact_channel Press TAB" #@g00166 
			CALL edit_array_contact_channel (pky_contact.*,true) #@g00166 
			#@G00166

		COMMAND "Add" "Add a new record contact" #@g00168 
			help 3000 #@g00169 
			MESSAGE "" #@g00170 
			CALL add_contact() #@g00171 
			MESSAGE "" #@g00172 

		COMMAND "Modify" "Modify current record contact" #@g00174 
			help 4000 #@g00175 
			MESSAGE "" #@g00176 
			IF nbsel_contact THEN #@g00177 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00178 
					ERROR "IS locked " #@g00179 
					NEXT option "Next" #@g00180 
				ELSE #@g00181 
					LET sql_stmt_status = modify_contact(pky_contact.*) #@g00182 
				END IF #@g00183 
			ELSE #@g00184 
				ERROR " Please SET query criteria previously contact " #@g00185 
				NEXT option "Query" #@g00186 
			END IF #@g00187 

		COMMAND "Suppress" "Suppress current record contact" #@g00189 
			help 5000 #@g00190 
			MESSAGE "" #@g00191 
			IF nbsel_contact THEN #@g00192 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00193 
					ERROR "IS locked " #@g00194 
					NEXT option "Next" #@g00195 
				END IF #@g00196 
				WHILE true #@g00197 
					CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00198 
					CASE #@g00199 
						WHEN ACTION = 0 OR ACTION = 1 #@g00200 
							EXIT WHILE # degage abandon #@g00201 
						WHEN ACTION = 2 #@g00202 
							CALL suppress_contact(pky_contact.*) #@g00203 
							RETURNING sql_stmt_status #@g00204 
							EXIT WHILE #@g00205 
					END CASE #@g00206 
				END WHILE #@g00207 
			ELSE #@g00208 
				ERROR "Please SET query criteria previously contact " #@g00209 
				NEXT option "Query" #@g00210 
			END IF #@g00211 

		COMMAND "Exit" "EXIT PROGRAM" #@g00213 
			help 9000 #@g00214 
			MESSAGE "" #@g00215 
			EXIT MENU #@g00216 
	END MENU #@g00217 
END FUNCTION #@g00218 

#######################################################################		                                                  	#@G00220
#    Query_contact : Query By Example on table contact		                                                                   	#@G00221
# Input selection criteria,		                                                                                              	#@G00222
# PREPARE the query,		                                                                                                     	#@G00223
# OPEN the data SET		                                                                                                      	#@G00224
#######################################################################		                                                  	#@G00225
FUNCTION query_contact() #@g00226 
	DEFINE rec_contact,where_clause STRING #@g00227 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00228 
	DEFINE l_pky RECORD #@g00229 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00230 
	END RECORD #@g00231 
	DEFINE reply CHAR(5) #@g00232 
	LET xnumber = 0 #@g00233 
	MESSAGE "Please input query criteria" #@g00234 
	# INITIALIZE record AND display blank		                                                                                   	#@G00235
	INITIALIZE frm_test2.* TO NULL #@g00236 
	DISPLAY BY NAME frm_test2.* #@g00237 
	#@G00237

	CONSTRUCT BY NAME where_clause ON contact.cmpy_code, #@g00239 
	contact.contact_id, #@g00240 
	contact.first_name, #@g00241 
	contact.mid_name, #@g00242 
	contact.last_org_name, #@g00243 
	contact.salutation, #@g00244 
	contact.initials, #@g00245 
	contact.title, #@g00246 
	contact.valid_from, #@g00247 
	contact.valid_to #@g00248 

	#@G00249

	## Check whether criteria have been entered		                                                                             	#@G00251
		AFTER CONSTRUCT #@g00252 
			IF NOT field_touched(contact.*) AND NOT int_flag THEN #@g00253 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00254 
				CASE #@g00255 
					WHEN reply matches "Yes" #@g00256 
						EXIT CONSTRUCT #@g00257 
					OTHERWISE # saisie d'un critere de selection #@g00258 
						ERROR "Please input a least one criteria" #@g00259 
						CONTINUE CONSTRUCT #@g00260 
				END CASE #@g00261 
			END IF #@g00262 
	END CONSTRUCT #@g00263 

	IF int_flag = true THEN #@g00265 
		MESSAGE "Quit with quit key" #@g00266 
		LET int_flag=0 #@g00267 
	ELSE #@g00268 
		LET xnumber = build_qbe_count_contact(where_clause) #@g00269 
		IF xnumber > 0 THEN #@g00270 
			LET sql_stmt_status = build_qbe_row_contents_contact(where_clause) #@g00271 
		ELSE #@g00272 
			RETURN -1 #@g00273 
		END IF #@g00274 

	END IF #@g00276 
	RETURN xnumber #@g00277 
END FUNCTION ## query_contact #@g00278 

####################################################################		                                                     	#@G00280
## Add_contact: add a new contact row		                                                                                    	#@G00281
FUNCTION add_contact() #@g00282 
	DEFINE sql_stmt_status SMALLINT #@g00283 
	DEFINE row_count SMALLINT #@g00284 
	DEFINE nbre_contact ,action SMALLINT #@g00285 
	#@G00285
	#INITIALIZE pky_contact.* TO NULL		                                                                                       	#@G00286
	INITIALIZE tbl_test2.* TO NULL #@g00287 
	INITIALIZE frm_test2.* TO NULL #@g00288 
	INITIALIZE sav_test2.* TO NULL #@g00289 
	#@G00289
	WHILE true #@g00290 
		LET int_flag = false #@g00291 
		INPUT BY NAME frm_test2.cmpy_code, #@g00292 
		frm_test2.contact_id, #@g00293 
		frm_test2.first_name, #@g00294 
		frm_test2.mid_name, #@g00295 
		frm_test2.last_org_name, #@g00296 
		frm_test2.salutation, #@g00297 
		frm_test2.initials, #@g00298 
		frm_test2.title, #@g00299 
		frm_test2.valid_from, #@g00300 
		frm_test2.valid_to #@g00301 
		WITHOUT DEFAULTS #@g00302 
		#@G00303
		#@G00303

		#@G00304
		#@G00304
		END INPUT #@g00305 
		IF int_flag = true THEN #@g00306 
			# Resign FROM input		                                                                                                   	#@G00307
			LET int_flag=false #@g00308 
			LET frm_test2.* = sav_test2.* #@g00309 
			DISPLAY BY NAME frm_test2.* #@g00310 
			MESSAGE "Quit with quit key Control-C" #@g00311 
			EXIT WHILE #@g00312 
		END IF #@g00313 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00315 
		CASE ACTION #@g00316 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00317 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00318 

			WHEN 2 # ON valide la transaction #@g00320 
				BEGIN WORK #@g00321 
					#@G00321
					CALL set_table_record_test2_contact("I",frm_test2.*) #@g00322 
					RETURNING tbl_test2.* #@g00323 
					CALL sql_add_contact() RETURNING sql_stmt_status #@g00324 

					CASE #@g00326 
						WHEN sql_stmt_status = 0 #@g00327 
							MESSAGE "Add Successful operation" #@g00328 
						COMMIT WORK #@g00329 
						#@G00329
						WHEN sql_stmt_status < 0 #@g00330 
							CALL display_eric_error("Add contact:failed ") #@g00331 
							ROLLBACK WORK #@g00332 
							#@G00332
					END CASE #@g00333 
					EXIT WHILE #@g00334 

			WHEN 0 #@g00336 
				EXIT WHILE #@g00337 
		END CASE #@g00338 
	END WHILE #@g00339 
	RETURN sql_stmt_status #@g00340 
END FUNCTION ## add_contact #@g00341 


#######################################################################		                                                  	#@G00344
# Modify_contact : Edit a contact RECORD		                                                                                 	#@G00345
# inbound: table primary key		                                                                                             	#@G00346
FUNCTION modify_contact(pky) #@g00347 
	DEFINE ACTION SMALLINT #@g00348 
	DEFINE sql_stmt_status SMALLINT #@g00349 
	#@G00349
	DEFINE row_count SMALLINT #@g00350 
	DEFINE pky RECORD #@g00351 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00352 
	END RECORD #@g00353 

	## check if record can be accessed		                                                                                      	#@G00355
	WHILE true #@g00356 
		LET int_flag = false #@g00357 
		# Save Screen Record VALUES before altering		                                                                            	#@G00358
		LET sav_test2.* = frm_test2.* #@g00359 
		BEGIN WORK #@g00360 
			#@G00360

			INPUT BY NAME frm_test2.cmpy_code, #@g00362 
			frm_test2.contact_id, #@g00363 
			frm_test2.first_name, #@g00364 
			frm_test2.mid_name, #@g00365 
			frm_test2.last_org_name, #@g00366 
			frm_test2.salutation, #@g00367 
			frm_test2.initials, #@g00368 
			frm_test2.title, #@g00369 
			frm_test2.valid_from, #@g00370 
			frm_test2.valid_to #@g00371 
			WITHOUT DEFAULTS #@g00372 
			#@G00372

			#@G00373

			#@G00374
			END INPUT #@g00375 
			IF int_flag = true THEN #@g00376 
				LET int_flag=false #@g00377 
				# Restore previous value		                                                                                              	#@G00378
				LET frm_test2.* = sav_test2.* #@g00379 
				DISPLAY BY NAME frm_test2.* #@g00380 
				MESSAGE "$CancelCom Control-C" #@g00381 
				EXIT WHILE #@g00382 
			END IF #@g00383 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00385 

			CASE #@g00387 
				WHEN ACTION = 0 #@g00388 
					# Resign, restore previous VALUES		                                                                                     	#@G00389
					LET frm_test2.* = sav_test2.* #@g00390 
					DISPLAY BY NAME frm_test2.* #@g00391 
					EXIT WHILE # CANCEL operation #@g00392 

				WHEN ACTION = 1 #@g00394 
					# Redo		                                                                                                                	#@G00395
					CONTINUE WHILE #@g00396 

				WHEN ACTION = 2 #@g00398 
					# confirm UPDATE		                                                                                                      	#@G00399
					CALL set_table_record_test2_contact("U",frm_test2.*) #@g00400 
					RETURNING tbl_test2.* #@g00401 
					LET sql_stmt_status = sql_modify_contact(pky.*) #@g00402 
					CASE #@g00403 
						WHEN sql_stmt_status = 0 #@g00404 
							MESSAGE "Modify Successful operation" #@g00405 
						COMMIT WORK #@g00406 
						#@G00406
						WHEN sql_stmt_status < 0 #@g00407 
							CALL display_eric_error("Modify contact:failed ") #@g00408 
							ROLLBACK WORK #@g00409 
							#@G00409
					END CASE #@g00410 
					EXIT WHILE #@g00411 
			END CASE #@g00412 
		END WHILE #@g00413 
		RETURN sql_stmt_status #@g00414 
END FUNCTION ## modify_contact(pky) #@g00415 


#######################################################################		                                                  	#@G00418
# DELETE A contact row		                                                                                                   	#@G00419
# inbound: table primary key		                                                                                             	#@G00420
FUNCTION suppress_contact(pky) #@g00421 
	DEFINE ACTION SMALLINT #@g00422 
	DEFINE sql_stmt_status SMALLINT #@g00423 
	DEFINE pky RECORD #@g00424 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00425 
	END RECORD #@g00426 

	WHILE true #@g00428 
		CALL confirm_operation(5,10,"Suppress") RETURNING ACTION #@g00429 
		BEGIN WORK #@g00430 
			#@G00430
			CASE #@g00431 
				WHEN ACTION = 0 OR ACTION = 1 #@g00432 
					EXIT WHILE # degage abandon #@g00433 
				WHEN ACTION = 2 #@g00434 
					CALL sql_suppress_contact(pky.*) RETURNING sql_stmt_status #@g00435 
					CASE #@g00436 
						WHEN sql_stmt_status = 0 #@g00437 
							MESSAGE "Suppress Successful operation" #@g00438 
						COMMIT WORK #@g00439 
						#@G00439
						INITIALIZE frm_test2.* TO NULL #@g00440 
						DISPLAY BY NAME frm_test2.* #@g00441 
						#@G00441
						WHEN sql_stmt_status < 0 #@g00442 
							CALL display_eric_error("Suppress contact:failed ") #@g00443 
							ROLLBACK WORK #@g00444 
							#@G00444
					END CASE #@g00445 
					EXIT WHILE #@g00446 
			END CASE #@g00447 
		END WHILE #@g00448 
		RETURN sql_stmt_status #@g00449 
END FUNCTION ## suppress_contact(pky) #@g00450 

#########################################################################		                                                	#@G00452
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00453
FUNCTION init_cursor_test2_contact () #@g00454 
	DEFINE query_text STRING #@g00455 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00457
	LET query_text= #@g00458 
	"SELECT contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind ", #@g00459 
	" FROM contact ", #@g00460 
	"WHERE contact_seed = ? " #@g00461 

	PREPARE sel_mrw_mcontact FROM query_text #@g00463 
	DECLARE crs_row_mcontact CURSOR FOR sel_mrw_mcontact #@g00464 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00466
	LET query_text= "SELECT contact_seed ", #@g00467 
	" FROM contact ", #@g00468 
	" WHERE contact_seed = ? " #@g00469 

	PREPARE sel_pky_mcontact FROM query_text #@g00471 
	DECLARE crs_pky_mcontact CURSOR FOR sel_pky_mcontact #@g00472 

	# PREPARE INSERT statement		                                                                                              	#@G00474
	LET query_text = #@g00475 
	"INSERT INTO contact ( contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined2,title,age_role_code,sex_ind )", #@g00476 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00477 
	PREPARE pr_ins_mcontact FROM query_text #@g00478 

	# PREPARE UPDATE statement		                                                                                              	#@G00480
	LET query_text= #@g00481 
	"UPDATE contact ", #@g00482 
	"SET ( contact_id,valid_from,cmpy_code,valid_to,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind )", #@g00483 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )", #@g00484 
	" WHERE contact_seed = ? " #@g00485 
	PREPARE pr_upd_mcontact FROM query_text #@g00486 

	# PREPARE DELETE statement		                                                                                              	#@G00488
	LET query_text= "DELETE FROM contact ", #@g00489 
	" WHERE contact_seed = ? " #@g00490 

	PREPARE pr_del_mcontact FROM query_text #@g00492 

END FUNCTION ## init_cursor_test2_contact #@g00494 


#########################################################		                                                                	#@G00497
# Open the QBE CURSOR,		                                                                                                   	#@G00498
# counts returned rows_count,		                                                                                            	#@G00499
# OPEN the data SET,		                                                                                                     	#@G00500
# FETCH first row		                                                                                                        	#@G00501
# inbound parameter: query predicate		                                                                                     	#@G00502
# outbound parameters: number of rows retried		                                                                            	#@G00503
FUNCTION build_qbe_count_contact(qry_stmt) #@g00504 
	DEFINE qry_stmt STRING #@g00505 
	DEFINE rec_contact STRING #@g00506 
	DEFINE row_count INTEGER #@g00507 
	DEFINE lsql_stmt_status INTEGER #@g00508 

	# define primary_key record		                                                                                             	#@G00510
	DEFINE l_pky RECORD #@g00511 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00512 
	END RECORD #@g00513 

	LET rec_contact = #@g00515 
	"SELECT count(*) FROM contact", #@g00516 
	" WHERE ",qry_stmt clipped #@g00517 


	PREPARE rec_nbr_mcontact FROM rec_contact #@g00520 
	DECLARE crs_nbr_mcontact CURSOR FOR rec_nbr_mcontact #@g00521 

	OPEN crs_nbr_mcontact #@g00523 
	SET ISOLATION TO dirty read #@g00524 
	WHENEVER ERROR CONTINUE #@g00525 
	FETCH crs_nbr_mcontact INTO row_count #@g00526 
	WHENEVER ERROR CALL error_mngmt #@g00527 
	SET ISOLATION TO committed read #@g00528 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00530
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00531 
		LET row_count =0 #@g00532 
	END IF #@g00533 
	FREE crs_nbr_mcontact #@g00534 
	RETURN row_count #@g00535 
END FUNCTION ## build_qbe_count_contact #@g00536 

#########################################################		                                                                	#@G00538
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00539
# Declare AND OPEN the CURSOR		                                                                                            	#@G00540
# inbound param: query predicate		                                                                                         	#@G00541
#outbound parameter: query STATUS		                                                                                        	#@G00542
FUNCTION build_qbe_row_contents_contact(qry_stmt) #@g00543 
	DEFINE qry_stmt STRING #@g00544 
	DEFINE rec_contact STRING #@g00545 
	DEFINE row_count INTEGER #@g00546 
	DEFINE lsql_stmt_status INTEGER #@g00547 

	# define primary_key record		                                                                                             	#@G00549
	DEFINE l_pky RECORD #@g00550 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00551 
	END RECORD #@g00552 

	# display the selected columns		                                                                                          	#@G00554

	LET rec_contact = "SELECT contact_seed ", #@g00556 
	" FROM contact ", #@g00557 
	"WHERE ",qry_stmt clipped, #@g00558 
	" ORDER BY contact_seed " #@g00559 

	PREPARE rech_mcontact FROM rec_contact #@g00561 

	# crs_scrl_mcontact : the first CURSOR selects all the primary keys (NOT all the table columns)		                         	#@G00563

	DECLARE crs_scrl_mcontact SCROLL CURSOR with HOLD FOR rech_mcontact #@g00565 

	WHENEVER ERROR CONTINUE #@g00567 
	OPEN crs_scrl_mcontact #@g00568 
	WHENEVER ERROR CALL error_mngmt #@g00569 

	RETURN sqlca.sqlcode #@g00571 
END FUNCTION ## build_qbe_row_contents_contact #@g00572 

#######################################################################		                                                  	#@G00574
# sql_nxtprev_contact : FETCH NEXT OR PREVIOUS RECORD		                                                                    	#@G00575
FUNCTION sql_nxtprev_contact(offset) #@g00576 
	DEFINE offset SMALLINT #@g00577 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00578 
	DEFINE pky RECORD #@g00579 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00580 
	END RECORD #@g00581 

	WHENEVER ERROR CONTINUE #@g00583 
	FETCH relative offset crs_scrl_mcontact INTO pky.* #@g00584 
	WHENEVER ERROR CALL error_mngmt #@g00585 

	CASE #@g00587 
		WHEN sqlca.sqlcode = 100 #@g00588 
			LET record_found = 0 #@g00589 
		WHEN sqlca.sqlcode < 0 #@g00590 
			LET record_found = -1 #@g00591 
		OTHERWISE #@g00592 
			LET lsql_stmt_status = 1 #@g00593 
			CALL sql_fetch_mrw_contact (pky.*) #@g00594 
			RETURNING record_found #@g00595 

	END CASE #@g00597 
	RETURN record_found,pky.* #@g00598 
END FUNCTION ## sql_nxtprev_contact #@g00599 

########################################################################		                                                 	#@G00601
# sql_FETCH_mrw_contact : read a complete row accessing by primary key		                                                   	#@G00602
# inbound parameter : primary key		                                                                                        	#@G00603
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00604
FUNCTION sql_fetch_mrw_contact(pky_contact) #@g00605 
	DEFINE sql_stmt_status SMALLINT #@g00606 
	DEFINE pky_contact RECORD #@g00607 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00608 
	END RECORD #@g00609 
	#@G00609

	# read the table, access on primary key		                                                                                 	#@G00611
	WHENEVER ERROR CONTINUE #@g00612 
	OPEN crs_row_mcontact #@g00613 
	USING pky_contact.* #@g00614 

	FETCH crs_row_mcontact INTO tbl_test2.* #@g00616 

	WHENEVER ERROR CALL error_mngmt #@g00618 
	CASE #@g00619 
		WHEN sqlca.sqlcode = 100 #@g00620 
			LET sql_stmt_status = 0 #@g00621 
		WHEN sqlca.sqlcode < 0 #@g00622 
			LET sql_stmt_status = -1 #@g00623 
		OTHERWISE #@g00624 
			LET sql_stmt_status = 1 #@g00625 
			CALL set_form_record_test2_f_contact(tbl_test2.*) #@g00626 
			RETURNING frm_test2.* #@g00627 
			#@G00627
	END CASE #@g00628 
	RETURN sql_stmt_status #@g00629 
END FUNCTION ## sql_fetch_mrw_contact #@g00630 

########################################################################		                                                 	#@G00632
## INSERT in table contact 		                                                                                              	#@G00633
########################################################################		                                                 	#@G00634
FUNCTION sql_add_contact() #@g00635 
	DEFINE lsql_stmt_status INTEGER #@g00636 
	DEFINE row_count SMALLINT #@g00637 
	WHENEVER ERROR CONTINUE #@g00638 
	EXECUTE pr_ins_mcontact #@g00639 
	USING tbl_test2.contact_id, #@g00639 
	tbl_test2.valid_from, #@g00639 
	tbl_test2.cmpy_code, #@g00639 
	tbl_test2.valid_to, #@g00639 
	tbl_test2.contact_seed, #@g00639 
	tbl_test2.org_ind, #@g00639 
	tbl_test2.first_name, #@g00639 
	tbl_test2.first_name_up, #@g00639 
	tbl_test2.mid_name, #@g00639 
	tbl_test2.mid_name_up, #@g00639 
	tbl_test2.cust_code, #@g00639 
	tbl_test2.last_org_name, #@g00639 
	tbl_test2.last_org_name_up, #@g00639 
	tbl_test2.mod_user_id, #@g00639 
	tbl_test2.salutation, #@g00639 
	tbl_test2.initials, #@g00639 
	tbl_test2.user_defined1, #@g00639 
	tbl_test2.user_defined2, #@g00639 
	tbl_test2.title, #@g00639 
	tbl_test2.age_role_code, #@g00639 
	tbl_test2.sex_ind # #@g00640 
	WHENEVER ERROR CALL error_mngmt #@g00641 

	IF sqlca.sqlcode < 0 THEN #@g00643 
		LET lsql_stmt_status = -1 #@g00644 
	ELSE #@g00645 
		LET lsql_stmt_status = 0 #@g00646 
	END IF #@g00647 
	RETURN lsql_stmt_status #@g00648 
END FUNCTION ## sql_add_contact #@g00649 

########################################################################		                                                 	#@G00651
## sql_Modify_contact :UPDATE contact record		                                                                             	#@G00652
FUNCTION sql_modify_contact(pky) #@g00653 
	DEFINE lsql_stmt_status INTEGER #@g00654 
	DEFINE pky RECORD #@g00655 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00656 
	END RECORD #@g00657 

	WHENEVER ERROR CONTINUE #@g00659 
	EXECUTE pr_upd_mcontact #@g00660 
	USING tbl_test2.contact_id, #@g00660 
	tbl_test2.valid_from, #@g00660 
	tbl_test2.cmpy_code, #@g00660 
	tbl_test2.valid_to, #@g00660 
	tbl_test2.org_ind, #@g00660 
	tbl_test2.first_name, #@g00660 
	tbl_test2.first_name_up, #@g00660 
	tbl_test2.mid_name, #@g00660 
	tbl_test2.mid_name_up, #@g00660 
	tbl_test2.cust_code, #@g00660 
	tbl_test2.last_org_name, #@g00660 
	tbl_test2.last_org_name_up, #@g00660 
	tbl_test2.mod_user_id, #@g00660 
	tbl_test2.salutation, #@g00660 
	tbl_test2.initials, #@g00660 
	tbl_test2.user_defined1, #@g00660 
	tbl_test2.user_defined2, #@g00660 
	tbl_test2.title, #@g00660 
	tbl_test2.age_role_code, #@g00660 
	tbl_test2.sex_ind , #@g00661 
	pky.* #@g00662 

	WHENEVER ERROR CALL error_mngmt #@g00664 
	IF sqlca.sqlcode < 0 THEN #@g00665 

		LET lsql_stmt_status = -1 #@g00667 
	ELSE #@g00668 
		LET lsql_stmt_status = 0 #@g00669 
	END IF #@g00670 
	RETURN lsql_stmt_status #@g00671 
END FUNCTION ## sql_modify_contact #@g00672 

########################################################################		                                                 	#@G00674
## sql_delete_contact :delete current row in table contact 		                                                              	#@G00675
FUNCTION sql_suppress_contact(pky) #@g00676 
	DEFINE lsql_stmt_status SMALLINT #@g00677 
	DEFINE pky RECORD #@g00678 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00679 
	END RECORD #@g00680 

	WHENEVER ERROR CONTINUE #@g00682 
	EXECUTE pr_del_mcontact #@g00683 
	USING pky.* #@g00684 

	WHENEVER ERROR CALL error_mngmt #@g00686 
	IF sqlca.sqlcode < 0 THEN #@g00687 
		LET lsql_stmt_status = -1 #@g00688 
	ELSE #@g00689 
		LET lsql_stmt_status=0 #@g00690 
	END IF #@g00691 
	RETURN lsql_stmt_status #@g00692 
END FUNCTION ## sql_suppress_contact #@g00693 

################################################################################		                                         	#@G00695
#   status_pk_contact : Check if primary key exists		                                                                      	#@G00696
# inbound parameter : record of primary key		                                                                              	#@G00697
# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00698
FUNCTION status_pk_contact(pky) #@g00699 
	DEFINE pky RECORD #@g00700 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00701 
	END RECORD #@g00702 
	DEFINE pk_status INTEGER #@g00703 

	WHENEVER ERROR CONTINUE #@g00705 
	OPEN crs_pky_mcontact USING pky.* #@g00706 
	FETCH crs_pky_mcontact #@g00707 
	WHENEVER ERROR CALL error_mngmt #@g00708 

	CASE sqlca.sqlcode #@g00710 
		WHEN 0 #@g00711 
			LET pk_status = 1 #@g00712 
		WHEN 100 #@g00713 
			LET pk_status = 0 #@g00714 
		WHEN sqlca.sqlerrd[2] = 104 #@g00715 
			LET pk_status = -1 # RECORD locked #@g00716 
		WHEN sqlca.sqlcode < 0 #@g00717 
			LET pk_status = sqlca.sqlcode #@g00718 
	END CASE #@g00719 

	RETURN pk_status #@g00721 
END FUNCTION ## status_pk_contact #@g00722 

################################################################################################		                         	#@G00724
#   set_form_record_test2_f_contact: assigns table VALUES TO form fields VALUES		                                          	#@G00725
FUNCTION set_form_record_test2_f_contact(tbl_contents) #@g00726 
	DEFINE frm_contents RECORD #@g00727 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00727 
		contact_id LIKE contact.contact_id, # INTEGER #@g00727 
		first_name LIKE contact.first_name, # CHAR(30) #@g00727 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00727 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00727 
		salutation LIKE contact.salutation, # CHAR(20) #@g00727 
		initials LIKE contact.initials, # CHAR(12) #@g00727 
		title LIKE contact.title, # CHAR(20) #@g00727 
		valid_from LIKE contact.valid_from, # DATE #@g00727 
		valid_to LIKE contact.valid_to # DATE #@g00728 
	END RECORD #@g00729 

	DEFINE tbl_contents RECORD #@g00731 
		contact_id LIKE contact.contact_id, # INTEGER #@g00731 
		valid_from LIKE contact.valid_from, # DATE #@g00731 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00731 
		valid_to LIKE contact.valid_to, # DATE #@g00731 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00731 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00731 
		first_name LIKE contact.first_name, # CHAR(30) #@g00731 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00731 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00731 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00731 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00731 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00731 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00731 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00731 
		salutation LIKE contact.salutation, # CHAR(20) #@g00731 
		initials LIKE contact.initials, # CHAR(12) #@g00731 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00731 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00731 
		title LIKE contact.title, # CHAR(20) #@g00731 
		age_role_code LIKE contact.age_role_code, # INTEGER #@g00731 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00732 
	END RECORD #@g00733 

	INITIALIZE frm_contents.* TO NULL #@g00735 
	LET frm_contents.cmpy_code = tbl_test2.cmpy_code #@g00736 
	LET frm_contents.contact_id = tbl_test2.contact_id #@g00737 
	LET frm_contents.first_name = tbl_test2.first_name #@g00738 
	LET frm_contents.mid_name = tbl_test2.mid_name #@g00739 
	LET frm_contents.last_org_name = tbl_test2.last_org_name #@g00740 
	LET frm_contents.salutation = tbl_test2.salutation #@g00741 
	LET frm_contents.initials = tbl_test2.initials #@g00742 
	LET frm_contents.title = tbl_test2.title #@g00743 
	LET frm_contents.valid_from = tbl_test2.valid_from #@g00744 
	LET frm_contents.valid_to = tbl_test2.valid_to #@g00745 
	#@G00746
	RETURN frm_contents.* #@g00747 
END FUNCTION ## set_form_record_test2_f_contact #@g00748 

################################################################################################		                         	#@G00750
## set_table_record_test2_contact: assigns form fields value TO table VALUES		                                             	#@G00751
FUNCTION set_table_record_test2_contact(mode,frm_contents) #@g00752 
	DEFINE MODE CHAR(1) #@g00753 
	DEFINE frm_contents RECORD #@g00754 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00754 
		contact_id LIKE contact.contact_id, # INTEGER #@g00754 
		first_name LIKE contact.first_name, # CHAR(30) #@g00754 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00754 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00754 
		salutation LIKE contact.salutation, # CHAR(20) #@g00754 
		initials LIKE contact.initials, # CHAR(12) #@g00754 
		title LIKE contact.title, # CHAR(20) #@g00754 
		valid_from LIKE contact.valid_from, # DATE #@g00754 
		valid_to LIKE contact.valid_to # DATE #@g00755 
	END RECORD #@g00756 

	DEFINE tbl_contents RECORD #@g00758 
		contact_id LIKE contact.contact_id, # INTEGER #@g00758 
		valid_from LIKE contact.valid_from, # DATE #@g00758 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00758 
		valid_to LIKE contact.valid_to, # DATE #@g00758 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00758 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00758 
		first_name LIKE contact.first_name, # CHAR(30) #@g00758 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00758 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00758 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00758 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00758 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00758 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00758 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00758 
		salutation LIKE contact.salutation, # CHAR(20) #@g00758 
		initials LIKE contact.initials, # CHAR(12) #@g00758 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00758 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00758 
		title LIKE contact.title, # CHAR(20) #@g00758 
		age_role_code LIKE contact.age_role_code, # INTEGER #@g00758 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00759 
	END RECORD #@g00760 

	INITIALIZE tbl_contents.* TO NULL #@g00762 
	LET tbl_contents.contact_id = frm_test2.contact_id #@g00763 
	LET tbl_contents.valid_from = frm_test2.valid_from #@g00764 
	LET tbl_contents.cmpy_code = frm_test2.cmpy_code #@g00765 
	LET tbl_contents.valid_to = frm_test2.valid_to #@g00766 
	IF MODE = "I" THEN #@g00767 
		LET tbl_contents.contact_seed = 0 #@g00768 
	END IF #@g00769 
	# LET tbl_contents.org_ind = your value		                                                                                  	#@G00770
	LET tbl_contents.first_name = frm_test2.first_name #@g00771 
	# LET tbl_contents.first_name_up = your value		                                                                            	#@G00772
	LET tbl_contents.mid_name = frm_test2.mid_name #@g00773 
	# LET tbl_contents.mid_name_up = your value		                                                                              	#@G00774
	# LET tbl_contents.cust_code = your value		                                                                                	#@G00775
	LET tbl_contents.last_org_name = frm_test2.last_org_name #@g00776 
	# LET tbl_contents.last_org_name_up = your value		                                                                         	#@G00777
	# LET tbl_contents.mod_user_id = your value		                                                                              	#@G00778
	LET tbl_contents.salutation = frm_test2.salutation #@g00779 
	LET tbl_contents.initials = frm_test2.initials #@g00780 
	# LET tbl_contents.user_defined1 = your value		                                                                            	#@G00781
	# LET tbl_contents.user_defined2 = your value		                                                                            	#@G00782
	LET tbl_contents.title = frm_test2.title #@g00783 
	# LET tbl_contents.age_role_code = your value		                                                                            	#@G00784
	# LET tbl_contents.sex_ind = your value		                                                                                  	#@G00785
	#@G00786

	RETURN tbl_contents.* #@g00788 
END FUNCTION ## set_table_record_test2_contact #@g00789 

#@G00791

#@G00793

#@G00795

