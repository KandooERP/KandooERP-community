# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2017-10-02 19:34:28		                                                                                       	#@G00002
# template E:\Users\BeGooden-IT\Projects\QuerixTools\Ffg/templates/parent_standard.mtplt 		                                	#@G00003

############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl"
DEFINE m_program CHAR(30) #@g00006 

DEFINE tbl_contact RECORD #@g00008 
	contact_id LIKE contact.contact_id, # int #@g00008 
	valid_from LIKE contact.valid_from, # DATE #@g00008 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00008 
	valid_to LIKE contact.valid_to, # DATE #@g00008 
	contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00008 
	org_ind LIKE contact.org_ind, # CHAR(1) #@g00008 
	first_name LIKE contact.first_name, # CHAR(30) #@g00008 
	first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00008 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00008 
	mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00008 
	cust_code LIKE contact.cust_code, # CHAR(8) #@g00008 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00008 
	last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00008 
	mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00008 
	salutation LIKE contact.salutation, # CHAR(20) #@g00008 
	initials LIKE contact.initials, # CHAR(12) #@g00008 
	user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00008 
	user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00008 
	title LIKE contact.title, # CHAR(20) #@g00008 
	age_role_code LIKE contact.age_role_code, # int #@g00008 
	sex_ind LIKE contact.sex_ind # CHAR(1) #@g00009 
END RECORD #@g00010 

DEFINE frm_contact RECORD #@g00012 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00012 
	contact_id LIKE contact.contact_id, # int #@g00012 
	first_name LIKE contact.first_name, # CHAR(30) #@g00012 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00012 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00012 
	salutation LIKE contact.salutation, # CHAR(20) #@g00012 
	initials LIKE contact.initials, # CHAR(12) #@g00012 
	title LIKE contact.title, # CHAR(20) #@g00012 
	valid_from LIKE contact.valid_from, # DATE #@g00012 
	valid_to LIKE contact.valid_to # DATE #@g00013 
END RECORD #@g00014 

DEFINE sav_contact RECORD #@g00016 
	cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00016 
	contact_id LIKE contact.contact_id, # int #@g00016 
	first_name LIKE contact.first_name, # CHAR(30) #@g00016 
	mid_name LIKE contact.mid_name, # CHAR(30) #@g00016 
	last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00016 
	salutation LIKE contact.salutation, # CHAR(20) #@g00016 
	initials LIKE contact.initials, # CHAR(12) #@g00016 
	title LIKE contact.title, # CHAR(20) #@g00016 
	valid_from LIKE contact.valid_from, # DATE #@g00016 
	valid_to LIKE contact.valid_to # DATE #@g00017 
END RECORD #@g00018 

DEFINE lup_contact RECORD #@g00019 
	name_text LIKE company.name_text # CHAR(30) 
END RECORD #@g00020 
#@G00021

MAIN #@g00023 
	DEFER interrupt #@g00024 
	#OPTIONS		                                                                                                                 	#@G00025
	#help file "contact.iem",		                                                                                                	#@G00026
	#help key F1		                                                                                                             	#@G00027

	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00029
	CALL ui_init(0) 		                                                                                                      	#@G00030
	LET m_program="p_contact_contact" #@g00031 

	CALL main_contact_contact() #@g00033 

END MAIN #@g00035 

#######################################################		                                                                  	#@G00037
# definition variable sccs		                                                                                               	#@G00038
FUNCTION mc_contact_sccs() #@g00039 
	DEFINE sccs_var CHAR(70) #@g00040 
	LET sccs_var="%W% %D%" #@g00041 
END FUNCTION #@g00042 

FUNCTION main_contact_contact () #@g00044 

	--CALL init_program("kandoodb",m_program) #@g00046 

	OPEN WINDOW f_contact with FORM "f_contact" attributes(border) #@g00048 

	CALL prepare_queries_contact_contact () # INITIALIZE all cursors ON master TABLE #@g00050 
	CALL prepare_queries_contact_contact_channel() #@g00051 
	#@G00051

	CALL menu_contact_contact() #@g00053 

	CLOSE WINDOW f_contact #@g00055 

END FUNCTION #@g00057 

######################################################################		                                                   	#@G00059
# menu_contact_contact		                                                                                                   	#@G00060
# the top level menu 		                                                                                                    	#@G00061
# input arguments: none		                                                                                                  	#@G00062
# output arguments: none		                                                                                                 	#@G00063
FUNCTION menu_contact_contact () #@g00064 
	DEFINE nbsel_contact INTEGER #@g00065 
	DEFINE sql_stmt_status INTEGER #@g00066 
	DEFINE record_num INTEGER #@g00067 
	DEFINE ACTION SMALLINT #@g00068 
	DEFINE xnumber SMALLINT #@g00069 
	DEFINE arr_elem_num SMALLINT #@g00070 
	DEFINE pky_contact RECORD #@g00071 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00072 
	END RECORD #@g00073 

	LET nbsel_contact = 0 #@g00075 
	MENU "contact" #@g00076 
		BEFORE MENU #@g00077 
			HIDE option "Next","Previous","View Array contact_channel","Edit Array contact_channel" #@g00078 
		COMMAND "Query" "Query data with multiple criteria contact" #@g00079 
			#HELP 1000		                                                                                                              	#@G00080
			MESSAGE "" #@g00081 
			INITIALIZE frm_contact.* TO NULL #@g00082 
			DISPLAY BY NAME frm_contact.* #@g00083 
			HIDE option "Next","Previous" #@g00084 

			INITIALIZE lup_contact.* TO NULL #@g00086 
			DISPLAY BY NAME lup_contact.* #@g00087 
			#@G00087

			CALL query_contact() RETURNING nbsel_contact #@g00089 
			IF nbsel_contact <>0 THEN #@g00090 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00091 
				LET record_num = 1 #@g00092 
				DISPLAY BY NAME frm_contact.* #@g00093 
				IF nbsel_contact > 1 THEN #@g00094 
					SHOW option "Next" #@g00095 
					NEXT option "Next" #@g00096 
				END IF #@g00097 
				DISPLAY BY NAME lup_contact.* #@g00098 
				#@G00098
				CALL initialize_array_contact_channel() #@g00099 
				LET arr_elem_num = display_array_contact_channel (pky_contact.*,false) #@g00100 
				SHOW option "View Array contact_channel","Edit Array contact_channel" #@g00101 
				#@G00101
			ELSE #@g00102 
				ERROR "No row matches the criteria" #@g00103 
				NEXT option "Query" #@g00104 
			END IF #@g00105 

		COMMAND "Next" "Display Next record contact" #@g00107 
			#HELP 2000		                                                                                                              	#@G00108
			MESSAGE "" #@g00109 
			INITIALIZE frm_contact.* TO NULL #@g00110 
			DISPLAY BY NAME frm_contact.* #@g00111 
			INITIALIZE lup_contact.* TO NULL #@g00112 
			DISPLAY BY NAME lup_contact.* #@g00113 
			#@G00113

			IF record_num < nbsel_contact THEN #@g00115 
				CALL sql_nxtprev_contact(1) RETURNING sql_stmt_status,pky_contact.* #@g00116 
				CASE #@g00117 
					WHEN sql_stmt_status = 0 #@g00118 
						ERROR "FETCH Last record of this selection contact" #@g00119 
					WHEN sql_stmt_status = -1 #@g00120 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00121 
					WHEN sql_stmt_status = 1 #@g00122 
						LET record_num = record_num + 1 #@g00123 
						DISPLAY BY NAME frm_contact.* #@g00124 
						IF record_num >= nbsel_contact THEN #@g00125 
							HIDE option "Next" #@g00126 
						END IF #@g00127 
						IF record_num > 1 THEN #@g00128 
							SHOW option "Previous" #@g00129 
						ELSE #@g00130 
							HIDE option "Previous" #@g00131 
						END IF #@g00132 
						DISPLAY BY NAME lup_contact.* #@g00133 
						#@G00133
						CALL initialize_array_contact_channel() #@g00134 
						CALL display_array_contact_channel (pky_contact.*,false) #@g00135 
						#@G00135
				END CASE #@g00136 
			ELSE #@g00137 
				ERROR " Please SET query criteria previously contact " #@g00138 
				NEXT option "Query" #@g00139 
			END IF #@g00140 

		COMMAND "Previous" "Display Previous Record contact" #@g00142 
			#HELP 3000		                                                                                                              	#@G00143
			MESSAGE "" #@g00144 
			INITIALIZE frm_contact.* TO NULL #@g00145 
			DISPLAY BY NAME frm_contact.* #@g00146 
			INITIALIZE lup_contact.* TO NULL #@g00147 
			DISPLAY BY NAME lup_contact.* #@g00148 
			#@G00148

			IF record_num > 1 THEN #@g00150 
				CALL sql_nxtprev_contact(-1) RETURNING sql_stmt_status,pky_contact.* #@g00151 
				CASE #@g00152 
					WHEN sql_stmt_status = 0 #@g00153 
						ERROR "FETCH First record of this selection contact" #@g00154 
					WHEN sql_stmt_status < -1 #@g00155 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00156 
					WHEN sql_stmt_status = 1 #@g00157 
						LET record_num = record_num - 1 #@g00158 
						CALL set_form_record_contact_f_contact(tbl_contact.*) #@g00159 
						RETURNING frm_contact.* #@g00160 
						DISPLAY BY NAME frm_contact.* #@g00161 
						IF record_num = 1 THEN #@g00162 
							HIDE option "Previous" #@g00163 
						END IF #@g00164 
						IF record_num < nbsel_contact THEN #@g00165 
							SHOW option "Next" #@g00166 
						ELSE #@g00167 
							HIDE option "Next" #@g00168 
						END IF #@g00169 
						DISPLAY BY NAME lup_contact.* #@g00170 
						#@G00170
						CALL initialize_array_contact_channel() #@g00171 
						CALL display_array_contact_channel (pky_contact.*,false) #@g00172 
						#@G00172
				END CASE #@g00173 
			ELSE #@g00174 
				ERROR " Please SET query criteria previously contact " #@g00175 
				NEXT option "Query" #@g00176 
			END IF #@g00177 

		COMMAND KEY (tab) "View Array contact_channel" #@g00179 
			CALL display_array_contact_channel (pky_contact.*,true) #@g00179 
		COMMAND KEY (shift-tab) "Edit Array contact_channel" #@g00180 
			CALL edit_array_contact_channel (pky_contact.*,true) #@g00180 
			#@G00180

		COMMAND "Add" "Add a new record contact" #@g00182 
			#HELP 3000		                                                                                                              	#@G00183
			MESSAGE "" #@g00184 
			CALL add_contact() RETURNING sql_stmt_status,pky_contact.* #@g00185 
			MESSAGE "" #@g00186 
			SHOW option "Edit Array contact_channel" #@g00186 
			CALL initialize_array_contact_channel() #@g00187 
			CALL display_array_contact_channel (pky_contact.*,false) #@g00188 
			#@G00188

		COMMAND "Modify" "Modify current record contact" #@g00190 
			#HELP 4000		                                                                                                              	#@G00191
			MESSAGE "" #@g00192 
			IF nbsel_contact THEN #@g00193 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00194 
					ERROR "IS locked " #@g00195 
					NEXT option "Next" #@g00196 
				ELSE #@g00197 
					LET sql_stmt_status = modify_contact(pky_contact.*) #@g00198 
				END IF #@g00199 
			ELSE #@g00200 
				ERROR " Please SET query criteria previously contact " #@g00201 
				NEXT option "Query" #@g00202 
			END IF #@g00203 

		COMMAND "Remove" "Suppress current record contact" #@g00205 
			#HELP 5000		                                                                                                              	#@G00206
			MESSAGE "" #@g00207 
			IF nbsel_contact THEN #@g00208 
				IF status_pk_contact(pky_contact.*) < 0 THEN #@g00209 
					ERROR "IS locked " #@g00210 
					NEXT option "Next" #@g00211 
				END IF #@g00212 
				WHILE true #@g00213 
					CALL confirm_operation(5,10,"Remove") RETURNING ACTION #@g00214 
					CASE #@g00215 
						WHEN ACTION = 0 OR ACTION = 1 #@g00216 
							EXIT WHILE # degage abandon #@g00217 
						WHEN ACTION = 2 #@g00218 
							CALL remove_contact(pky_contact.*) #@g00219 
							RETURNING sql_stmt_status #@g00220 
							EXIT WHILE #@g00221 
					END CASE #@g00222 
				END WHILE #@g00223 
			ELSE #@g00224 
				ERROR "Please SET query criteria previously contact " #@g00225 
				NEXT option "Query" #@g00226 
			END IF #@g00227 

		COMMAND "Exit" "EXIT PROGRAM" #@g00229 
			#HELP 9000		                                                                                                              	#@G00230
			MESSAGE "" #@g00231 
			EXIT MENU #@g00232 
	END MENU #@g00233 
END FUNCTION #@g00234 

#######################################################################		                                                  	#@G00236
# Query_contact : Query By Example on table contact		                                                                      	#@G00237
# Input selection criteria,		                                                                                              	#@G00238
# PREPARE the query,		                                                                                                     	#@G00239
# OPEN the data SET		                                                                                                      	#@G00240
#######################################################################		                                                  	#@G00241
FUNCTION query_contact() #@g00242 
	DEFINE rec_contact,where_clause STRING #@g00243 
	DEFINE xnumber,sql_stmt_status INTEGER #@g00244 
	DEFINE l_pky RECORD #@g00245 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00246 
	END RECORD #@g00247 
	DEFINE reply CHAR(5) #@g00248 
	LET xnumber = 0 #@g00249 
	MESSAGE "Please input query criteria" #@g00250 
	# INITIALIZE record AND display blank		                                                                                   	#@G00251
	INITIALIZE frm_contact.* TO NULL #@g00252 
	DISPLAY BY NAME frm_contact.* #@g00253 
	INITIALIZE lup_contact.* TO NULL #@g00254 
	DISPLAY BY NAME lup_contact.* #@g00255 
	#@G00255

	CONSTRUCT BY NAME where_clause ON contact.cmpy_code, #@g00257 
	contact.contact_id, #@g00258 
	contact.first_name, #@g00259 
	contact.mid_name, #@g00260 
	contact.last_org_name, #@g00261 
	contact.salutation, #@g00262 
	contact.initials, #@g00263 
	contact.title, #@g00264 
	contact.valid_from, #@g00265 
	contact.valid_to #@g00266 

	#@G00267

	## Check whether criteria have been entered		                                                                             	#@G00269
		AFTER CONSTRUCT #@g00270 
			IF NOT field_touched(contact.*) AND NOT int_flag THEN #@g00271 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00272 
				CASE #@g00273 
					WHEN reply matches "Yes" #@g00274 
						EXIT CONSTRUCT #@g00275 
					OTHERWISE # saisie d'un critere de selection #@g00276 
						ERROR "Please input a least one criteria" #@g00277 
						CONTINUE CONSTRUCT #@g00278 
				END CASE #@g00279 
			END IF #@g00280 
	END CONSTRUCT #@g00281 

	IF int_flag = true THEN #@g00283 
		MESSAGE "Quit with quit key" #@g00284 
		LET int_flag=0 #@g00285 
	ELSE #@g00286 
		LET xnumber = get_qbe_count_contact(where_clause) #@g00287 
		IF xnumber > 0 THEN #@g00288 
			LET sql_stmt_status = sql_opn_pky_scr_curscontact(where_clause) #@g00289 
		ELSE #@g00290 
			RETURN -1 #@g00291 
		END IF #@g00292 

	END IF #@g00294 
	RETURN xnumber #@g00295 
END FUNCTION ## query_contact #@g00296 

####################################################################		                                                     	#@G00298
## Add_contact: add a new contact row		                                                                                    	#@G00299
FUNCTION add_contact() #@g00300 
	DEFINE sql_stmt_status SMALLINT #@g00301 
	DEFINE row_count SMALLINT #@g00302 
	DEFINE nbre_contact ,action SMALLINT #@g00303 
	DEFINE lookup_status INTEGER #@g00304 
	#@G00304
	#INITIALIZE pky_contact.* TO NULL		                                                                                       	#@G00305
	INITIALIZE tbl_contact.* TO NULL #@g00306 
	INITIALIZE frm_contact.* TO NULL #@g00307 
	INITIALIZE sav_contact.* TO NULL #@g00308 
	INITIALIZE lup_contact.* TO NULL #@g00309 
	#@G00309
	WHILE true #@g00310 
		LET int_flag = false #@g00311 
		INPUT BY NAME frm_contact.cmpy_code, #@g00312 
		frm_contact.contact_id, #@g00313 
		frm_contact.first_name, #@g00314 
		frm_contact.mid_name, #@g00315 
		frm_contact.last_org_name, #@g00316 
		frm_contact.salutation, #@g00317 
		frm_contact.initials, #@g00318 
		frm_contact.title, #@g00319 
		frm_contact.valid_from, #@g00320 
		frm_contact.valid_to #@g00321 
		WITHOUT DEFAULTS #@g00322 

			BEFORE FIELD contact_id 
				SELECT max(contact_id)+1 INTO frm_contact.contact_id 
				FROM contact 
				DISPLAY BY NAME frm_contact.contact_id 
				NEXT FIELD NEXT 

			BEFORE FIELD valid_from #@g00323 
				LET frm_contact.valid_from = CURRENT 

				#@G00324
				#@G00324
		END INPUT #@g00325 
		IF int_flag = true THEN #@g00326 
			# Resign FROM input		                                                                                                   	#@G00327
			LET int_flag=false #@g00328 
			LET frm_contact.* = sav_contact.* #@g00329 
			DISPLAY BY NAME frm_contact.* #@g00330 
			MESSAGE "Quit with quit key Control-C" #@g00331 
			EXIT WHILE #@g00332 
		END IF #@g00333 

		CALL confirm_operation(3,10,"Add") RETURNING ACTION #@g00335 
		CASE ACTION #@g00336 
			WHEN 1 # i want TO edit the input, remains displayed 'as is' #@g00337 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00338 

			WHEN 2 # ON valide la transaction #@g00340 
				BEGIN WORK #@g00341 
					#@G00341
					CALL set_table_record_contact_contact(1,frm_contact.*) #@g00342 
					RETURNING tbl_contact.* #@g00343 
					CALL sql_insert_contact() RETURNING sql_stmt_status, tbl_contact.contact_seed #@g00344 

					CASE #@g00346 
						WHEN sql_stmt_status = 0 #@g00347 
							MESSAGE "Add Successful operation" #@g00348 
						COMMIT WORK #@g00349 
						#@G00349
						WHEN sql_stmt_status < 0 #@g00350 
							CALL display_eric_error("Add contact:failed ") #@g00351 
							ROLLBACK WORK #@g00352 
							#@G00352
					END CASE #@g00353 
					EXIT WHILE #@g00354 

			WHEN 0 #@g00356 
				EXIT WHILE #@g00357 
		END CASE #@g00358 
	END WHILE #@g00359 
	# tbl_contact		                                                                                                           	#@G00360
	RETURN sql_stmt_status, tbl_contact.contact_seed #@g00361 
END FUNCTION ## add_contact #@g00362 


#######################################################################		                                                  	#@G00365
# Modify_contact : Edit a contact RECORD		                                                                                 	#@G00366
# inbound: table primary key		                                                                                             	#@G00367
FUNCTION modify_contact(pky) #@g00368 
	DEFINE ACTION SMALLINT #@g00369 
	DEFINE sql_stmt_status SMALLINT #@g00370 
	DEFINE lookup_status INTEGER #@g00371 
	#@G00371
	DEFINE row_count SMALLINT #@g00372 
	DEFINE pky RECORD #@g00373 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00374 
	END RECORD #@g00375 

	## check if record can be accessed		                                                                                      	#@G00377
	WHILE true #@g00378 
		LET int_flag = false #@g00379 
		# Save Screen Record VALUES before altering		                                                                            	#@G00380
		LET sav_contact.* = frm_contact.* #@g00381 
		BEGIN WORK #@g00382 
			#@G00382

			INPUT BY NAME frm_contact.cmpy_code, #@g00384 
			frm_contact.contact_id, #@g00385 
			frm_contact.first_name, #@g00386 
			frm_contact.mid_name, #@g00387 
			frm_contact.last_org_name, #@g00388 
			frm_contact.salutation, #@g00389 
			frm_contact.initials, #@g00390 
			frm_contact.title, #@g00391 
			frm_contact.valid_from, #@g00392 
			frm_contact.valid_to #@g00393 
			WITHOUT DEFAULTS #@g00394 
			#@G00394

			#@G00395

			#@G00396
			END INPUT #@g00397 
			IF int_flag = true THEN #@g00398 
				LET int_flag=false #@g00399 
				# Restore previous value		                                                                                              	#@G00400
				LET frm_contact.* = sav_contact.* #@g00401 
				DISPLAY BY NAME frm_contact.* #@g00402 
				MESSAGE "$CancelCom Control-C" #@g00403 
				EXIT WHILE #@g00404 
			END IF #@g00405 

			CALL confirm_operation(4,10,"Modify") RETURNING ACTION #@g00407 

			CASE #@g00409 
				WHEN ACTION = 0 #@g00410 
					# Resign, restore previous VALUES		                                                                                     	#@G00411
					LET frm_contact.* = sav_contact.* #@g00412 
					DISPLAY BY NAME frm_contact.* #@g00413 
					EXIT WHILE # CANCEL operation #@g00414 

				WHEN ACTION = 1 #@g00416 
					# Redo		                                                                                                                	#@G00417
					CONTINUE WHILE #@g00418 

				WHEN ACTION = 2 #@g00420 
					# confirm UPDATE		                                                                                                      	#@G00421
					CALL set_table_record_contact_contact(2,frm_contact.*) #@g00422 
					RETURNING tbl_contact.* #@g00423 
					LET sql_stmt_status = sql_update_contact(pky.*) #@g00424 
					CASE #@g00425 
						WHEN sql_stmt_status = 0 #@g00426 
							MESSAGE "Modify Successful operation" #@g00427 
						COMMIT WORK #@g00428 
						#@G00428
						WHEN sql_stmt_status < 0 #@g00429 
							CALL display_eric_error("Modify contact:failed ") #@g00430 
							ROLLBACK WORK #@g00431 
							#@G00431
					END CASE #@g00432 
					EXIT WHILE #@g00433 
			END CASE #@g00434 
		END WHILE #@g00435 
		RETURN sql_stmt_status #@g00436 
END FUNCTION ## modify_contact(pky) #@g00437 


#######################################################################		                                                  	#@G00440
# DELETE A contact row		                                                                                                   	#@G00441
# inbound: table primary key		                                                                                             	#@G00442
FUNCTION remove_contact(pky) #@g00443 
	DEFINE ACTION SMALLINT #@g00444 
	DEFINE sql_stmt_status SMALLINT #@g00445 
	DEFINE pky RECORD #@g00446 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00447 
	END RECORD #@g00448 

	WHILE true #@g00450 
		CALL confirm_operation(5,10,"Remove") RETURNING ACTION #@g00451 
		BEGIN WORK #@g00452 
			#@G00452
			CASE #@g00453 
				WHEN ACTION = 0 OR ACTION = 1 #@g00454 
					EXIT WHILE # degage abandon #@g00455 
				WHEN ACTION = 2 #@g00456 
					CALL sql_delete_contact(pky.*) RETURNING sql_stmt_status #@g00457 
					CASE #@g00458 
						WHEN sql_stmt_status = 0 #@g00459 
							MESSAGE "Remove Successful operation" #@g00460 
						COMMIT WORK #@g00461 
						#@G00461
						INITIALIZE frm_contact.* TO NULL #@g00462 
						DISPLAY BY NAME frm_contact.* #@g00463 
						INITIALIZE lup_contact.* TO NULL #@g00464 
						INITIALIZE lup_contact.* TO NULL #@g00465 
						DISPLAY BY NAME lup_contact.* #@g00466 
						#@G00466
						WHEN sql_stmt_status < 0 #@g00467 
							CALL display_eric_error("Remove contact:failed ") #@g00468 
							ROLLBACK WORK #@g00469 
							#@G00469
					END CASE #@g00470 
					EXIT WHILE #@g00471 
			END CASE #@g00472 
		END WHILE #@g00473 
		RETURN sql_stmt_status #@g00474 
END FUNCTION ## remove_contact(pky) #@g00475 

#########################################################################		                                                	#@G00477
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00478
FUNCTION prepare_queries_contact_contact () #@g00479 
	DEFINE query_text STRING #@g00480 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00482
	LET query_text= #@g00483 
	"SELECT contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind ", #@g00484 
	" FROM contact ", #@g00485 
	"WHERE contact_seed = ? " #@g00486 

	PREPARE sel_mrw_mcontact FROM query_text #@g00488 
	DECLARE crs_row_mcontact CURSOR FOR sel_mrw_mcontact #@g00489 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00491
	LET query_text= "SELECT contact_seed ", #@g00492 
	" FROM contact ", #@g00493 
	" WHERE contact_seed = ? " #@g00494 

	PREPARE sel_pky_mcontact FROM query_text #@g00496 
	DECLARE crs_pky_mcontact CURSOR FOR sel_pky_mcontact #@g00497 

	# PREPARE INSERT statement		                                                                                              	#@G00499
	LET query_text = #@g00500 
	"INSERT INTO contact ( contact_id,valid_from,cmpy_code,valid_to,contact_seed,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind )", #@g00501 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00502 
	PREPARE pr_ins_mcontact FROM query_text #@g00503 

	# PREPARE UPDATE statement		                                                                                              	#@G00505
	LET query_text= #@g00506 
	"UPDATE contact ", #@g00507 
	"SET ( contact_id,valid_from,cmpy_code,valid_to,org_ind,first_name,first_name_up,mid_name,mid_name_up,cust_code,last_org_name,last_org_name_up,mod_user_id,salutation,initials,user_defined1,user_defined2,title,age_role_code,sex_ind )", #@g00508 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )", #@g00509 
	" WHERE contact_seed = ? " #@g00510 
	PREPARE pr_upd_mcontact FROM query_text #@g00511 

	# PREPARE DELETE statement		                                                                                              	#@G00513
	LET query_text= "DELETE FROM contact ", #@g00514 
	" WHERE contact_seed = ? " #@g00515 

	PREPARE pr_del_mcontact FROM query_text #@g00517 

END FUNCTION ## prepare_queries_contact_contact #@g00519 


#########################################################		                                                                	#@G00522
# Open the QBE CURSOR,		                                                                                                   	#@G00523
# counts returned rows_count,		                                                                                            	#@G00524
# OPEN the data SET,		                                                                                                     	#@G00525
# FETCH first row		                                                                                                        	#@G00526
# inbound parameter: query predicate		                                                                                     	#@G00527
# outbound parameters: number of rows retried		                                                                            	#@G00528
FUNCTION get_qbe_count_contact(qry_stmt) #@g00529 
	DEFINE qry_stmt STRING #@g00530 
	DEFINE rec_contact STRING #@g00531 
	DEFINE row_count INTEGER #@g00532 
	DEFINE lsql_stmt_status INTEGER #@g00533 

	# define primary_key record		                                                                                             	#@G00535
	DEFINE l_pky RECORD #@g00536 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00537 
	END RECORD #@g00538 

	LET rec_contact = #@g00540 
	"SELECT count(*) FROM contact", #@g00541 
	" WHERE ",qry_stmt clipped #@g00542 


	PREPARE rec_nbr_mcontact FROM rec_contact #@g00545 
	DECLARE crs_nbr_mcontact CURSOR FOR rec_nbr_mcontact #@g00546 

	OPEN crs_nbr_mcontact #@g00548 
	SET ISOLATION TO dirty read #@g00549 
	WHENEVER ERROR CONTINUE #@g00550 
	FETCH crs_nbr_mcontact INTO row_count #@g00551 
	WHENEVER ERROR CALL error_mngmt #@g00552 
	SET ISOLATION TO committed read #@g00553 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00555
	IF sqlca.sqlcode OR row_count = 0 THEN #@g00556 
		LET row_count =0 #@g00557 
	END IF #@g00558 
	FREE crs_nbr_mcontact #@g00559 
	RETURN row_count #@g00560 
END FUNCTION ## get_qbe_count_contact #@g00561 

#########################################################		                                                                	#@G00563
# Build the query generated by CONSTRUCT BY NAME,		                                                                        	#@G00564
# Declare AND OPEN the CURSOR		                                                                                            	#@G00565
# inbound param: query predicate		                                                                                         	#@G00566
#outbound parameter: query STATUS		                                                                                        	#@G00567
FUNCTION sql_opn_pky_scr_curscontact(qry_stmt) #@g00568 
	DEFINE qry_stmt STRING #@g00569 
	DEFINE rec_contact STRING #@g00570 
	DEFINE row_count INTEGER #@g00571 
	DEFINE lsql_stmt_status INTEGER #@g00572 

	# define primary_key record		                                                                                             	#@G00574
	DEFINE l_pky RECORD #@g00575 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00576 
	END RECORD #@g00577 

	# display the selected columns		                                                                                          	#@G00579

	LET rec_contact = "SELECT contact_seed ", #@g00581 
	" FROM contact ", #@g00582 
	"WHERE ",qry_stmt clipped, #@g00583 
	" ORDER BY contact_seed " #@g00584 

	PREPARE rech_mcontact FROM rec_contact #@g00586 

	# crs_scrl_mcontact : the first CURSOR selects all the primary keys (NOT all the table columns)		                         	#@G00588

	DECLARE crs_scrl_mcontact SCROLL CURSOR with HOLD FOR rech_mcontact #@g00590 

	WHENEVER ERROR CONTINUE #@g00592 
	OPEN crs_scrl_mcontact #@g00593 
	WHENEVER ERROR CALL error_mngmt #@g00594 

	RETURN sqlca.sqlcode #@g00596 
END FUNCTION ## sql_opn_pky_scr_curscontact #@g00597 

#######################################################################		                                                  	#@G00599
# sql_nxtprev_contact : FETCH NEXT OR PREVIOUS RECORD		                                                                    	#@G00600
FUNCTION sql_nxtprev_contact(offset) #@g00601 
	DEFINE offset SMALLINT #@g00602 
	DEFINE lsql_stmt_status,record_found INTEGER #@g00603 
	DEFINE pky RECORD #@g00604 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00605 
	END RECORD #@g00606 

	#WHENEVER ERROR CONTINUE
	DISPLAY "hello" 
	DISPLAY "hello" #@g00608 
	IF offset = 0 THEN 
		FETCH FIRST crs_scrl_mcontact INTO pky.* #@g00609 
	ELSE 
		FETCH relative offset crs_scrl_mcontact #into pky.* #@g00609 
	END IF 
	WHENEVER ERROR CALL error_mngmt #@g00610 

	CASE #@g00612 
		WHEN sqlca.sqlcode = 100 #@g00613 
			LET record_found = 0 #@g00614 
		WHEN sqlca.sqlcode < 0 #@g00615 
			LET record_found = -1 #@g00616 
		OTHERWISE #@g00617 
			LET lsql_stmt_status = 1 #@g00618 
			CALL sql_fetch_full_row_contact (pky.*) #@g00619 
			RETURNING record_found #@g00620 

	END CASE #@g00622 
	RETURN record_found,pky.* #@g00623 
END FUNCTION ## sql_nxtprev_contact #@g00624 

########################################################################		                                                 	#@G00626
# sql_FETCH_full_row_contact : read a complete row accessing by primary key		                                              	#@G00627
# inbound parameter : primary key		                                                                                        	#@G00628
# outbound parameter: sql_stmt_status AND row contents		                                                                   	#@G00629
FUNCTION sql_fetch_full_row_contact(pky_contact) #@g00630 
	DEFINE sql_stmt_status SMALLINT #@g00631 
	DEFINE pky_contact RECORD #@g00632 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00633 
	END RECORD #@g00634 
	DEFINE lookup_status INTEGER #@g00635 
	#@G00635

	# read the table, access on primary key		                                                                                 	#@G00637
	WHENEVER ERROR CONTINUE #@g00638 
	OPEN crs_row_mcontact #@g00639 
	USING pky_contact.* #@g00640 

	FETCH crs_row_mcontact INTO tbl_contact.* #@g00642 

	WHENEVER ERROR CALL error_mngmt #@g00644 
	CASE #@g00645 
		WHEN sqlca.sqlcode = 100 #@g00646 
			LET sql_stmt_status = 0 #@g00647 
		WHEN sqlca.sqlcode < 0 #@g00648 
			LET sql_stmt_status = -1 #@g00649 
		OTHERWISE #@g00650 
			LET sql_stmt_status = 1 #@g00651 
			CALL set_form_record_contact_f_contact(tbl_contact.*) #@g00652 
			RETURNING frm_contact.* #@g00653 
			#@G00653
	END CASE #@g00654 
	RETURN sql_stmt_status #@g00655 
END FUNCTION ## sql_fetch_full_row_contact #@g00656 

########################################################################		                                                 	#@G00658
## INSERT in table contact 		                                                                                              	#@G00659
########################################################################		                                                 	#@G00660
FUNCTION sql_insert_contact() #@g00661 
	DEFINE lsql_stmt_status INTEGER #@g00662 
	DEFINE row_count SMALLINT #@g00663 
	DEFINE pky RECORD #@g00664 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00665 
	END RECORD #@g00666 
	WHENEVER ERROR CONTINUE #@g00667 
	EXECUTE pr_ins_mcontact #@g00668 
	USING tbl_contact.contact_id, #@g00668 
	tbl_contact.valid_from, #@g00668 
	tbl_contact.cmpy_code, #@g00668 
	tbl_contact.valid_to, #@g00668 
	tbl_contact.contact_seed, #@g00668 
	tbl_contact.org_ind, #@g00668 
	tbl_contact.first_name, #@g00668 
	tbl_contact.first_name_up, #@g00668 
	tbl_contact.mid_name, #@g00668 
	tbl_contact.mid_name_up, #@g00668 
	tbl_contact.cust_code, #@g00668 
	tbl_contact.last_org_name, #@g00668 
	tbl_contact.last_org_name_up, #@g00668 
	tbl_contact.mod_user_id, #@g00668 
	tbl_contact.salutation, #@g00668 
	tbl_contact.initials, #@g00668 
	tbl_contact.user_defined1, #@g00668 
	tbl_contact.user_defined2, #@g00668 
	tbl_contact.title, #@g00668 
	tbl_contact.age_role_code, #@g00668 
	tbl_contact.sex_ind #@g00669 
	WHENEVER ERROR CALL error_mngmt #@g00670 

	IF sqlca.sqlcode < 0 THEN #@g00672 
		LET lsql_stmt_status = -1 #@g00673 
	ELSE #@g00674 
		LET lsql_stmt_status = 0 #@g00675 
		SELECT dbinfo('bigserial') INTO pky.contact_seed #@g00676 
		FROM systables WHERE tabid=1 #@g00677 
		#@G00678

	END IF #@g00680 
	RETURN lsql_stmt_status,pky.* #@g00681 
END FUNCTION ## sql_insert_contact #@g00682 

########################################################################		                                                 	#@G00684
## sql_update_contact :UPDATE contact record		                                                                             	#@G00685
FUNCTION sql_update_contact(pky) #@g00686 
	DEFINE lsql_stmt_status INTEGER #@g00687 
	DEFINE pky RECORD #@g00688 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00689 
	END RECORD #@g00690 

	WHENEVER ERROR CONTINUE #@g00692 
	EXECUTE pr_upd_mcontact #@g00693 
	USING tbl_contact.contact_id, #@g00693 
	tbl_contact.valid_from, #@g00693 
	tbl_contact.cmpy_code, #@g00693 
	tbl_contact.valid_to, #@g00693 
	tbl_contact.org_ind, #@g00693 
	tbl_contact.first_name, #@g00693 
	tbl_contact.first_name_up, #@g00693 
	tbl_contact.mid_name, #@g00693 
	tbl_contact.mid_name_up, #@g00693 
	tbl_contact.cust_code, #@g00693 
	tbl_contact.last_org_name, #@g00693 
	tbl_contact.last_org_name_up, #@g00693 
	tbl_contact.mod_user_id, #@g00693 
	tbl_contact.salutation, #@g00693 
	tbl_contact.initials, #@g00693 
	tbl_contact.user_defined1, #@g00693 
	tbl_contact.user_defined2, #@g00693 
	tbl_contact.title, #@g00693 
	tbl_contact.age_role_code, #@g00693 
	tbl_contact.sex_ind , #@g00694 
	pky.* #@g00695 

	WHENEVER ERROR CALL error_mngmt #@g00697 
	IF sqlca.sqlcode < 0 THEN #@g00698 

		LET lsql_stmt_status = -1 #@g00700 
	ELSE #@g00701 
		LET lsql_stmt_status = 0 #@g00702 
	END IF #@g00703 
	RETURN lsql_stmt_status #@g00704 
END FUNCTION ## sql_update_contact #@g00705 

########################################################################		                                                 	#@G00707
## sql_delete_contact :delete current row in table contact 		                                                              	#@G00708
FUNCTION sql_delete_contact(pky) #@g00709 
	DEFINE lsql_stmt_status SMALLINT #@g00710 
	DEFINE pky RECORD #@g00711 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00712 
	END RECORD #@g00713 

	WHENEVER ERROR CONTINUE #@g00715 
	EXECUTE pr_del_mcontact #@g00716 
	USING pky.* #@g00717 

	WHENEVER ERROR CALL error_mngmt #@g00719 
	IF sqlca.sqlcode < 0 THEN #@g00720 
		LET lsql_stmt_status = -1 #@g00721 
	ELSE #@g00722 
		LET lsql_stmt_status=0 #@g00723 
	END IF #@g00724 
	RETURN lsql_stmt_status #@g00725 
END FUNCTION ## sql_delete_contact #@g00726 

################################################################################		                                         	#@G00728
#   status_pkcontact : Check if primary key exists		                                                                       	#@G00729
# inbound parameter : record of primary key		                                                                              	#@G00730
# outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                               	#@G00731
FUNCTION status_pk_contact(pky) #@g00732 
	DEFINE pky RECORD #@g00733 
		contact_seed LIKE contact.contact_seed # BIGSERIAL #@g00734 
	END RECORD #@g00735 
	DEFINE pk_status INTEGER #@g00736 

	WHENEVER ERROR CONTINUE #@g00738 
	OPEN crs_pky_mcontact USING pky.* #@g00739 
	FETCH crs_pky_mcontact #@g00740 
	WHENEVER ERROR CALL error_mngmt #@g00741 

	CASE sqlca.sqlcode #@g00743 
		WHEN 0 #@g00744 
			LET pk_status = 1 #@g00745 
		WHEN 100 #@g00746 
			LET pk_status = 0 #@g00747 
		WHEN sqlca.sqlerrd[2] = 104 #@g00748 
			LET pk_status = -1 # RECORD locked #@g00749 
		WHEN sqlca.sqlcode < 0 #@g00750 
			LET pk_status = sqlca.sqlcode #@g00751 
	END CASE #@g00752 

	RETURN pk_status #@g00754 
END FUNCTION ## status_pkcontact #@g00755 

################################################################################################		                         	#@G00757
#   set_form_record_contact_f_contact: assigns table VALUES TO form fields VALUES		                                        	#@G00758
FUNCTION set_form_record_contact_f_contact(tbl_contents) #@g00759 
	DEFINE frm_contents RECORD #@g00760 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00760 
		contact_id LIKE contact.contact_id, # int #@g00760 
		first_name LIKE contact.first_name, # CHAR(30) #@g00760 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00760 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00760 
		salutation LIKE contact.salutation, # CHAR(20) #@g00760 
		initials LIKE contact.initials, # CHAR(12) #@g00760 
		title LIKE contact.title, # CHAR(20) #@g00760 
		valid_from LIKE contact.valid_from, # DATE #@g00760 
		valid_to LIKE contact.valid_to # DATE #@g00761 
	END RECORD #@g00762 

	DEFINE tbl_contents RECORD #@g00764 
		contact_id LIKE contact.contact_id, # int #@g00764 
		valid_from LIKE contact.valid_from, # DATE #@g00764 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00764 
		valid_to LIKE contact.valid_to, # DATE #@g00764 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00764 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00764 
		first_name LIKE contact.first_name, # CHAR(30) #@g00764 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00764 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00764 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00764 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00764 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00764 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00764 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00764 
		salutation LIKE contact.salutation, # CHAR(20) #@g00764 
		initials LIKE contact.initials, # CHAR(12) #@g00764 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00764 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00764 
		title LIKE contact.title, # CHAR(20) #@g00764 
		age_role_code LIKE contact.age_role_code, # int #@g00764 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00765 
	END RECORD #@g00766 

	INITIALIZE frm_contents.* TO NULL #@g00768 
	LET frm_contents.cmpy_code = tbl_contact.cmpy_code #@g00769 
	LET frm_contents.contact_id = tbl_contact.contact_id #@g00770 
	LET frm_contents.first_name = tbl_contact.first_name #@g00771 
	LET frm_contents.mid_name = tbl_contact.mid_name #@g00772 
	LET frm_contents.last_org_name = tbl_contact.last_org_name #@g00773 
	LET frm_contents.salutation = tbl_contact.salutation #@g00774 
	LET frm_contents.initials = tbl_contact.initials #@g00775 
	LET frm_contents.title = tbl_contact.title #@g00776 
	LET frm_contents.valid_from = tbl_contact.valid_from #@g00777 
	LET frm_contents.valid_to = tbl_contact.valid_to #@g00778 
	#@G00779
	RETURN frm_contents.* #@g00780 
END FUNCTION ## set_form_record_contact_f_contact #@g00781 

################################################################################################		                         	#@G00783
## set_table_record_contact_contact: assigns form fields value TO table VALUES		                                           	#@G00784
FUNCTION set_table_record_contact_contact(sql_stmt,frm_contents) #@g00785 
	DEFINE sql_stmt SMALLINT # 1 => insert, 2 => UPDATE #@g00786 
	DEFINE frm_contents RECORD #@g00787 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00787 
		contact_id LIKE contact.contact_id, # int #@g00787 
		first_name LIKE contact.first_name, # CHAR(30) #@g00787 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00787 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00787 
		salutation LIKE contact.salutation, # CHAR(20) #@g00787 
		initials LIKE contact.initials, # CHAR(12) #@g00787 
		title LIKE contact.title, # CHAR(20) #@g00787 
		valid_from LIKE contact.valid_from, # DATE #@g00787 
		valid_to LIKE contact.valid_to # DATE #@g00788 
	END RECORD #@g00789 

	DEFINE tbl_contents RECORD #@g00791 
		contact_id LIKE contact.contact_id, # int #@g00791 
		valid_from LIKE contact.valid_from, # DATE #@g00791 
		cmpy_code LIKE contact.cmpy_code, # CHAR(2) #@g00791 
		valid_to LIKE contact.valid_to, # DATE #@g00791 
		contact_seed LIKE contact.contact_seed, # BIGSERIAL #@g00791 
		org_ind LIKE contact.org_ind, # CHAR(1) #@g00791 
		first_name LIKE contact.first_name, # CHAR(30) #@g00791 
		first_name_up LIKE contact.first_name_up, # CHAR(30) #@g00791 
		mid_name LIKE contact.mid_name, # CHAR(30) #@g00791 
		mid_name_up LIKE contact.mid_name_up, # CHAR(30) #@g00791 
		cust_code LIKE contact.cust_code, # CHAR(8) #@g00791 
		last_org_name LIKE contact.last_org_name, # CHAR(50) #@g00791 
		last_org_name_up LIKE contact.last_org_name_up, # CHAR(50) #@g00791 
		mod_user_id LIKE contact.mod_user_id, # CHAR(8) #@g00791 
		salutation LIKE contact.salutation, # CHAR(20) #@g00791 
		initials LIKE contact.initials, # CHAR(12) #@g00791 
		user_defined1 LIKE contact.user_defined1, # CHAR(30) #@g00791 
		user_defined2 LIKE contact.user_defined2, # CHAR(30) #@g00791 
		title LIKE contact.title, # CHAR(20) #@g00791 
		age_role_code LIKE contact.age_role_code, # int #@g00791 
		sex_ind LIKE contact.sex_ind # CHAR(1) #@g00792 
	END RECORD #@g00793 

	INITIALIZE tbl_contents.* TO NULL #@g00795 
	LET tbl_contents.contact_id = frm_contact.contact_id #@g00796 
	LET tbl_contents.valid_from = frm_contact.valid_from #@g00797 
	LET tbl_contents.cmpy_code = frm_contact.cmpy_code #@g00798 
	LET tbl_contents.valid_to = frm_contact.valid_to #@g00799 
	IF sql_stmt = 1 THEN #@g00800 
		LET tbl_contents.contact_seed = 0 #@g00801 
	END IF #@g00802 
	# LET tbl_contents.org_ind = your value		                                                                                  	#@G00803
	LET tbl_contents.first_name = frm_contact.first_name #@g00794 
	LET tbl_contents.first_name_up = upshift(tbl_contents.first_name) #@g00795 
	LET tbl_contents.mid_name = frm_contact.mid_name #@g00796 
	LET tbl_contents.mid_name_up = upshift(tbl_contents.mid_name) #@g00797 
	LET tbl_contents.cust_code = 0 #@g00798 
	LET tbl_contents.last_org_name = frm_contact.last_org_name #@g00799 
	LET tbl_contents.last_org_name_up = upshift(tbl_contents.last_org_name) #@g00800 
	LET tbl_contents.mod_user_id = fgl_username() #@g00801 
	LET tbl_contents.salutation = frm_contact.salutation #@g00802 
	LET tbl_contents.initials = frm_contact.initials #@g00813 
	# LET tbl_contents.user_defined1 = your value		                                                                            	#@G00814
	# LET tbl_contents.user_defined2 = your value		                                                                            	#@G00815
	LET tbl_contents.title = frm_contact.title #@g00816 
	# LET tbl_contents.age_role_code = your value		                                                                            	#@G00817
	# LET tbl_contents.sex_ind = your value		                                                                                  	#@G00818
	#@G00819

	RETURN tbl_contents.* #@g00821 
END FUNCTION ## set_table_record_contact_contact #@g00822 

#@G00824

#@G00826

#@G00828

