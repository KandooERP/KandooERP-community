		
# module generated by KandooERP Ffg(c)		
# Generated on 2021-04-04 09:36:05		
# Main template H:\Eclipse\git\KandooERP\KandooERP\Resources\Utilities\Perl\Ffg/templates/module/Kandoo-parent-scroll-menu.mtplt 		
		
GLOBALS "common/glob_GLOBALS.4gl"		
			
		
	DEFINE type_frm_rec_G952 TYPE AS RECORD # This is the TYPE for form image record		
		cmpy_code LIKE company.cmpy_code, #  nchar(2)		
		name_text LIKE company.name_text #  nvarchar(40)				
	END RECORD		
		
	DEFINE type_tbl_rec_company TYPE AS RECORD # This is the TYPE for table image record		
		cmpy_code LIKE company.cmpy_code, # nchar(2)		
		name_text LIKE company.name_text, # nvarchar(40)		
		addr1_text LIKE company.addr1_text, # nvarchar(60)		
		addr2_text LIKE company.addr2_text, # nvarchar(60)		
		city_text LIKE company.city_text, # nvarchar(30)		
		state_code LIKE company.state_code, # nchar(6)		
		post_code LIKE company.post_code, # nchar(10)		
		country_code LIKE company.country_code, # nchar(3)		
		language_code LIKE company.language_code, # nchar(3)		
		fax_text LIKE company.fax_text, # nvarchar(20)		
		tax_text LIKE company.tax_text, # nvarchar(30)		
		telex_text LIKE company.telex_text, # nvarchar(30)		
		com1_text LIKE company.com1_text, # nvarchar(50)		
		com2_text LIKE company.com2_text, # nvarchar(50)		
		tele_text LIKE company.tele_text, # nvarchar(20)		
		mobile_phone LIKE company.mobile_phone, # char(20)		
		email LIKE company.email, # varchar(128)		
		curr_code LIKE company.curr_code, # nchar(3)		
		module_text LIKE company.module_text, # nvarchar(26)		
		vat_code LIKE company.vat_code, # nchar(14)		
		vat_div_code LIKE company.vat_div_code, # nchar(3)		
		legal_creation_date LIKE company.legal_creation_date # date				
	END RECORD		
		
	DEFINE type_prykey_company TYPE AS RECORD 		
		cmpy_code LIKE company.cmpy_code # nchar(2)				
	END RECORD		
		
			
		
	CONSTANT CLASSIC_MODE_EDIT = "EDIT"		
	CONSTANT CLASSIC_MODE_ADD = "ADD"		
	DEFINE mdl_program CHAR(30)		
		
	# Define cursors and prepared statements		
	DEFINE crs_row_company CURSOR		
	DEFINE crs_pky_company CURSOR		
	DEFINE crs_upd_company CURSOR		
	DEFINE crs_cnt_company CURSOR		
	DEFINE crs_scrl_pky_company CURSOR		
	DEFINE pr_ins_company PREPARED		
	DEFINE pr_upd_company PREPARED		
	DEFINE pr_del_company PREPARED		
		
MAIN		
	DEFER INTERRUPT		
		
	WHENEVER SQLERROR CALL error_mngmt		
	CALL setModuleId("ProgramName")			# put program name here (1 letter 2 or 3 digits)		
	CALL ui_init(0)		#Initial UI Init		
	DEFER QUIT		
	DEFER INTERRUPT		
		
	CALL main_U1C__auth_currencies()		
		
END MAIN		
		
##########################################################################		
FUNCTION main_U1C__auth_currencies ()		
## this module's main function called by MAIN		
		
	CALL security(getModuleId()) #authenticate		
	--CALL init_U_U1()      #init utility module # put Business module letter + 2 letters		
		
	CALL sql_prepare_queries_parent_U1C__auth_currencies () # initialize all cursors on master table		
	CALL sql_prepare_queries_U1C__auth_currencies_child()      # initialize allcursors on Child table
			
		
	OPEN WINDOW G952 WITH FORM "G952"		
			
		
	CALL menu_U1C__auth_currencies_parent()      		
		
	CLOSE WINDOW G952		
		
END FUNCTION # main_U1C__auth_currencies		
		
######################################################################		
FUNCTION menu_U1C__auth_currencies_parent ()		
## menu_U1C__auth_currencies_parent		
## the top level menu 		
## input arguments: none		
## output arguments: none		
	DEFINE nbsel_company INTEGER		
	DEFINE sql_stmt_status INTEGER		
	DEFINE record_num INTEGER		
	DEFINE action smallint		
	DEFINE xnumber smallint		
	DEFINE arr_elem_num smallint		
	DEFINE l_prykey_company type_prykey_company # Primary key record		
	DEFINE l_frm_rec_G952 type_frm_rec_G952 # Form image record		
	DEFINE l_tbl_rec_company type_tbl_rec_company # Table image record		
		
	DEFINE where_clause STRING		
	DEFINE record_found INTEGER		
	DEFINE lookup_status INTEGER		
		
	LET nbsel_company = 0		
	MENU "company"		
	BEFORE MENU		
HIDE OPTION "Next","Previous","Edit","Delete","View Array used_currency","Edit Array used_currency"		

				
		
	COMMAND "Query" "Query data with multiple criteria company"		
		MESSAGE ""		
		INITIALIZE l_frm_rec_G952.* TO NULL		
		CLEAR FORM		
		DISPLAY BY NAME l_frm_rec_G952.*		
		HIDE OPTION "Next","Previous"		
		
		# Build the QBE where clause		
		CALL frm_construct_dataset_parent_U1C__auth_currencies() RETURNING where_clause 		
		
		# Call the function that counts matching rows and opens the scroll cursor on primary key		
		CALL sql_dclr_pky_scr_curs_parent_U1C__auth_currencies(where_clause)		
		RETURNING nbsel_company,sql_stmt_status		
		WHENEVER SQLERROR CONTINUE		
		CALL crs_scrl_pky_company.Open()		
		WHENEVER SQLERROR CALL error_mngmt		
		
		IF nbsel_company > 0 THEN 		
			CALL sql_nxtprev_parent_U1C__auth_currencies(1) RETURNING record_found,		
			l_prykey_company.*		
		
			CASE		
				WHEN record_found = 1		
					LET record_num = 1		
					CALL sql_fetch_full_row_parent_U1C__auth_currencies (l_prykey_company.*)		
					RETURNING record_found,l_frm_rec_G952.*		
					CALL frm_display_parent_U1C__auth_currencies_G952(l_frm_rec_G952.*)		
					CALL frm_display_array_used_currency (l_prykey_company,TRUE) RETURNING arr_elem_num 
					IF arr_elem_num > 0 THEN
						SHOW OPTION "View Array used_currency","Edit Array used_currency"
					ELSE
						HIDE OPTION "View Array used_currency","Edit Array used_currency"
					END IF
							
				WHEN record_found = -1 		
					ERROR "This row is unreachable ",sqlca.sqlcode		
			END CASE		
			IF nbsel_company > 1 THEN		
			   SHOW OPTION "Next"		
			   NEXT OPTION "Next"		
			END IF		
			SHOW OPTION "Edit","Delete"		
		ELSE 		
			ERROR "No row matches the criteria"		
			NEXT OPTION "Query"		
		END IF		
		
	COMMAND "Next" "Display Next record company"		
		MESSAGE ""		
		CLEAR FORM		
		INITIALIZE l_frm_rec_G952.* TO NULL		
		
		IF record_num <= nbsel_company THEN		
			CALL sql_nxtprev_parent_U1C__auth_currencies(1) RETURNING record_found,		
			l_prykey_company.*		
		
			CASE 		
			WHEN record_found = 0 		
				ERROR "fetch Last record of this selection company"		
			WHEN record_found = -1 		
				ERROR "This row is unreachable ",sqlca.sqlcode		
			WHEN record_found = 1		
				LET record_num = record_num + 1		
				CALL sql_fetch_full_row_parent_U1C__auth_currencies (l_prykey_company.*)		
				RETURNING record_found,l_frm_rec_G952.*		
				CALL frm_display_parent_U1C__auth_currencies_G952(l_frm_rec_G952.*)		
				CALL frm_display_array_used_currency (l_prykey_company,TRUE) RETURNING arr_elem_num 
				IF arr_elem_num > 0 THEN
					SHOW OPTION "View Array used_currency","Edit Array used_currency"
				ELSE
					HIDE OPTION "View Array used_currency","Edit Array used_currency"
				END IF
						
		
				IF record_num >= nbsel_company THEN		
				   HIDE OPTION "Next"		
				END IF		
                IF record_num > 1 THEN		
                	SHOW OPTION "Previous"		
                ELSE		
                	HIDE OPTION "Previous"		
				END IF		
			END CASE		
		ELSE		
			ERROR " Please set query criteria previously company "		
			NEXT OPTION "Query" 		
		END IF		
		
	COMMAND "Previous" "Display Previous Record company"		
		MESSAGE ""		
		CLEAR FORM		
		INITIALIZE l_frm_rec_G952.* TO NULL		
		
		IF record_num >= 1 THEN		
			CALL sql_nxtprev_parent_U1C__auth_currencies(-1) RETURNING record_found,		
			l_prykey_company.*		
			CASE 		
			WHEN record_found = 0		
				ERROR "fetch First record of this selection company"		
			WHEN record_found < -1		
				ERROR "This row is unreachable ",sqlca.sqlcode		
			WHEN record_found = 1		
				LET record_num = record_num - 1		
				CALL sql_fetch_full_row_parent_U1C__auth_currencies (l_prykey_company.*)		
				RETURNING record_found,l_frm_rec_G952.*		
		
				CALL frm_display_parent_U1C__auth_currencies_G952(l_frm_rec_G952.*)		
				CALL frm_display_array_used_currency (l_prykey_company,TRUE) RETURNING arr_elem_num 
				IF arr_elem_num > 0 THEN
					SHOW OPTION "View Array used_currency","Edit Array used_currency"
				ELSE
					HIDE OPTION "View Array used_currency","Edit Array used_currency"
				END IF
						
		
				IF record_num = 1 THEN		
				   HIDE OPTION "Previous"		
				END IF		
                IF record_num < nbsel_company THEN		
                	SHOW OPTION "Next"		
                ELSE		
                	HIDE OPTION "Next"		
				END IF		
			END CASE		
		ELSE		
			ERROR " Please set query criteria previously company "		
			NEXT OPTION "Query"		
		END IF		
		
	COMMAND "Add" "Add a new record company"		
		MESSAGE ""		
		CALL frm_input_parent_U1C__auth_currencies(MODE_CLASSIC_ADD,l_prykey_company.*,l_frm_rec_G952.*) 		
		RETURNING sql_stmt_status,l_prykey_company.*		
		MESSAGE ""		
		SHOW OPTION "Edit Array used_currency"
				
		
	COMMAND "Edit" "Modify current record company"		
		MESSAGE ""		
		IF nbsel_company THEN		
			IF sql_pky_exists_parent_U1C__auth_currencies(l_prykey_company.*) < 0 THEN		
				ERROR "is locked "		
				NEXT OPTION "Next"		
			ELSE		
				CALL frm_input_parent_U1C__auth_currencies(MODE_CLASSIC_EDIT,l_prykey_company.*,l_frm_rec_G952.*) 		
				RETURNING sql_stmt_status,l_prykey_company.*		
			END IF		
		ELSE		
			ERROR " Please set query criteria previously company "		
			NEXT OPTION "Query"		
		END IF		
		
   COMMAND "Delete" "Suppress current record company"		
				
		MESSAGE ""		
		IF nbsel_company THEN		
			IF sql_pky_exists_parent_U1C__auth_currencies(l_prykey_company.*) < 0 THEN		
				ERROR "is locked "		
				NEXT OPTION "Next"		
			END IF		
			WHILE TRUE		
				CALL confirm_operation(5,10,"Delete") RETURNING action		
				CASE 		
				WHEN action = 0 OR action = 1 		
					EXIT WHILE # degage abandon		
				WHEN action = 2 		
					CALL frm_suppress_parent_U1C__auth_currencies(l_prykey_company.*)		
					RETURNING sql_stmt_status		
					EXIT WHILE		
				END CASE		
			END WHILE		
		ELSE		
			ERROR "Please set query criteria previously company "		
			NEXT OPTION "Query"		
		END IF		
		
	ON ACTION "View Array"
	CALL frm_display_array_used_currency (l_prykey_company.*,False)
	ON ACTION "Edit Array"
	CALL edit_array_sr_currency (l_prykey_company.*)
			
		
	COMMAND "Close" "Exit program"		
		MESSAGE ""		
		EXIT MENU		
	END MENU		
END FUNCTION # menu_U1C__auth_currencies_parent ()		
		
#######################################################################		
FUNCTION frm_construct_dataset_parent_U1C__auth_currencies()		
## frm_construct_dataset_parent_U1C__auth_currencies_G952 : Query By Example on table company		
## Input selection criteria,		
## prepare the query,		
## open the data set		
	DEFINE qbe_statement,where_clause STRING		
	DEFINE xnumber,sql_stmt_status INTEGER		
	DEFINE l_prykey type_prykey_company 		
		
	DEFINE l_frm_rec_G952 type_frm_rec_G952 # Form image record		
		
	DEFINE reply CHAR(5)		
	LET xnumber = 0		
	MESSAGE "Please input query criteria"		
	# initialize record and display blank		
	CLEAR FORM		
	INITIALIZE l_frm_rec_G952.* TO NULL		
	DISPLAY BY NAME l_frm_rec_G952.* 		
		
	CONSTRUCT BY NAME where_clause ON company.cmpy_code,		
	company.name_text				
		
	## Check whether criteria have been entered		
	AFTER CONSTRUCT 		
		IF NOT field_touched(company.cmpy_code,		
		company.name_text				)		
		AND NOT int_flag THEN		
			LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0)		
			CASE 		
			WHEN reply MATCHES "Yes"		
				EXIT CONSTRUCT 		
			OTHERWISE # Saisie d'un critere de selection		
				ERROR "Please input a least one criteria"		
				CONTINUE CONSTRUCT		
			END CASE		
		END IF		
	END CONSTRUCT		
		
	IF int_flag = TRUE THEN		
		LET where_clause = NULL		
		MESSAGE "Quit with quit key"		
		LET int_flag=0		
	END IF		
	RETURN where_clause		
END FUNCTION ## frm_construct_dataset_parent_U1C__auth_currencies		
		
#######################################################################		
# frm_display_parent_U1C__auth_currencies_G952 : displays the form record after reading and displays lookup records if any		
# inbound: Form record.*		
FUNCTION frm_display_parent_U1C__auth_currencies_G952(p_frm_rec_G952)		
	DEFINE p_frm_rec_G952 type_frm_rec_G952 		
		
			
		
	DISPLAY BY NAME p_frm_rec_G952.cmpy_code,		
	p_frm_rec_G952.name_text				
			
		
END FUNCTION # frm_display_parent_U1C__auth_currencies_G952		
		
#######################################################################		
# frm_input_parent_U1C__auth_currencies_G952 : Edit a company RECORD		
# inbound: p_mode : determines whether Add or Edit record (ADD/EDIT)		
#          p_pky: table primary key		
#          p_frm_rec_G952 : contents of the form record		
FUNCTION frm_input_parent_U1C__auth_currencies(p_mode,p_pky,p_frm_rec_G952)		
	DEFINE action SMALLINT 		
	DEFINE sql_stmt_status,dummy SMALLINT		
	DEFINE p_mode NCHAR(5)		
	DEFINE p_pky type_prykey_company #Primary key record 		
	DEFINE p_frm_rec_G952 type_frm_rec_G952 # Form image record		
	DEFINE sav_rec_G952 type_frm_rec_G952 # Form image record to save the data		
	DEFINE l_tbl_rec_company type_tbl_rec_company # Table image record		
			
	DEFINE rows_count SMALLINT		
		
	## check if record can be accessed		
	WHILE true		
		LET int_flag = false		
		IF p_mode = MODE_CLASSIC_EDIT THEN		
			# Save Screen Record values before altering		
			LET sav_rec_G952.* = p_frm_rec_G952.* 		
			BEGIN WORK		
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS"		
			WHENEVER SQLERROR CONTINUE		
			CALL crs_upd_company.Open(p_pky.*)		
			CALL crs_upd_company.FetchNext(dummy)		
			IF sqlca.sqlcode = -244 THEN		
				ERROR "THIS ROW IS BEING MODIFIED"		
				ROLLBACK WORK		
				EXIT WHILE		
			END IF		
		END IF		
		
		INPUT BY NAME p_frm_rec_G952.cmpy_code,		
		p_frm_rec_G952.name_text						
		WITHOUT DEFAULTS		
			BEFORE INPUT		
				IF p_mode = MODE_CLASSIC_EDIT THEN # IF we edit the record, we do not modify the primary key fields		
					CALL DIALOG.SetFieldActive('cmpy_code',FALSE)		
							
				ELSE		
					CALL DIALOG.SetFieldActive('cmpy_code',TRUE)		
							
				END IF		
		
					
		
					
		
		END INPUT		
		
		IF int_flag = TRUE THEN		
			LET int_flag=false		
			# Restore previous value		
			LET p_frm_rec_G952.* = sav_rec_G952.*		
			DISPLAY p_frm_rec_G952.*  TO company.*		
				
		
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
			ROLLBACK WORK		
			MESSAGE "$CancelCom Control-C"		
			EXIT WHILE		
		END IF 		
		
		CALL confirm_operation(4,10,"Edit") RETURNING action		
		
		CASE 		
		WHEN action = 0		
			# Redo, leave values as modified		
			CONTINUE WHILE		
		WHEN action = 1 		
			# Resign, restore original values		
			LET p_frm_rec_G952.* = sav_rec_G952.*		
			DISPLAY p_frm_rec_G952.*  TO company.*		
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
			ROLLBACK WORK		
			EXIT WHILE # Cancel operation		
		
		WHEN action = 2 		
			# confirm update		
			CALL set_table_record_parent_G952_company("#",p_frm_rec_G952.*)		
			RETURNING l_tbl_rec_company.*		
		
			# Perform the prepared update statement		
			LET sql_stmt_status = sql_update_parent_U1C__auth_currencies(p_pky.*,l_tbl_rec_company.*) 		
			CASE 		
			WHEN sql_stmt_status = 0		
				MESSAGE "Edit company Successful operation"		
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
				COMMIT WORK		
		
			WHEN sql_stmt_status < 0		
				CALL display_error("Edit company:failed ")		
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
				ROLLBACK WORK		
		
			END CASE		
			EXIT WHILE		
		END CASE		
	END WHILE		
	RETURN sql_stmt_status		
END FUNCTION ## frm_input_parent_U1C__auth_currencies(p_pky)		
		
####################################################################		
## frm_add_U1C__auth_currencies_G952: add a new company row		
FUNCTION frm_add_U1C__auth_currencies()		
	DEFINE sql_stmt_status SMALLINT		
	DEFINE rows_count SMALLINT		
	DEFINE l_nbrows_company ,action SMALLINT		
		
	DEFINE l_frm_rec_G952 type_frm_rec_G952 # Form image record		
	DEFINE l_tbl_rec_company type_tbl_rec_company # Table image record		
			
		
	CLEAR FORM		
	INITIALIZE l_frm_rec_G952.* TO NULL		
		
	WHILE true		
		LET int_flag = false		
		INPUT BY NAME l_frm_rec_G952.cmpy_code,		
		l_frm_rec_G952.name_text						
		WITHOUT DEFAULTS		
			AFTER FIELD cmpy_code		
				IF l_frm_rec_G952.cmpy_code IS NULL THEN		
					NEXT FIELD cmpy_code		
				END IF		
				IF sql_pky_exists_company(l_frm_rec_G952.cmpy_code) THEN		
					ERROR "company: already exists"		
					NEXT FIELD cmpy_code		
				END IF		
				
		
				
		END INPUT		
		IF int_flag = TRUE THEN		
			# Resign from input		
			LET int_flag=false		
			DISPLAY l_frm_rec_G952 .*  TO company.*		
			MESSAGE "Quit with quit key Control-C"		
			EXIT WHILE		
		END IF 		
		
		CALL confirm_operation(3,10,"Add") RETURNING action		
		CASE action		
		WHEN 0 # I want to edit the input, remains displayed 'as is'		
			CONTINUE WHILE # leave display as is		
		
		WHEN 2 # transaction is committed		
			BEGIN WORK		
			CALL set_table_record_parent_G952_company('+', l_frm_rec_G952 .*)		
			RETURNING l_tbl_rec_company.*		
			CALL sql_insert_parent_U1C__auth_currencies(l_tbl_rec_company.*) 		
			returning sql_stmt_status,		
			l_tbl_rec_company.cmpy_code					
		
			CASE 		
			WHEN sql_stmt_status = 0		
				MESSAGE "Add company Successful operation"		
				COMMIT WORK		
		
			WHEN sql_stmt_status < 0		
				CALL display_error("Add company:failed ")		
				ROLLBACK WORK		
		
			END CASE		
			EXIT WHILE		
		
		WHEN 0		
			ROLLBACK WORK		
			EXIT WHILE		
		END CASE		
	END WHILE		
	# l_tbl_rec_company		
	RETURN sql_stmt_status,	l_tbl_rec_company.cmpy_code			
END FUNCTION ## frm_add_U1C__auth_currencies_G952		
		
		
#######################################################################		
# frm_edit_U1C__auth_currencies_G952 : Edit a company RECORD		
# inbound: table primary key		
FUNCTION frm_edit_U1C__auth_currencies(p_prykey,p_frm_rec_G952)		
	DEFINE action SMALLINT 		
	DEFINE sql_stmt_status,dummy INTEGER		
	DEFINE nbr_updated_rows INTEGER		
		
	DEFINE p_frm_rec_G952 type_frm_rec_G952 # Form image record		
	DEFINE sav_rec_G952 type_frm_rec_G952 # Form image record to save the data		
	DEFINE l_tbl_rec_company type_tbl_rec_company # Table image record		
	DEFINE p_prykey type_prykey_company #Primary key record 		
			
		
	DEFINE rows_count SMALLINT		
		
	## check if record can be accessed		
	WHILE true		
		LET int_flag = false		
		# Save Screen Record values before altering		
		LET sav_rec_G952.* = p_frm_rec_G952.* 		
		BEGIN WORK		
		EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS"		
		WHENEVER SQLERROR CONTINUE		
		CALL crs_upd_company.Open(p_prykey.*)		
		CALL crs_upd_company.FetchNext(dummy)		
		IF sqlca.sqlcode = -244 THEN		
			ERROR "THIS ROW IS BEING MODIFIED"		
			ROLLBACK WORK		
			EXIT WHILE		
		END IF		
		
		INPUT BY NAME p_frm_rec_G952.name_text				
		WITHOUT DEFAULTS		
				
		
				
		
		END INPUT		
		IF int_flag = TRUE THEN		
			LET int_flag=false		
			# Restore previous value		
			LET p_frm_rec_G952.* = sav_rec_G952.*		
			DISPLAY p_frm_rec_G952.*  TO company.*		
				
		
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
			ROLLBACK WORK		
			MESSAGE "$CancelCom Control-C"		
			EXIT WHILE		
		END IF 		
		
		CALL confirm_operation(4,10,"Edit") RETURNING action		
		
		CASE 		
		WHEN action = 0		
			# Redo, leave values as modified		
			CONTINUE WHILE		
		WHEN action = 1 		
			# Resign, restore original values		
			LET p_frm_rec_G952.* = sav_rec_G952.*		
			DISPLAY p_frm_rec_G952.*  TO company.*		
			EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
			ROLLBACK WORK		
			EXIT WHILE # Cancel operation		
		
		WHEN action = 2 		
			# confirm update		
			CALL set_table_record_parent_G952_company("#",p_frm_rec_G952.*)		
			RETURNING l_tbl_rec_company.*		
		
			# Perform the prepared update statement		
			CALL sql_update_parent_U1C__auth_currencies(p_prykey.*,l_tbl_rec_company.*) RETURNING sql_stmt_status,nbr_updated_rows		
			CASE 		
			WHEN sql_stmt_status = 0		
				MESSAGE "Edit company Successful operation"		
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
				COMMIT WORK		
		
			WHEN sql_stmt_status < 0		
				CALL display_error("Edit company:failed ")		
				EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ"		
				ROLLBACK WORK		
		
			END CASE		
			EXIT WHILE		
		END CASE		
	END WHILE		
	RETURN sql_stmt_status		
END FUNCTION ## frm_edit_U1C__auth_currencies(p_prykey)		
		
		
#######################################################################		
# DELETE A company row		
# inbound: table primary key		
FUNCTION frm_suppress_parent_U1C__auth_currencies(p_prykey)		
	DEFINE action SMALLINT		
	DEFINE dummy SMALLINT		
	DEFINE sql_stmt_status INTEGER		
	DEFINE nbr_deleted_rows INTEGER		
	DEFINE p_prykey type_prykey_company #Primary key record 		
		
	WHILE TRUE		
		CALL confirm_operation(5,10,"Delete") RETURNING action		
		BEGIN WORK		
		EXECUTE IMMEDIATE "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS"		
		WHENEVER SQLERROR CONTINUE		
		CALL crs_upd_company.Open(p_prykey.*)		
		CALL crs_upd_company.FetchNext(dummy)		
		IF sqlca.sqlcode = -244 THEN		
			ERROR "THIS ROW IS BEING MODIFIED"		
			ROLLBACK WORK		
			EXIT WHILE		
		END IF		
		
		CASE 		
		WHEN action = 0 OR action = 1 		
			# can the delete operation		
			EXIT WHILE 		
		WHEN action = 2		
			# Validate the delete operation		
			CALL sql_delete_parent_U1C__auth_currencies(p_prykey.*) RETURNING sql_stmt_status,nbr_deleted_rows		
			CASE 		
				WHEN sql_stmt_status = 0		
					MESSAGE "Delete company Successful operation "		
					COMMIT WORK		
				WHEN sql_stmt_status < 0		
					CALL display_error("Delete company:failed ")		
					ROLLBACK WORK		
			END CASE		
			EXIT WHILE		
		END CASE		
	END WHILE		
	RETURN sql_stmt_status		
END FUNCTION ## frm_suppress_parent_U1C__auth_currencies(p_prykey)		
		
#########################################################################		
#  Build, prepare, declare and initialize main queries and cursors		
FUNCTION sql_prepare_queries_parent_U1C__auth_currencies ()		
	DEFINE sql_stmt_text STRING		
		
	# Declare cursor for full master table row contents, access by primary key		
	LET sql_stmt_text=		
	"SELECT 	cmpy_code,name_text,addr1_text,addr2_text,city_text,state_code,post_code,country_code,language_code,fax_text,tax_text,telex_text,com1_text,com2_text,tele_text,mobile_phone,email,curr_code,module_text,vat_code,vat_div_code,legal_creation_date	",		
	" FROM company ",		
	"WHERE  cmpy_code = ?	"		
	CALL crs_row_company.Declare(sql_stmt_text)		
		
	# Declare cursor for row test / check if locked		
	let sql_stmt_text= "SELECT 	cmpy_code	",		
	" FROM company ",		
	" WHERE  cmpy_code = ?	"		
	CALL crs_pky_company.Declare(sql_stmt_text)		
		
	# Declare cursor for SELECT FOR UPDATE		
	let sql_stmt_text= "SELECT 	cmpy_code	",		
	" FROM company ",		
	" WHERE  cmpy_code = ?	",		
	" FOR UPDATE"		
	CALL crs_upd_company.Declare(sql_stmt_text,1,0)		
		
	# PREPARE INSERT statement		
	LET sql_stmt_text =		
	"INSERT INTO company (	cmpy_code,name_text,addr1_text,addr2_text,city_text,state_code,post_code,country_code,language_code,fax_text,tax_text,telex_text,com1_text,com2_text,tele_text,mobile_phone,email,curr_code,module_text,vat_code,vat_div_code,legal_creation_date	)",		
	" VALUES ( 	?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?	)" 		
	CALL pr_ins_company.Prepare(sql_stmt_text)		
		
	# PREPARE UPDATE statement		
	let sql_stmt_text=		
	"UPDATE company ",		
	"SET ( 	name_text,addr1_text,addr2_text,city_text,state_code,post_code,country_code,language_code,fax_text,tax_text,telex_text,com1_text,com2_text,tele_text,mobile_phone,email,curr_code,module_text,vat_code,vat_div_code,legal_creation_date	)",		
	" = ( 	?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?	)",		
	" WHERE  cmpy_code = ?	" 		
	CALL pr_upd_company.Prepare(sql_stmt_text)		
		
	# PREPARE DELETE statement		
	let sql_stmt_text= "DELETE FROM company ",		
	" WHERE  cmpy_code = ?	" 		
	CALL pr_del_company.Prepare(sql_stmt_text)		
		
END FUNCTION ## sql_prepare_queries_parent_U1C__auth_currencies		
		
#########################################################		
FUNCTION sql_dclr_pky_scr_curs_parent_U1C__auth_currencies(where_clause)		
## Build the query generated by CONSTRUCT BY NAME,		
## Declare and open the cursor		
## inbound param: query predicate		
## outbound parameter: query status		
	DEFINE where_clause STRING		
	DEFINE qbe_statement STRING		
	DEFINE rows_count integer		
	DEFINE l_sql_stmt_status integer		
		
	# define primary_key record		
	DEFINE l_prykey type_prykey_company #Primary key record 		
		
	LET qbe_statement = 		
		"SELECT count(*) FROM company",		
		" WHERE ",where_clause CLIPPED		
		
	CALL crs_cnt_company.Declare(qbe_statement)		
	CALL crs_cnt_company.Open()		
	SET ISOLATION TO DIRTY READ		
	WHENEVER SQLERROR CONTINUE		
		
	CALL crs_cnt_company.FetchNext(rows_count)		
	WHENEVER SQLERROR CALL error_mngmt		
	SET ISOLATION TO COMMITTED READ		
		
	# if FETCH fails, count = 0, the, get back to query		
	IF sqlca.sqlcode OR rows_count = 0 THEN		
		let rows_count =0		
	END IF		
	CALL crs_cnt_company.Free()		
		
	# display the selected columns		
		
	LET qbe_statement = "SELECT 	cmpy_code	",		
	" FROM company ",		
	"WHERE ",where_clause clipped,		
	" ORDER BY 	cmpy_code	"		
		
	# crs_scrl_pky_company : the first cursor selects all the primary keys (not all the table columns)		
	CALL crs_scrl_pky_company.Declare(qbe_statement,1,1)   # SCROLL CURSOR WITH HOLD		
		
	WHENEVER SQLERROR CONTINUE		
	CALL crs_scrl_pky_company.Open()		
	WHENEVER SQLERROR CALL error_mngmt		
		
	RETURN rows_count,sqlca.sqlcode		
END FUNCTION ## sql_dclr_pky_scr_curs_parent_U1C__auth_currencies		
		
#######################################################################		
FUNCTION sql_nxtprev_parent_U1C__auth_currencies(offset)		
## sql_nxtprev_parent_U1C__auth_currencies : FETCH NEXT OR PREVIOUS RECORD		
	DEFINE offset SMALLINT		
	define l_sql_stmt_status,record_found integer		
	DEFINE l_prykey type_prykey_company #Primary key record 		
	DEFINE frm_rec_G952 type_frm_rec_G952		
		
	WHENEVER SQLERROR CONTINUE		
	CALL crs_scrl_pky_company.FetchRelative(offset,l_prykey.*)		
	WHENEVER SQLERROR CALL error_mngmt		
		
	CASE 		
		WHEN sqlca.sqlcode = 100 		
			LET record_found = 0		
		
		WHEN sqlca.sqlcode < 0 		
			LET record_found = -1		
		OTHERWISE		
			LET l_sql_stmt_status = 1		
			LET record_found = 1		
	END CASE		
	RETURN record_found,l_prykey.*		
END FUNCTION ## sql_nxtprev_parent_U1C__auth_currencies		
		
#########################################################################################		
FUNCTION sql_fetch_full_row_parent_U1C__auth_currencies(p_prykey_company)		
# sql_fetch_full_row_parent_U1C__auth_currencies : read a complete row accessing by primary key		
# inbound parameter : primary key		
# outbound parameter: sql_stmt_status and row contents		
	DEFINE sql_stmt_status smallint		
	DEFINE p_prykey_company type_prykey_company #Primary key record 		
	DEFINE l_tbl_rec_company type_tbl_rec_company # Table image record		
	DEFINE frm_rec_G952 type_frm_rec_G952 # Form image record		
		
			
		
	# read the table, access on primary key		
WHENEVER SQLERROR CONTINUE		
	CALL crs_row_company.Open(p_prykey_company.*)		
	CALL crs_row_company.FetchNext(l_tbl_rec_company.*)		
		
WHENEVER SQLERROR CALL error_mngmt		
	CASE		
		WHEN sqlca.sqlcode = 100 		
			LET sql_stmt_status = 0		
		WHEN sqlca.sqlcode < 0 		
				LET sql_stmt_status = -1		
		OTHERWISE		
			LET sql_stmt_status = 1		
			CALL set_form_record_parent_company_G952(l_tbl_rec_company.*)		
			RETURNING frm_rec_G952.*		
	END CASE		
	RETURN sql_stmt_status,frm_rec_G952.*		
END FUNCTION ## sql_fetch_full_row_parent_U1C__auth_currencies		
		
########################################################################		
FUNCTION sql_insert_parent_U1C__auth_currencies(p_tbl_rec_company)		
## INSERT in table company 		
	DEFINE l_sql_stmt_status integer		
	DEFINE rows_count SMALLINT		
	DEFINE p_prykey type_prykey_company #Primary key record		
	DEFINE p_tbl_rec_company type_tbl_rec_company # Table image record		
		
	WHENEVER SQLERROR CONTINUE		
	CALL pr_ins_company.Execute(	p_tbl_rec_company.cmpy_code,		
	p_tbl_rec_company.name_text,		
	p_tbl_rec_company.addr1_text,		
	p_tbl_rec_company.addr2_text,		
	p_tbl_rec_company.city_text,		
	p_tbl_rec_company.state_code,		
	p_tbl_rec_company.post_code,		
	p_tbl_rec_company.country_code,		
	p_tbl_rec_company.language_code,		
	p_tbl_rec_company.fax_text,		
	p_tbl_rec_company.tax_text,		
	p_tbl_rec_company.telex_text,		
	p_tbl_rec_company.com1_text,		
	p_tbl_rec_company.com2_text,		
	p_tbl_rec_company.tele_text,		
	p_tbl_rec_company.mobile_phone,		
	p_tbl_rec_company.email,		
	p_tbl_rec_company.curr_code,		
	p_tbl_rec_company.module_text,		
	p_tbl_rec_company.vat_code,		
	p_tbl_rec_company.vat_div_code,		
	p_tbl_rec_company.legal_creation_date	)		
	WHENEVER SQLERROR CALL error_mngmt		
		
	IF sqlca.sqlcode < 0 THEN 		
		LET l_sql_stmt_status = -1		
	ELSE 		
		LET l_sql_stmt_status = 0		
		LET p_prykey.cmpy_code = p_tbl_rec_company.cmpy_code		
				
		
	END IF		
	RETURN l_sql_stmt_status,p_prykey.*		
END FUNCTION ## sql_insert_parent_U1C__auth_currencies		
		
########################################################################		
FUNCTION sql_update_parent_U1C__auth_currencies(p_prykey,p_tbl_rec_company)		
## sql_update_parent_U1C__auth_currencies :update company record		
	DEFINE l_sql_stmt_status integer		
	DEFINE l_updated_rows_number integer		
	DEFINE p_prykey type_prykey_company #Primary key record 		
	DEFINE p_tbl_rec_company type_tbl_rec_company # Table image record		
		
	WHENEVER SQLERROR CONTINUE		
	CALL pr_upd_company.Execute(	p_tbl_rec_company.name_text,		
	p_tbl_rec_company.addr1_text,		
	p_tbl_rec_company.addr2_text,		
	p_tbl_rec_company.city_text,		
	p_tbl_rec_company.state_code,		
	p_tbl_rec_company.post_code,		
	p_tbl_rec_company.country_code,		
	p_tbl_rec_company.language_code,		
	p_tbl_rec_company.fax_text,		
	p_tbl_rec_company.tax_text,		
	p_tbl_rec_company.telex_text,		
	p_tbl_rec_company.com1_text,		
	p_tbl_rec_company.com2_text,		
	p_tbl_rec_company.tele_text,		
	p_tbl_rec_company.mobile_phone,		
	p_tbl_rec_company.email,		
	p_tbl_rec_company.curr_code,		
	p_tbl_rec_company.module_text,		
	p_tbl_rec_company.vat_code,		
	p_tbl_rec_company.vat_div_code,		
	p_tbl_rec_company.legal_creation_date	,p_prykey.*)		
		
WHENEVER SQLERROR CALL error_mngmt		
	LET l_sql_stmt_status = sqlca.sqlcode		
	LET l_updated_rows_number = sqlca.sqlerrd[3]		
	RETURN l_sql_stmt_status,l_updated_rows_number		
END FUNCTION ## sql_update_parent_U1C__auth_currencies		
		
##############################################################################################		
FUNCTION sql_delete_parent_U1C__auth_currencies(p_prykey)		
## sql_delete_parent_U1C__auth_currencies :delete current row in table company 		
	DEFINE l_sql_stmt_status smallint		
	DEFINE p_prykey type_prykey_company #Primary key record 		
	DEFINE l_deleted_rows_number integer		
	WHENEVER SQLERROR CONTINUE		
	CALL pr_del_company.Execute(p_prykey.*)		
		
WHENEVER SQLERROR CALL error_mngmt		
	LET l_sql_stmt_status = sqlca.sqlcode		
	LET l_deleted_rows_number = sqlca.sqlerrd[3]		
	RETURN l_sql_stmt_status,l_deleted_rows_number		
END FUNCTION ## sql_delete_parent_U1C__auth_currencies		
		
################################################################################		
FUNCTION sql_pky_exists_parent_U1C__auth_currencies(p_prykey)  		
##   sql_pky_exists_parent_U1C__auth_currencies : Check if primary key exists		
## inbound parameter : record of primary key		
## outbound parameter:  status > 0 if exists, 0 if no record, < 0 if error		
	DEFINE p_prykey type_prykey_company #Primary key record 		
	DEFINE pk_status INTEGER		
		
	WHENEVER SQLERROR CONTINUE		
	CALL crs_pky_company.Open(p_prykey.*)		
	CALL crs_pky_company.FetchNext() 		
	WHENEVER SQLERROR CALL error_mngmt		
		
	CASE sqlca.sqlcode		
		WHEN 0 		
			let pk_status = 1		
		WHEN 100		
			let pk_status = 0		
		WHEN sqlca.sqlerrd[2] = 104		
			let pk_status = -1 # record locked		
		WHEN sqlca.sqlcode < 0		
			let pk_status = sqlca.sqlcode		
	END CASE		
		
	RETURN pk_status		
END FUNCTION ## sql_pky_exists_parent_U1C__auth_currencies		
		
################################################################################################		
FUNCTION set_form_record_parent_company_G952(p_tbl_contents)		
## set_form_record_parent_company_G952_G952: assigns table values to form fields values		
	DEFINE l_frm_contents type_frm_rec_G952 # Form image record		
	DEFINE p_tbl_contents type_tbl_rec_company # Table image record		
		
	INITIALIZE l_frm_contents.* TO NULL		
	LET l_frm_contents.cmpy_code = p_tbl_contents.cmpy_code		
	LET l_frm_contents.name_text = p_tbl_contents.name_text		
			
	RETURN l_frm_contents.*		
END FUNCTION ## set_form_recordU1C__auth_currencies_G952		
		
################################################################################################		
FUNCTION set_table_record_parent_G952_company(sql_stmt_type,p_frm_contents)		
## set_table_record_parent_G952_company: assigns form fields value to table values		
	DEFINE sql_stmt_type CHAR(1)					# + => Insert, # => Update		
	DEFINE l_prykey type_prykey_company #Primary key record 		
	DEFINE p_frm_contents type_frm_rec_G952 # Form image record		
	DEFINE l_tbl_contents type_tbl_rec_company # Table image record		
		
	INITIALIZE l_tbl_contents.* TO NULL		
	CASE sql_stmt_type		
		WHEN "+"			# Prepare record for INSERT		
			LET l_tbl_contents.cmpy_code = p_frm_contents.cmpy_code		
			LET l_tbl_contents.name_text = p_frm_contents.name_text		
			-- LET l_tbl_contents.addr1_text = YOUR VALUE		
			-- LET l_tbl_contents.addr2_text = YOUR VALUE		
			-- LET l_tbl_contents.city_text = YOUR VALUE		
			-- LET l_tbl_contents.state_code = YOUR VALUE		
			-- LET l_tbl_contents.post_code = YOUR VALUE		
			-- LET l_tbl_contents.country_code = YOUR VALUE		
			-- LET l_tbl_contents.language_code = YOUR VALUE		
			-- LET l_tbl_contents.fax_text = YOUR VALUE		
			-- LET l_tbl_contents.tax_text = YOUR VALUE		
			-- LET l_tbl_contents.telex_text = YOUR VALUE		
			-- LET l_tbl_contents.com1_text = YOUR VALUE		
			-- LET l_tbl_contents.com2_text = YOUR VALUE		
			-- LET l_tbl_contents.tele_text = YOUR VALUE		
			-- LET l_tbl_contents.mobile_phone = YOUR VALUE		
			-- LET l_tbl_contents.email = YOUR VALUE		
			-- LET l_tbl_contents.curr_code = YOUR VALUE		
			-- LET l_tbl_contents.module_text = YOUR VALUE		
			-- LET l_tbl_contents.vat_code = YOUR VALUE		
			-- LET l_tbl_contents.vat_div_code = YOUR VALUE		
			-- LET l_tbl_contents.legal_creation_date = YOUR VALUE		
					
		WHEN "#"			# Prepare record for UPDATE		
			LET l_tbl_contents.name_text = p_frm_contents.name_text		
			-- LET l_tbl_contents.addr1_text = YOUR VALUE		
			-- LET l_tbl_contents.addr2_text = YOUR VALUE		
			-- LET l_tbl_contents.city_text = YOUR VALUE		
			-- LET l_tbl_contents.state_code = YOUR VALUE		
			-- LET l_tbl_contents.post_code = YOUR VALUE		
			-- LET l_tbl_contents.country_code = YOUR VALUE		
			-- LET l_tbl_contents.language_code = YOUR VALUE		
			-- LET l_tbl_contents.fax_text = YOUR VALUE		
			-- LET l_tbl_contents.tax_text = YOUR VALUE		
			-- LET l_tbl_contents.telex_text = YOUR VALUE		
			-- LET l_tbl_contents.com1_text = YOUR VALUE		
			-- LET l_tbl_contents.com2_text = YOUR VALUE		
			-- LET l_tbl_contents.tele_text = YOUR VALUE		
			-- LET l_tbl_contents.mobile_phone = YOUR VALUE		
			-- LET l_tbl_contents.email = YOUR VALUE		
			-- LET l_tbl_contents.curr_code = YOUR VALUE		
			-- LET l_tbl_contents.module_text = YOUR VALUE		
			-- LET l_tbl_contents.vat_code = YOUR VALUE		
			-- LET l_tbl_contents.vat_div_code = YOUR VALUE		
			-- LET l_tbl_contents.legal_creation_date = YOUR VALUE		
					
	END CASE		
		
	RETURN l_tbl_contents.*		
END FUNCTION ## set_table_recordG952_company		
		
		
		
		
		
		
