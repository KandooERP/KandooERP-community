# module generated by Kandoo Ffg(c) 		
# Generated on 2021-04-04 09:36:05		
# template H:\Eclipse\git\KandooERP\KandooERP\Resources\Utilities\Perl\Ffg/templates/module/Kandoo-child-standard.mtplt 		
GLOBALS "common/glob_GLOBALS.4gl"		
		
# Define types to be reused in functions		
DEFINE type_prykey_used_currency TYPE AS RECORD # Define Primary Key Type of Child Table		
	currency_code LIKE used_currency.currency_code, # nchar(3)		
	cmpy_code LIKE used_currency.cmpy_code # nchar(2)			
END RECORD		
		
DEFINE type_fgnkey_used_currency TYPE AS RECORD # Define Foreign Key type -> company		
	cmpy_code LIKE used_currency.cmpy_code # nchar(2)			
END RECORD		
		
DEFINE type_ArrElemChild_G952 TYPE AS RECORD # Define Screen Record Array Type		
	currency_code LIKE used_currency.currency_code, #  nchar(3)		
	desc_text LIKE currency.desc_text, #  nvarchar(30)		
	symbol_text LIKE currency.symbol_text, #  nchar(3)		
	start_date LIKE used_currency.start_date, #  date		
	end_date LIKE used_currency.end_date #  date			
END RECORD		
		
DEFINE type_act_array_used_currency TYPE AS CHAR(1)    # Define Action Array Type		
		
DEFINE type_FullRec_used_currency TYPE AS RECORD # Define full record of child table		
	cmpy_code LIKE used_currency.cmpy_code, # nchar(2)		
	currency_code LIKE used_currency.currency_code, # nchar(3)		
	start_date LIKE used_currency.start_date, # date		
	end_date LIKE used_currency.end_date # date			
END RECORD		
		
# Define module scope variables and arrays		
# Cursors		
DEFINE crs_array__fgnkey_child_used_currency CURSOR		
		
#Prepared statements		
DEFINE prp_insert_used_currency PREPARED		
DEFINE prp_update_used_currency PREPARED		
DEFINE prp_delete_used_currency PREPARED		
		
		
FUNCTION sql_prepare_queries_U1C__auth_currencies_child ()		
# this function initializes all cursors and prepared statements for the used_currency and lookups		
		
DEFINE l_query_stmt STRING 		
	# Prepare the cursor to display the used_currency array		
	# using foreign key pointing to company		
		
	LET l_query_stmt = "SELECT '=',	used_currency.currency_code,used_currency.cmpy_code	,",		
"used_currency.currency_code,",		
	"currency.desc_text,",		
	"currency.symbol_text,",		
	"used_currency.start_date,",		
	"used_currency.end_date",				
	"  FROM currency, ",		
	"company, ",		
	"used_currency ",		
	"WHERE used_currency.currency_code = currency.currency_code ",		
	"AND used_currency.cmpy_code = company.cmpy_code ",		
			
	" AND  used_currency.cmpy_code = ?	",		
	" ORDER BY 	used_currency.currency_code,used_currency.cmpy_code	"		
	CALL crs_array__fgnkey_child_used_currency.Declare(l_query_stmt)		
		
	# PREPARE INSERT statement		
	LET l_query_stmt =		
	"INSERT INTO used_currency (	cmpy_code,currency_code,start_date,end_date	)",		
	" VALUES ( 	?,?,?,?	)" 		
	CALL prp_insert_used_currency.Prepare(l_query_stmt)		
		
	# PREPARE UPDATE statement		
	let l_query_stmt =		
	"UPDATE used_currency ",		
	"SET ( 	start_date,end_date	)",		
	" = ( 	?,?	)",		
	" WHERE  currency_code = ?
    AND cmpy_code = ?	" 		
	CALL prp_update_used_currency.Prepare(l_query_stmt)		
		
	# PREPARE DELETE statement		
	let l_query_stmt = "DELETE FROM used_currency ",		
	" WHERE  currency_code = ?
    AND cmpy_code = ?	" 		
	CALL prp_delete_used_currency.Prepare(l_query_stmt)		
		
END FUNCTION # sql_prepare_queries_U1C__auth_currencies_used_currency		
		
FUNCTION sql_insert_used_currency(p_rec_used_currency)		
## INSERT in table used_currency 		
	DEFINE p_rec_used_currency type_FullRec_used_currency		
	DEFINE lsql_stmt_status INTEGER		
	DEFINE lookup_status INTEGER		
	DEFINE nb_deleted_rows INTEGER		
		
	WHENEVER SQLERROR CONTINUE		
	CALL prp_insert_used_currency.Execute(		
	p_rec_used_currency.cmpy_code,		
	p_rec_used_currency.currency_code,		
	p_rec_used_currency.start_date,		
	p_rec_used_currency.end_date	)		
	WHENEVER SQLERROR CALL error_mngmt		
		
	CASE		
		WHEN sqlca.sqlcode = 0		
			LET lsql_stmt_status = 0		
		WHEN sqlca.sqlcode < 0		
			CALL display_error("sql_insert used_currency:failed ",sqlca.sqlcode)		
			LET lsql_stmt_status = -1		
	END CASE		
	RETURN lsql_stmt_status		
END FUNCTION # sql_insert_used_currency		
		
FUNCTION sql_update_used_currency(p_prykey,p_rec_used_currency)		
## sql_update_used_currency :update current used_currency record		
	DEFINE p_prykey type_prykey_used_currency		
	DEFINE p_rec_used_currency type_FullRec_used_currency		
	DEFINE lsql_stmt_status INTEGER		
	DEFINE nb_modified_rows INTEGER		
		
	WHENEVER SQLERROR CONTINUE		
	CALL prp_update_used_currency.Execute(	p_rec_used_currency.start_date,		
	p_rec_used_currency.end_date	,		
	p_prykey.*)		
		
	WHENEVER SQLERROR CALL error_mngmt		
	CASE		
		WHEN sqlca.sqlcode = 0		
			LET lsql_stmt_status = 0		
			LET nb_modified_rows = sqlca.sqlerrd[3]		
		WHEN sqlca.sqlcode < 0		
			CALL display_error("sql_update used_currency:failed ",sqlca.sqlcode)		
			LET lsql_stmt_status = -1		
			LET nb_modified_rows = 0		
	END CASE		
	RETURN lsql_stmt_status,nb_modified_rows		
END FUNCTION # sql_update_used_currency		
		
FUNCTION sql_delete_used_currency(p_prykey)		
## delete_used_currency :delete Selected row in table used_currency 		
	DEFINE p_prykey type_prykey_used_currency		
	DEFINE lsql_stmt_status smallint		
	DEFINE nb_deleted_rows INTEGER		
		
	WHENEVER SQLERROR CONTINUE		
	CALL prp_delete_used_currency.Execute(p_prykey.*)		
	WHENEVER SQLERROR CALL error_mngmt		
	CASE		
		WHEN sqlca.sqlcode = 0		
			LET lsql_stmt_status=0		
			LET nb_deleted_rows = sqlca.sqlerrd[3]		
		WHEN sqlca.sqlcode < 0 		
			CALL display_error("sql_delete used_currency:failed ",sqlca.sqlcode)		
			LET lsql_stmt_status = -1		
	END CASE		
	RETURN lsql_stmt_status,nb_deleted_rows		
END FUNCTION # sql_delete_used_currency		
		
################################################################################		
FUNCTION sql_pky_exists_used_currency(p_prykey)  		
#"# This function Checks if primary key exists		
## inbound parameter : record of primary key		
## outbound parameter:  status > 0 if exists, 0 if no record, < 0 if error		
################################################################################		
	DEFINE p_prykey type_prykey_used_currency		
	DEFINE pk_status INTEGER		
		
	WHENEVER SQLERROR CONTINUE		
	OPEN crs_prykey__crs_ USING p_prykey.*		
	FETCH crs_prykey__crs_ 		
	WHENEVER SQLERROR CALL error_mngmt		
		
	CASE sqlca.sqlcode		
		WHEN 0 		
			LET pk_status = 1		
		WHEN 100		
			LET pk_status = 0		
		WHEN sqlca.sqlerrd[2] = 104		
			LET pk_status = -1 # record locked		
		WHEN sqlca.sqlcode < 0		
			LET pk_status = sqlca.sqlcode		
	END CASE		
	RETURN pk_status		
END FUNCTION #  sql_pky_exists_used_currency		
		
		
		
######################################################################################################################################################		
FUNCTION fill_array_fgnkey_used_currency (p_fgnkey,p_mode)		
# This function opens the array cursor , fetches the data to populate the 3 arrays		
# inbound params: foreign key,		
#                 read mode: VIEW -> default isolation, EDIT -> REPEATABLE READ		
# outbound params: the 3 arrays		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	define p_mode CHAR(5)		
	DEFINE l_scr_array_used_currency DYNAMIC ARRAY OF type_ArrElemChild_G952		
	DEFINE l_pky_array_used_currency DYNAMIC ARRAY OF type_prykey_used_currency		
	DEFINE l_act_array_used_currency DYNAMIC ARRAY OF type_act_array_used_currency		
	DEFINE elem_num INTEGER		
	DEFINE sql_ok INTEGER		
		
	# initializes arrays		
	CALL l_scr_array_used_currency.clear()		
	CALL l_pky_array_used_currency.clear()		
    CALL l_act_array_used_currency.clear()		
	IF p_mode = "EDIT" THEN		
		SET ISOLATION TO REPEATABLE READ		
		# If we plan to edit records, all records will received a RR lock to protect the data set from being modified		
	END IF		
		
	WHENEVER SQLERROR CONTINUE		
	CALL crs_array__fgnkey_child_used_currency.Open(p_fgnkey.*)		
	WHENEVER SQLERROR CALL error_mngmt		
		
	LET elem_num = 1		
	WHILE crs_array__fgnkey_child_used_currency.FetchNext (l_act_array_used_currency[elem_num],l_pky_array_used_currency[elem_num].*,l_scr_array_used_currency[elem_num].*) = 0		
		LET elem_num = elem_num + 1		
	END WHILE		
		
	CASE		
		WHEN sqlca.sqlcode = 100 # we have passed the last element, this element must be deleted		
			# elem_num is 1 beyond real number of element, must delete last element		
			CALL l_scr_array_used_currency.deleteElement(elem_num)		
			CALL l_pky_array_used_currency.deleteElement(elem_num)		
			CALL l_act_array_used_currency.deleteElement(elem_num)		
			LET elem_num = elem_num - 1		
		WHEN sqlca.sqlcode < 0		
			LET elem_num = 0		
	END CASE		
	RETURN sqlca.sqlcode,elem_num,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency		
END FUNCTION # fill_array_fgnkey_used_currency 		
		
######################################################################################################################################################		
FUNCTION frm_display_array_used_currency (p_fgnkey,p_browse)		
# This function displays the array data (scr_array_used_currency) based on the foreign key 		
# browse: False means that the array is displayed without possibility of browsing inside (just show array and skip to next parent row)		
######################################################################################################################################################		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE p_browse BOOLEAN		
	DEFINE l_scr_array_used_currency DYNAMIC ARRAY OF type_ArrElemChild_G952		
	DEFINE l_pky_array_used_currency DYNAMIC ARRAY OF type_prykey_used_currency		
	DEFINE l_act_array_used_currency DYNAMIC ARRAY OF type_act_array_used_currency		
	DEFINE elem_num,choice INTEGER		
	DEFINE arrcurr,srcline INTEGER		
	DEFINE sql_ok INTEGER		
	DEFINE qbe_statement STRING		
	DEFINE browse BOOLEAN		
	DEFINE sql_stmt_status INTEGER		
		
	CALL fill_array_fgnkey_used_currency (p_fgnkey,"VIEW") 		
	RETURNING sql_ok,elem_num,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency		
		
	DISPLAY ARRAY l_scr_array_used_currency		
	TO sr_currency.*		
		BEFORE DISPLAY		
			IF browse = FALSE THEN		
				# just display in the array without entering it		
				EXIT DISPLAY		
			END IF		
	END DISPLAY		
		
	RETURN elem_num		
END FUNCTION # frm_display_array_used_currency		
		
###########################################################################################################		
FUNCTION edit_array_sr_currency (p_fgnkey)		
# This function calls the INPUT array function (frm_input_array_sr_currency) to edit the array data		
# then, accordingly, the SQL statement functions (array_bulk_update_)		
# it is generally called from another module		
###########################################################################################################		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE l_scr_array_used_currency DYNAMIC ARRAY OF type_ArrElemChild_G952		
	DEFINE l_pky_array_used_currency DYNAMIC ARRAY OF type_prykey_used_currency		
	DEFINE l_act_array_used_currency DYNAMIC ARRAY OF type_act_array_used_currency		
	DEFINE srcline INTEGER		
	DEFINE arrcurr INTEGER		
	DEFINE bulk_update_status SMALLINT		
	DEFINE nbr_edited_rows INTEGER		
	DEFINE sql_action SMALLINT		
	DEFINE i smallint		
		
	BEGIN WORK		
	WHILE TRUE		
		CALL frm_input_array_sr_currency (p_fgnkey.*) 		
		RETURNING nbr_edited_rows,sql_action,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency		
		IF nbr_edited_rows > 0 THEN		
			CASE 		
				WHEN sql_action = 2		
					CALL array_bulk_update_used_currency (p_fgnkey,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency) 		
					RETURNING bulk_update_status		
					IF bulk_update_status > 0 THEN		
							ROLLBACK WORK		
						ERROR "frm_input_array_ failed"		
					ELSE		
						ERROR "frm_input_array_ Successful operation"		
						COMMIT WORK		
						EXIT WHILE		
					END IF		
				WHEN sql_action = 1		
					# No		
					ERROR "Please INPUT ARRAY AGAIN"		
				WHEN sql_action = 0		
					# Cancel		
					MESSAGE "Cancelled, exit INPUT ARRAY"		
					EXIT WHILE		
			END CASE		
		ELSE		
			# Nothing		
			MESSAGE "Nothing has been changed"		
			EXIT WHILE		
		END IF		
	END WHILE		
		
END FUNCTION # edit_array_sr_currency		
		
####################################################################################################################		
FUNCTION frm_input_array_sr_currency (p_fgnkey)		
## this function operates INPUT ARRAY for the table used_currency		
# it handles 2 arrays:		
# 1) the Input Data Array (scr_array_used_currency) will contain the data input by the user		
# 2) the primary key array (prykey__company) contains the status for each element: 		
#    NULL=>no data, 0=>elements not touched, 1=>element to INSERT, 2=>element to UPDATE, -1=>element to DELETE		
#    and also contains the primary key values of each element		
###################################################################################################################		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE l_scr_array_used_currency DYNAMIC ARRAY OF type_ArrElemChild_G952		
	DEFINE l_pky_array_used_currency DYNAMIC ARRAY OF type_prykey_used_currency		
	DEFINE l_act_array_used_currency DYNAMIC ARRAY OF type_act_array_used_currency		
	DEFINE elem_num INTEGER		
	DEFINE arrcnt INTEGER		
	DEFINE srcline INTEGER		
	DEFINE arrcurr INTEGER		
	DEFINE last_element INTEGER		
	DEFINE lookup_status INTEGER		
	DEFINE sql_stmt_status INTEGER		
	DEFINE nbr_edited_rows INTEGER		
	DEFINE sql_action smallint		
	DEFINE ins_key smallint		
	DEFINE sav_scr_array_used_currency type_ArrElemChild_G952 # used to save the current element		
	DEFINE sql_ok SMALLINT		
		
	LET nbr_edited_rows = 0		
	LET int_flag = FALSE		
	LET ins_key = FALSE		
		
	CALL fill_array_fgnkey_used_currency (p_fgnkey,"EDIT") 		
	RETURNING sql_ok,elem_num,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency		
		
	INPUT ARRAY l_scr_array_used_currency WITHOUT DEFAULTS		
	FROM sr_currency.*		
		
		ON ACTION "CANCEL"		
			# Cancel from input		
			LET int_flag=false		
			LET arrcurr = arr_curr()		
			LET srcline = scr_line ()		
			LET l_scr_array_used_currency[arrcurr].* = sav_scr_array_used_currency.*		
			DISPLAY l_scr_array_used_currency[arrcurr].* TO sr_currency[srcline].*		
			MESSAGE "Quit with quit key Control-C"		
			ROLLBACK WORK		
			EXIT INPUT		
		
		BEFORE DELETE		
			# save the element		
			LET sav_scr_array_used_currency.* = l_scr_array_used_currency[arrcurr].*		
		
		BEFORE INSERT		
			# insert a row in l_pky_array_used_currency and l_act_array_used_currency		
			LET arrcurr = arr_curr()		
			LET srcline = scr_line ()		
			CALL l_pky_array_used_currency.insert(arrcurr)		
			CALL l_act_array_used_currency.insert(arrcurr)		
			INITIALIZE l_pky_array_used_currency[arrcurr].* TO NULL		
			LET l_act_array_used_currency[arrcurr] = "+" 		
		
		BEFORE ROW		
			LET srcline = scr_line()		
			LET arrcurr = arr_curr()		
			LET sav_scr_array_used_currency.* = l_scr_array_used_currency[arrcurr].*		# save the current row		
		
			AFTER FIELD currency_code		
				IF l_scr_array_used_currency[arrcurr].currency_code IS NULL THEN		
					NEXT FIELD currency_code		
				END IF		
				IF sql_pky_exists_used_currency(l_scr_array_used_currency[arrcurr].currency_code,p_fgnkey.cmpy_code) THEN		
					ERROR "used_currency: already exists"		
					NEXT FIELD currency_code		
				END IF		
				LET l_pky_array_used_currency[arrcurr].currency_code =  l_scr_array_used_currency[arrcurr].currency_code		
				
		
				
		
		AFTER ROW		
			IF field_touched (sr_currency[srcline].*) THEN		
				LET nbr_edited_rows = nbr_edited_rows + 1		
				IF l_act_array_used_currency[arrcurr] = "=" THEN # existing row that has been modified		
					LET l_act_array_used_currency[arrcurr] = "#"	# to be modified		
					LET l_pky_array_used_currency[arrcurr].cmpy_code = p_fgnkey.cmpy_code 		
							
				END IF		
			END IF		
		
		AFTER INSERT		
			IF field_touched (sr_currency[srcline].*) THEN		
				LET l_act_array_used_currency[arrcurr] = "+"	# to be inserted		
				LET l_pky_array_used_currency[arrcurr].cmpy_code = p_fgnkey.cmpy_code 		
						
			END IF		
		
		AFTER DELETE 		
			IF l_act_array_used_currency[arrcurr] IS NOT NULL THEN		
				#  General idea: the l_act_array_used_currency current element is deleted by the DELETE action,		
				# then the l_pky_array_used_currency and l_act_array_used_currency current elements are moved 		
				# to the bottom of the array so that the element can be deleted without impacting the order of other elements		
				# 1) proceed for l_pky_array_used_currency		
				CALL l_pky_array_used_currency.AppendElement()   			# append one element at the end that will contain deleted element data		
				LET last_element = l_pky_array_used_currency.getsize()		# check the new array size		
				LET l_pky_array_used_currency[last_element].* = l_pky_array_used_currency[arrcurr].*		
				CALL l_pky_array_used_currency.DeleteElement(arrcurr)	# finally delete the current element		
				# 2) then same action for action array		
				CALL l_act_array_used_currency.AppendElement()		
				LET l_act_array_used_currency[last_element] = "-" 			  # to be Deleted		
				CALL l_act_array_used_currency.DeleteElement(arrcurr)		
				LET nbr_edited_rows = nbr_edited_rows + 1		
			END IF		
		
		
		AFTER INPUT		
			IF int_flag THEN		
				LET int_flag = FALSE		
				ERROR " Cancel used_currency"		
				LET nbr_edited_rows = 0		
				LET sql_action = 0		
			ELSE		
				LET sql_action = confirm_operation(5,10,"frm_input_array_ ") 		
				IF sql_action = 1 THEN		
					CONTINUE INPUT		
				END IF		
			END IF		
	END INPUT		
	RETURN nbr_edited_rows,sql_action,l_act_array_used_currency,l_pky_array_used_currency,l_scr_array_used_currency		
END FUNCTION # frm_input_array_sr_currency		
		
######################################################################################################		
FUNCTION set_table_record_sr_currency_used_currency(p_sql_stmt_type,p_fgnkey,p_prykey,p_element_contents)		
# This function assigns the values from the array element(p_element_contents) to the table record (l_table_contents)		
# It distinguishes the primary key (p_prykey) of the table used_currencyand the foreign key (p_fgnkey) point to the parent table (company)		
######################################################################################################		
	DEFINE p_sql_stmt_type CHAR(1)			-- "+" => INSERT "#" => UPDATE		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE p_prykey type_prykey_used_currency		
	DEFINE p_element_contents type_ArrElemChild_G952 # One element of the Screen Record Array		
	DEFINE fgl_status SMALLINT		
	DEFINE l_table_contents type_FullRec_used_currency		
		
	#WHENEVER SQLERROR CONTINUE		
	INITIALIZE l_table_contents.* TO NULL		
	CASE p_sql_stmt_type		
	WHEN "+"		-- set table record to insert row		
		LET l_table_contents.cmpy_code = p_fgnkey.cmpy_code		
		LET l_table_contents.currency_code = p_element_contents.currency_code		
		LET l_table_contents.start_date = p_element_contents.start_date		
		LET l_table_contents.end_date = p_element_contents.end_date		
				
		
	WHEN "#"		-- set table record to update row		
		LET l_table_contents.start_date = p_element_contents.start_date		
		LET l_table_contents.end_date = p_element_contents.end_date		
				
	END CASE		
		
	WHENEVER ERROR CALL error_mngmt		
	CASE		
        WHEN status = 0		
            LET fgl_status = 1		
        WHEN status < 0		
            LET fgl_status = status		
    	OTHERWISE		
	    	LET fgl_status = status		
	END CASE		
	RETURN fgl_status,l_table_contents.*		
END FUNCTION # set_table_record_sr_currency_used_currency		
		
#############################################################################################################		
FUNCTION array_bulk_update_used_currency (p_fgnkey,p_act_array_used_currency,p_pky_array_used_currency,p_scr_array_used_currency)		
## This functions browses the action array p_act_array_used_currency},		
# copies the element values to table values (used_currency)		
# and executes the request SQL operation requested for each element		
#############################################################################################################		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE p_scr_array_used_currency DYNAMIC ARRAY OF type_ArrElemChild_G952		
	DEFINE p_pky_array_used_currency DYNAMIC ARRAY OF type_prykey_used_currency		
	DEFINE p_act_array_used_currency DYNAMIC ARRAY OF type_act_array_used_currency		
	DEFINE idx,arr_size INTEGER		
	DEFINE updarr_status,fgl_status,global_status INTEGER		
	DEFINE parent_fky type_fgnkey_used_currency # foreign key pointing to parent table		
	DEFINE elements_contents type_ArrElemChild_G952 # One element of the Screen Record Array		
	DEFINE l_used_currency type_FullRec_used_currency		
		
	LET global_status = 0		
	LET arr_size = p_pky_array_used_currency.getsize()		
	FOR idx = 1 TO arr_size		
		CASE		
            WHEN p_act_array_used_currency[idx] = "="		
                CONTINUE FOR		
            WHEN p_act_array_used_currency[idx] MATCHES "[+#]"		# Insert,delete or update		
                CALL set_table_record_sr_currency_used_currency (p_act_array_used_currency[idx],p_fgnkey.*,p_pky_array_used_currency[idx].*,p_scr_array_used_currency[idx].*)		
                RETURNING fgl_status,l_used_currency.*		
		END CASE		
		CALL sql_update_one_element_used_currency(p_fgnkey.*,p_act_array_used_currency[idx],p_pky_array_used_currency[idx].*,l_used_currency.*) 		
		RETURNING updarr_status 		
		IF updarr_status < 0 THEN		
			ERROR "Error on element # ",idx		
			LET global_status = global_status + 1		
		END IF		
	END FOR		
	RETURN global_status		
END FUNCTION 		
		
###############################################################################		
FUNCTION sql_update_one_element_used_currency (p_fgnkey,p_Action,p_prykey,p_rec_used_currency)		
## This function executes the SQL statement for each element		
## accord the to status array value of this element		
###############################################################################		
	DEFINE p_fgnkey type_fgnkey_used_currency		
	DEFINE p_prykey type_prykey_used_currency		
	DEFINE p_Action CHAR(1)		
	DEFINE p_rec_used_currency type_FullRec_used_currency		
	DEFINE st SMALLINT		
	DEFINE arrcnt SMALLINT		
	DEFINE idx SMALLINT 		
	DEFINE statut SMALLINT		
		
	LET st = 0		
		CASE p_Action		
			WHEN "#"	# must be updated		
				CALL sql_update_used_currency(p_prykey.*,p_rec_used_currency.*) RETURNING statut		
		WHEN "+"	# must be inserted		
				CALL sql_insert_used_currency(p_rec_used_currency.*) RETURNING statut		
		WHEN "-"	# must be deleted		
				CALL sql_delete_used_currency(p_prykey.*) RETURNING statut		
		END CASE		
	return statut		
END FUNCTION		
		
		
