
# module  generated by Querix Ffg(c) 		                                                                                    	#@G00001
# Generated on 2019-04-06 16:34:21		                                                                                       	#@G00002
# Main template I:\Users\BeGooden-IT\git\KandooERP\KandooERP\Resources\Utilities\Perl\Ffg/templates/module/standalone-form-newstructur.mtplt 			#@G00003
############################################################
# GLOBAL Scope Variables
############################################################
GLOBALS "../common/glob_GLOBALS.4gl" 
GLOBALS "../ar/A_AR_GLOBALS.4gl" 
GLOBALS "../ar/AZ_GROUP_GLOBALS.4gl" 
GLOBALS "../ar/AZ5_GLOBALS.4gl" 
#@G00005
DEFINE m_program CHAR(30) #@g00007 

#@G00009
DEFINE modu_rec_stateinfo RECORD LIKE stateinfo.* #@g00010 

MAIN #@g00012 
	DEFER interrupt #@g00013 

	CALL setModuleId("AZ5") 
	CALL ui_init(0) #initial ui init 

	DEFER quit 
	DEFER interrupt 

	CALL authenticate(getmoduleid()) #authenticate 
	CALL init_a_ar() #init a/ar module 

	#@G00014
	# WHENEVER ERROR CALL error_mngmt		                                                                                       	#@G00015
	# CALL ui_init(0) 		                                                                                                      	#@G00016
	LET m_program="p_A163_stateinfo" #@g00017 
	LET modu_rec_stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code  --"MA"  #Eric, you can not use a static company code 
	CALL main_a163_stateinfo() #@g00019 

END MAIN #@g00021 


############################################################
# FUNCTION mc_a163_sccs() #@g00024 
#
#
############################################################	                                               	#@G00023
FUNCTION mc_a163_sccs() #@g00024 
	## definition variable sccs		                                                                                              	#@G00025
	DEFINE l_sccs_var CHAR(70) #@g00026 
	LET l_sccs_var="%W% %D%" #@g00027 
END FUNCTION #@g00028 


############################################################
# FUNCTION main_a163_stateinfo () #@g00030 
#
#
############################################################
FUNCTION main_a163_stateinfo () #@g00030 
	## this module's main function called by MAIN		                                                                            	#@G00031

                                                                               	#@G00032

	OPEN WINDOW A163 with FORM "A163" #@g00034 
	CALL windecoration_a("A163") -- albo kd-752 #@g00034 

	CALL sql_prepare_queries_a163_stateinfo () # INITIALIZE all cursors ON master TABLE #@g00036 

	CALL menu_a163_stateinfo() #@g00038 

	CLOSE WINDOW A163 #@g00040 

END FUNCTION #@g00042 

############################################################
# FUNCTION menu_a163_stateinfo () #@g00045
#
#
############################################################
FUNCTION menu_a163_stateinfo () #@g00045 
	## menu_A163_stateinfo		                                                                                                   	#@G00046
	## the top level menu 		                                                                                                   	#@G00047
	## input arguments: none		                                                                                                 	#@G00048
	## output arguments: none		                                                                                                	#@G00049
	DEFINE l_nbsel_stateinfo INTEGER #@g00050 
	DEFINE l_sql_stmt_status INTEGER #@g00051 
	DEFINE l_record_num INTEGER #@g00052 
	DEFINE l_user_choice BOOLEAN #@g00053 
	DEFINE l_xnumber SMALLINT #@g00054 
	DEFINE l_arr_elem_num SMALLINT #@g00055 
	DEFINE l_rec_pky_stateinfo RECORD #@g00056 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00056 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00057 
	END RECORD #@g00058 
	DEFINE l_rec_frm_a163 RECORD #@g00059 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00059 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00059 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00059 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00059 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00059 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00059 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00059 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00059 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00059 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00059 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00059 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00059 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00060 
	END RECORD #@g00061 

	DEFINE l_rec_tbl_a163 RECORD #@g00063 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00063 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00063 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00063 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00063 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00063 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00063 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00063 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00063 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00063 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00063 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00063 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00063 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00063 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00064 
	END RECORD #@g00065 

	DEFINE l_record_found INTEGER #@g00067 
	DEFINE l_lookup_status INTEGER #@g00068 

	LET l_nbsel_stateinfo = 0 #@g00070 
	MENU "stateinfo" #@g00071 
		BEFORE MENU #@g00072 
			HIDE option "Next","Previous" #@g00073 
		COMMAND "Query" "Query data with multiple criteria stateinfo" #@g00074 
			#@G00074
			MESSAGE "" #@g00075 
			INITIALIZE l_rec_frm_a163.* TO NULL #@g00076 
			CLEAR FORM #@g00077 
			DISPLAY BY NAME l_rec_frm_a163.* #@g00078 
			HIDE option "Next","Previous" #@g00079 

			CALL frm_query_a163_a163() RETURNING l_nbsel_stateinfo #@g00081 
			IF l_nbsel_stateinfo <>0 THEN #@g00082 
				CALL sql_nxtprev_stateinfo(1) RETURNING l_record_found, #@g00083 
				l_rec_pky_stateinfo.* #@g00084 

				IF l_record_found = 1 THEN #@g00086 
					LET l_record_num = 1 #@g00087 
					CALL sql_fetch_full_row_stateinfo (l_rec_pky_stateinfo.*) #@g00088 
					RETURNING l_record_found,l_rec_frm_a163.* #@g00089 
					DISPLAY BY NAME l_rec_frm_a163.* #@g00090 

					#@G00091
				END IF #@g00092 
				IF l_nbsel_stateinfo > 1 THEN #@g00093 
					SHOW option "Next" #@g00094 
					NEXT option "Next" #@g00095 
				END IF #@g00096 
			ELSE #@g00097 
				ERROR "No row matches the criteria" #@g00098 
				NEXT option "Query" #@g00099 
			END IF #@g00100 

		COMMAND "Next" "Display Next record stateinfo" #@g00102 
			#@G00102
			MESSAGE "" #@g00103 
			CLEAR FORM #@g00104 
			INITIALIZE l_rec_frm_a163.* TO NULL #@g00105 

			IF l_record_num <= l_nbsel_stateinfo THEN #@g00107 
				CALL sql_nxtprev_stateinfo(1) RETURNING l_record_found, #@g00108 
				l_rec_pky_stateinfo.* #@g00109 

				CASE #@g00111 
					WHEN l_record_found = 0 #@g00112 
						ERROR "FETCH Last record of this selection stateinfo" #@g00113 
					WHEN l_record_found = -1 #@g00114 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00115 
					WHEN l_record_found = 1 #@g00116 
						LET l_record_num = l_record_num + 1 #@g00117 
						CALL sql_fetch_full_row_stateinfo (l_rec_pky_stateinfo.*) #@g00118 
						RETURNING l_record_found,l_rec_frm_a163.* #@g00119 

						CALL frm_display_a163_a163(l_rec_frm_a163.*) #@g00121 

						IF l_record_num >= l_nbsel_stateinfo THEN #@g00123 
							HIDE option "Next" #@g00124 
						END IF #@g00125 
						IF l_record_num > 1 THEN #@g00126 
							SHOW option "Previous" #@g00127 
						ELSE #@g00128 
							HIDE option "Previous" #@g00129 
						END IF #@g00130 
				END CASE #@g00131 
			ELSE #@g00132 
				ERROR " Please SET query criteria previously stateinfo " #@g00133 
				NEXT option "Query" #@g00134 
			END IF #@g00135 

		COMMAND "Previous" "Display Previous Record stateinfo" #@g00137 
			#@G00137

			MESSAGE "" #@g00139 
			CLEAR FORM #@g00140 
			INITIALIZE l_rec_frm_a163.* TO NULL #@g00141 

			IF l_record_num >= 1 THEN #@g00143 
				CALL sql_nxtprev_stateinfo(-1) RETURNING l_record_found, #@g00144 
				l_rec_pky_stateinfo.* #@g00145 
				CASE #@g00146 
					WHEN l_record_found = 0 #@g00147 
						ERROR "FETCH First record of this selection stateinfo" #@g00148 
					WHEN l_record_found < -1 #@g00149 
						ERROR "This row IS unreachable ",sqlca.sqlcode #@g00150 
					WHEN l_record_found = 1 #@g00151 
						LET l_record_num = l_record_num - 1 #@g00152 
						CALL sql_fetch_full_row_stateinfo (l_rec_pky_stateinfo.*) #@g00153 
						RETURNING l_record_found,l_rec_frm_a163.* #@g00154 

						CALL frm_display_a163_a163(l_rec_frm_a163.*) #@g00156 

						IF l_record_num = 1 THEN #@g00158 
							HIDE option "Previous" #@g00159 
						END IF #@g00160 
						IF l_record_num < l_nbsel_stateinfo THEN #@g00161 
							SHOW option "Next" #@g00162 
						ELSE #@g00163 
							HIDE option "Next" #@g00164 
						END IF #@g00165 
				END CASE #@g00166 
			ELSE #@g00167 
				ERROR " Please SET query criteria previously stateinfo " #@g00168 
				NEXT option "Query" #@g00169 
			END IF #@g00170 

		COMMAND "ADD" "Insert a new record stateinfo" #@g00172 
			#@G00172
			MESSAGE "" #@g00173 
			CALL frm_insert_a163_a163() RETURNING l_sql_stmt_status,l_rec_pky_stateinfo.* #@g00174 
			MESSAGE "" #@g00175 

		COMMAND "EDIT" "Edit current record stateinfo" #@g00177 
			#@G00177
			MESSAGE "" #@g00178 
			IF l_nbsel_stateinfo THEN #@g00179 
				IF sql_status_pk_stateinfo(l_rec_pky_stateinfo.*) < 0 THEN #@g00180 
					ERROR "IS locked " #@g00181 
					NEXT option "Next" #@g00182 
				ELSE #@g00183 
					CALL frm_edit_a163_a163(l_rec_pky_stateinfo.*,l_rec_frm_a163.*) #@g00184 
					RETURNING l_sql_stmt_status #@g00185 
				END IF #@g00186 
			ELSE #@g00187 
				ERROR " Please SET query criteria previously stateinfo " #@g00188 
				NEXT option "Query" #@g00189 
			END IF #@g00190 

		COMMAND "DELETE" "Suppress current record stateinfo" #@g00192 
			#@G00192
			MESSAGE "" #@g00193 
			IF l_nbsel_stateinfo THEN #@g00194 
				IF sql_status_pk_stateinfo(l_rec_pky_stateinfo.*) < 0 THEN #@g00195 
					ERROR "IS locked " #@g00196 
					NEXT option "Next" #@g00197 
				END IF #@g00198 
				WHILE true #@g00199 
					#CALL confirm_operation(5,10,"Remove") RETURNING l_user_choice		                                                               	#@G00200
					LET l_user_choice = promptTF("Delete","Do you really want TO delete this item?",TRUE) 
					CASE #@g00201 
						WHEN l_user_choice = false #@g00202 
							EXIT WHILE # degage abandon #@g00203 
						WHEN l_user_choice = true #@g00204 
							CALL frm_delete_a163_a163(l_rec_pky_stateinfo.*) #@g00205 
							RETURNING l_sql_stmt_status #@g00206 
							EXIT WHILE #@g00207 
					END CASE #@g00208 
				END WHILE #@g00209 
			ELSE #@g00210 
				ERROR "Please SET query criteria previously stateinfo " #@g00211 
				NEXT option "Query" #@g00212 
			END IF #@g00213 

		COMMAND "Exit" "EXIT PROGRAM" #@g00215 
			#@G00215
			MESSAGE "" #@g00216 
			EXIT MENU #@g00217 
	END MENU #@g00218 
END FUNCTION #@g00219 


############################################################
# FUNCTION frm_query_a163_a163() #@g00222 
#
#
############################################################
FUNCTION frm_query_a163_a163() #@g00222 
	## frm_Query_A163_A163 : Query By Example on table stateinfo		                                                             	#@G00223
	## Input selection criteria,		                                                                                             	#@G00224
	## PREPARE the query,		                                                                                                    	#@G00225
	## OPEN the data SET		                                                                                                     	#@G00226
	DEFINE l_str_rec_stateinfo STRING #@g00227
	DEFINE l_where_clause STRING #@g00227
	DEFINE l_xnumber,l_sql_stmt_status INTEGER #@g00228 
	DEFINE l_pky RECORD #@g00229 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00229 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00230 
	END RECORD #@g00231 
	DEFINE l_rec_frm_a163 RECORD #@g00232 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00232 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00232 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00232 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00232 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00232 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00232 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00232 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00232 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00232 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00232 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00232 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00232 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00233 
	END RECORD #@g00234 

	DEFINE reply CHAR(5) #@g00236 
	LET l_xnumber = 0 #@g00237 
	MESSAGE "Please input query criteria" #@g00238 
	# INITIALIZE record AND display blank		                                                                                   	#@G00239
	CLEAR FORM #@g00240 
	INITIALIZE l_rec_frm_a163.* TO NULL #@g00241 
	DISPLAY BY NAME l_rec_frm_a163.* #@g00242 


	CONSTRUCT BY NAME l_where_clause ON stateinfo.dun_code, #@g00245 
	stateinfo.all1_text, #@g00246 
	stateinfo.all2_text, #@g00247 
	stateinfo.cur1_text, #@g00248 
	stateinfo.cur2_text, #@g00249 
	stateinfo.over1_1_text, #@g00250 
	stateinfo.over1_2_text, #@g00251 
	stateinfo.over30_1_text, #@g00252 
	stateinfo.over30_2_text, #@g00253 
	stateinfo.over60_1_text, #@g00254 
	stateinfo.over60_2_text, #@g00255 
	stateinfo.over90_1_text, #@g00256 
	stateinfo.over90_2_text #@g00257 

	#@G00258

	## Check whether criteria have been entered		                                                                             	#@G00260
		AFTER CONSTRUCT #@g00261 
			IF NOT field_touched(stateinfo.*) AND NOT int_flag THEN #@g00262 
				LET reply = fgl_winbutton("","Select all rows, are you sure?","Yes","Yes|No","question",0) #@g00263 
				CASE #@g00264 
					WHEN reply matches "Yes" #@g00265 
						EXIT CONSTRUCT #@g00266 
					OTHERWISE # saisie d'un critere de selection #@g00267 
						ERROR "Please input a least one criteria" #@g00268 
						CONTINUE CONSTRUCT #@g00269 
				END CASE #@g00270 
			END IF #@g00271 
	END CONSTRUCT #@g00272 

	IF int_flag = true THEN #@g00274 
		MESSAGE "Quit with quit key" #@g00275 
		LET int_flag=0 #@g00276 
	ELSE #@g00277 
		LET l_xnumber = sql_get_qbe_count_stateinfo(l_where_clause) #@g00278 
		IF l_xnumber > 0 THEN #@g00279 
			LET l_sql_stmt_status = sql_opn_pky_scr_cursstateinfo(l_where_clause) #@g00280 
		ELSE #@g00281 
			RETURN -1 #@g00282 
		END IF #@g00283 

	END IF #@g00285 
	RETURN l_xnumber #@g00286 
END FUNCTION ## query_stateinfo #@g00287 


############################################################
# FUNCTION frm_display_a163_a163(p_frm_a163) #@g00292 
#
#
############################################################
# frm_Display_A163_A163 : displays the form record AFTER reading AND displays lookup records if any		                      	#@G00290
# inbound: Form record.*		                                                                                                 	#@G00291
FUNCTION frm_display_a163_a163(p_frm_a163) #@g00292 
	DEFINE p_frm_a163 RECORD #@g00293 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00293 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00293 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00293 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00293 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00293 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00293 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00293 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00293 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00293 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00293 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00293 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00293 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00294 
	END RECORD #@g00295 

	#@G00296
	CLEAR FORM #@g00297 
	DISPLAY BY NAME p_frm_a163.* #@g00298 

	#@G00299

END FUNCTION # frm_display_a163_a163 #@g00301 



############################################################
# FUNCTION frm_insert_a163_a163() #@g00306 
#
#
############################################################
## frm_Insert_A163_A163: add a new stateinfo row		                                                                            	#@G00305
FUNCTION frm_insert_a163_a163() #@g00306 
	DEFINE l_sql_stmt_status SMALLINT #@g00307 
	DEFINE l_rows_count SMALLINT #@g00308 
	DEFINE nbre_stateinfo ,l_user_choice SMALLINT #@g00309 
	DEFINE l_rec_frm_a163 RECORD #@g00310 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00310 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00310 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00310 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00310 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00310 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00310 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00310 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00310 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00310 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00310 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00310 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00310 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00311 
	END RECORD #@g00312 

	DEFINE l_rec_tbl_a163 RECORD #@g00314 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00314 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00314 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00314 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00314 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00314 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00314 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00314 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00314 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00314 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00314 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00314 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00314 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00314 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00315 
	END RECORD #@g00316 

	#@G00317

	CLEAR FORM #@g00319 
	INITIALIZE l_rec_frm_a163.* TO NULL #@g00320 

	WHILE true #@g00322 
		LET int_flag = false #@g00323 
		INPUT BY NAME l_rec_frm_a163.dun_code, #@g00324 
		l_rec_frm_a163.all1_text, #@g00325 
		l_rec_frm_a163.all2_text, #@g00326 
		l_rec_frm_a163.cur1_text, #@g00327 
		l_rec_frm_a163.cur2_text, #@g00328 
		l_rec_frm_a163.over1_1_text, #@g00329 
		l_rec_frm_a163.over1_2_text, #@g00330 
		l_rec_frm_a163.over30_1_text, #@g00331 
		l_rec_frm_a163.over30_2_text, #@g00332 
		l_rec_frm_a163.over60_1_text, #@g00333 
		l_rec_frm_a163.over60_2_text, #@g00334 
		l_rec_frm_a163.over90_1_text, #@g00335 
		l_rec_frm_a163.over90_2_text #@g00336 
		WITHOUT DEFAULTS #@g00337 
		#@G00338
		#@G00338

		#@G00339
		#@G00339
		END INPUT #@g00340 
		IF int_flag = true THEN #@g00341 
			# Resign FROM input		                                                                                                   	#@G00342
			LET int_flag=false #@g00343 
			DISPLAY BY NAME l_rec_frm_a163.* #@g00344 
			MESSAGE "Quit with quit key Control-C" #@g00345 
			EXIT WHILE #@g00346 
		END IF #@g00347 

		#CALL confirm_operation(3,10,MODE_CLASSIC_ADD) RETURNING l_user_choice		                                                                    	#@G00349
		LET l_user_choice = prompt_YNC_int(MODE_CLASSIC_ADD,"Add new item?",3) 
		CASE l_user_choice #@g00350 
			WHEN 0 # i want TO edit the input, remains displayed 'as is' #@g00351 
				CONTINUE WHILE # ON laisse tout affiche comme tel #@g00352 

			WHEN 1 # ON valide la transaction #@g00354 
				BEGIN WORK #@g00355 
					#@G00355
					CALL set_table_record_a163_stateinfo(1,l_rec_frm_a163.*) #@g00356 
					RETURNING l_rec_tbl_a163.* #@g00357 
					CALL sql_insert_stateinfo(l_rec_tbl_a163.*) #@g00358 
					RETURNING l_sql_stmt_status, l_rec_tbl_a163.cmpy_code,l_rec_tbl_a163.dun_code #@g00359 

					CASE #@g00361 
						WHEN l_sql_stmt_status = 0 #@g00362 
							MESSAGE "Insert stateinfo Successful operation" #@g00363 
						COMMIT WORK #@g00364 
						#@G00364
						WHEN l_sql_stmt_status < 0 #@g00365 
							CALL msgError("stateinfo","Insert stateinfo:failed ") #@g00366 
							ROLLBACK WORK #@g00367 
					END CASE #@g00367 
					#@G00368
					EXIT WHILE #@g00369 

			WHEN NULL #@g00371 
				ROLLBACK WORK #@g00372 
				#@G00372
				EXIT WHILE #@g00373 
		END CASE #@g00374 
	END WHILE #@g00375 
	# l_rec_tbl_a163		                                                                                                              	#@G00376
	RETURN l_sql_stmt_status, l_rec_tbl_a163.cmpy_code,l_rec_tbl_a163.dun_code #@g00377 
END FUNCTION ## frm_insert_a163_a163 #@g00378 


############################################################
# FUNCTION frm_edit_a163_a163(p_rec_pky,p_rec_frm_a163) #@g00384 
#
#
############################################################
#######################################################################		                                                  	#@G00381
# frm_Edit_A163_A163 : Edit a stateinfo RECORD		                                                                         	#@G00382
# inbound: table primary key		                                                                                             	#@G00383
FUNCTION frm_edit_a163_a163(p_rec_pky,p_rec_frm_a163) #@g00384 
	DEFINE l_user_choice SMALLINT #@g00385 
	DEFINE l_sql_stmt_status,dummy SMALLINT #@g00386 

	DEFINE l_rec_tbl_a163 RECORD #@g00388 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00388 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00388 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00388 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00388 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00388 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00388 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00388 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00388 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00388 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00388 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00388 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00388 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00388 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00389 
	END RECORD #@g00390 

	DEFINE p_rec_frm_a163 RECORD #@g00392 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00392 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00392 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00392 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00392 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00392 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00392 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00392 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00392 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00392 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00392 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00392 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00392 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00393 
	END RECORD #@g00394 

	DEFINE sav_a163 RECORD #@g00396 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00396 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00396 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00396 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00396 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00396 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00396 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00396 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00396 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00396 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00396 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00396 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00396 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00397 
	END RECORD #@g00398 
	#@G00398
	DEFINE l_rows_count SMALLINT #@g00399 
	DEFINE p_rec_pky RECORD #@g00400 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00400 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00401 
	END RECORD #@g00402 

	## check if record can be accessed		                                                                                      	#@G00404
	WHILE true #@g00405 
		LET int_flag = false #@g00406 
		# Save Screen Record VALUES before altering		                                                                            	#@G00407
		LET sav_a163.* = p_rec_frm_a163.* #@g00408 
		BEGIN WORK #@g00409 
			EXECUTE immediate "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS" #@g00410 
			WHENEVER ERROR CONTINUE #@g00411 
			OPEN crs_upd_stateinfo USING p_rec_pky.* #@g00411 
			FETCH crs_upd_stateinfo INTO dummy #@g00411 
			IF sqlca.sqlcode = -244 THEN 
				ERROR "THIS ROW IS BEING MODIFIED" 
				ROLLBACK WORK 
				EXIT WHILE 
			END IF #@g00415 
			WHENEVER ERROR stop #@g00416 
			#@G00416

			INPUT BY NAME p_rec_frm_a163.all1_text, #@g00418 
			p_rec_frm_a163.all2_text, #@g00419 
			p_rec_frm_a163.cur1_text, #@g00420 
			p_rec_frm_a163.cur2_text, #@g00421 
			p_rec_frm_a163.over1_1_text, #@g00422 
			p_rec_frm_a163.over1_2_text, #@g00423 
			p_rec_frm_a163.over30_1_text, #@g00424 
			p_rec_frm_a163.over30_2_text, #@g00425 
			p_rec_frm_a163.over60_1_text, #@g00426 
			p_rec_frm_a163.over60_2_text, #@g00427 
			p_rec_frm_a163.over90_1_text, #@g00428 
			p_rec_frm_a163.over90_2_text #@g00429 
			WITHOUT DEFAULTS #@g00430 
			#@G00430

			#@G00431

			#@G00432
			END INPUT #@g00433 
			IF int_flag = true THEN #@g00434 
				LET int_flag=false #@g00435 
				# Restore previous value		                                                                                              	#@G00436
				LET p_rec_frm_a163.* = sav_a163.* #@g00437 
				DISPLAY BY NAME p_rec_frm_a163.* #@g00438 
				#@G00438
				EXECUTE immediate "SET ISOLATION TO COMMITTED READ" #@g00439 
				ROLLBACK WORK #@g00440 
				MESSAGE "$CancelCom Control-C" #@g00441 
				EXIT WHILE #@g00442 
			END IF #@g00443 

			#CALL confirm_operation(4,10,"Modify") RETURNING l_user_choice		                                                                 	#@G00445
			LET l_user_choice = prompt_YNC_int("Modify","Edit this record?",3) 

			CASE #@g00447 
				WHEN l_user_choice IS NULL #@g00448 
					# Resign, restore previous VALUES		                                                                                     	#@G00449
					LET p_rec_frm_a163.* = sav_a163.* #@g00450 
					DISPLAY BY NAME p_rec_frm_a163.* #@g00451 
					EXECUTE immediate "SET ISOLATION TO COMMITTED READ" #@g00452 
					ROLLBACK WORK #@g00453 
					EXIT WHILE # CANCEL operation #@g00454 

				WHEN l_user_choice = 0 #@g00456 
					# Redo		                                                                                                                	#@G00457
					CONTINUE WHILE #@g00458 

				WHEN l_user_choice = 1 #@g00460 
					# confirm UPDATE		                                                                                                      	#@G00461
					CALL set_table_record_a163_stateinfo(2,p_rec_frm_a163.*) #@g00462 
					RETURNING l_rec_tbl_a163.* #@g00463 

					# Perform the prepared UPDATE statement		                                                                               	#@G00465
					LET l_sql_stmt_status = sql_edit_stateinfo(p_rec_pky.*,l_rec_tbl_a163.*) #@g00466 
					CASE #@g00467 
						WHEN l_sql_stmt_status = 0 #@g00468 
							MESSAGE "Edit stateinfo Successful operation" #@g00469 
							EXECUTE immediate "SET ISOLATION TO COMMITTED READ" #@g00470 
						COMMIT WORK #@g00471 
						#@G00471
						WHEN l_sql_stmt_status < 0 #@g00472 
							CALL msgError("stateinfo","Edit stateinfo:failed ") #@g00473 
							EXECUTE immediate "SET ISOLATION TO COMMITTED READ" #@g00474 
							ROLLBACK WORK #@g00475 
							#@G00475
					END CASE #@g00476 
					EXIT WHILE #@g00477 
			END CASE #@g00478 
		END WHILE #@g00479 
		RETURN l_sql_stmt_status #@g00480 
END FUNCTION ## frm_edit_a163_a163(p_rec_pky) #@g00481 


############################################################
# FUNCTION frm_delete_a163_a163(p_rec_pky) #@g00487 
#
#
############################################################
# DELETE A stateinfo row		                                                                                                 	#@G00485
# inbound: table primary key		                                                                                             	#@G00486
FUNCTION frm_delete_a163_a163(p_rec_pky) #@g00487 
	DEFINE l_user_choice boolean #@g00488 
	DEFINE dummy SMALLINT #@g00489 
	DEFINE l_sql_stmt_status SMALLINT #@g00490 
	DEFINE p_rec_pky RECORD #@g00491 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00491 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00492 
	END RECORD #@g00493 

	WHILE true 
		#@G00495
		#CALL confirm_operation(5,10,"Remove") RETURNING l_user_choice		                                                                 	#@G00496
		LET l_user_choice = promptTF("Delete","Delete this entry?",TRUE) 
		BEGIN WORK #@g00497 
			EXECUTE immediate "SET ISOLATION TO COMMITTED READ RETAIN UPDATE LOCKS" #@g00498 
			WHENEVER ERROR CONTINUE #@g00499 
			OPEN crs_upd_stateinfo USING p_rec_pky.* #@g00499 
			FETCH crs_upd_stateinfo INTO dummy #@g00499 
			IF sqlca.sqlcode = -244 THEN 
				ERROR "THIS ROW IS BEING MODIFIED" 
				ROLLBACK WORK 
				EXIT WHILE 
			END IF #@g00503 
			WHENEVER ERROR stop #@g00504 
			#@G00504
			CASE #@g00505 
				WHEN l_user_choice = false #@g00506 
					EXIT WHILE # degage abandon #@g00507 
				WHEN l_user_choice = true #@g00508 
					CALL sql_delete_stateinfo(p_rec_pky.*) RETURNING l_sql_stmt_status #@g00509 
					CASE #@g00510 
						WHEN l_sql_stmt_status = 0 #@g00511 
							MESSAGE "Delete stateinfo Successful operation" #@g00512 
						COMMIT WORK #@g00513 
						#@G00513

						WHEN l_sql_stmt_status < 0 #@g00515 
							CALL msgError("stateinfo","Delete stateinfo:failed ") #@g00516 
							ROLLBACK WORK #@g00517 
							#@G00517
					END CASE #@g00518 
					EXIT WHILE #@g00519 
			END CASE #@g00520 
		END WHILE #@g00521 
		RETURN l_sql_stmt_status #@g00522 
END FUNCTION ## frm_delete_a163_a163(p_rec_pky) #@g00523 


############################################################
# FUNCTION sql_prepare_queries_a163_stateinfo () #@g00527 
#
#
############################################################
#  Build, PREPARE, DECLARE AND INITIALIZE main queries AND cursors		                                                       	#@G00526
FUNCTION sql_prepare_queries_a163_stateinfo () #@g00527 
	DEFINE query_text STRING #@g00528 

	# PREPARE CURSOR for full master table row contents, access by primary key		                                              	#@G00530
	LET query_text= #@g00531 
	"SELECT cmpy_code,dun_code,all1_text,all2_text,cur1_text,cur2_text,over1_1_text,over1_2_text,over30_1_text,over30_2_text,over60_1_text,over60_2_text,over90_1_text,over90_2_text ", #@g00532 
	" FROM stateinfo ", #@g00533 
	"WHERE cmpy_code = ? 
	AND dun_code = ? " #@G00535 

	PREPARE sel_mrw_stateinfo FROM query_text #@g00537 
	DECLARE crs_row_stateinfo CURSOR FOR sel_mrw_stateinfo #@g00538 

	# PREPARE CURSOR for row test / check if locked		                                                                         	#@G00540
	LET query_text= "SELECT cmpy_code,dun_code ", #@g00541 
	" FROM stateinfo ", #@g00542 
	" WHERE cmpy_code = ? 
	AND dun_code = ? " #@G00544 

	PREPARE sel_pky_stateinfo FROM query_text #@g00546 
	DECLARE crs_pky_stateinfo CURSOR FOR sel_pky_stateinfo #@g00547 

	# PREPARE CURSOR for SELECT FOR UPDATE		                                                                                  	#@G00549
	LET query_text= "SELECT cmpy_code,dun_code ", #@g00550 
	" FROM stateinfo ", #@g00551 
	" WHERE cmpy_code = ? 
	AND dun_code = ? ", #@G00553 
	" FOR UPDATE" #@g00554 

	PREPARE sel_upd_stateinfo FROM query_text #@g00556 
	DECLARE crs_upd_stateinfo CURSOR FOR sel_upd_stateinfo #@g00557 

	# PREPARE INSERT statement		                                                                                              	#@G00559
	LET query_text = #@g00560 
	"INSERT INTO stateinfo ( cmpy_code,dun_code,all1_text,all2_text,cur1_text,cur2_text,over1_1_text,over1_2_text,over30_1_text,over30_2_text,over60_1_text,over60_2_text,over90_1_text,over90_2_text )", #@g00561 
	" VALUES ( ?,?,?,?,?,?,?,?,?,?,?,?,?,? )" #@g00562 
	PREPARE s_ins_stateinfo FROM query_text #@g00563 

	# PREPARE UPDATE statement		                                                                                              	#@G00565
	LET query_text= #@g00566 
	"UPDATE stateinfo ", #@g00567 
	"SET ( all1_text,all2_text,cur1_text,cur2_text,over1_1_text,over1_2_text,over30_1_text,over30_2_text,over60_1_text,over60_2_text,over90_1_text,over90_2_text )", #@g00568 
	" = ( ?,?,?,?,?,?,?,?,?,?,?,? )", #@g00569 
	" WHERE cmpy_code = ? 
	AND dun_code = ? " #@G00571 
	PREPARE s_upd_stateinfo FROM query_text #@g00572 

	# PREPARE DELETE statement		                                                                                              	#@G00574
	LET query_text= "DELETE FROM stateinfo ", #@g00575 
	" WHERE cmpy_code = ? 
	AND dun_code = ? " #@G00577 

	PREPARE s_del_stateinfo FROM query_text #@g00579 

END FUNCTION ## sql_prepare_queries_a163_stateinfo #@g00581 


############################################################
# FUNCTION sql_get_qbe_count_stateinfo(p_qry_stmt) #@g00591 
#
#
############################################################
#########################################################		                                                                	#@G00584
# Open the QBE CURSOR,		                                                                                                   	#@G00585
# counts returned l_rows_count,		                                                                                            	#@G00586
# OPEN the data SET,		                                                                                                     	#@G00587
# FETCH first row		                                                                                                        	#@G00588
# inbound parameter: query predicate		                                                                                     	#@G00589
# outbound parameters: number of rows retried		                                                                            	#@G00590
FUNCTION sql_get_qbe_count_stateinfo(p_qry_stmt) #@g00591 
	DEFINE p_qry_stmt STRING #@g00592 
	DEFINE l_str_rec_stateinfo STRING #@g00593 
	DEFINE l_rows_count INTEGER #@g00594 
	DEFINE l_sql_stmt_status INTEGER #@g00595 

	# define primary_key record		                                                                                             	#@G00597
	DEFINE l_pky RECORD #@g00598 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00598 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00599 
	END RECORD #@g00600 

	LET l_str_rec_stateinfo = #@g00602 
	"SELECT count(*) FROM stateinfo", #@g00603 
	" WHERE ",p_qry_stmt clipped #@g00604 


	PREPARE rec_nbr_crs_ FROM l_str_rec_stateinfo #@g00607 
	DECLARE crs_nbr_crs_ CURSOR FOR rec_nbr_crs_ #@g00608 

	OPEN crs_nbr_crs_ #@g00610 
	SET ISOLATION TO dirty read #@g00611 
	WHENEVER ERROR CONTINUE #@g00612 
	FETCH crs_nbr_crs_ INTO l_rows_count #@g00613 
	WHENEVER ERROR CALL error_mngmt #@g00614 
	SET ISOLATION TO committed read #@g00615 

	# if FETCH fails, count = 0, the, get back TO query		                                                                     	#@G00617
	IF sqlca.sqlcode OR l_rows_count = 0 THEN #@g00618 
		LET l_rows_count =0 #@g00619 
	END IF #@g00620 
	FREE crs_nbr_crs_ #@g00621 
	RETURN l_rows_count #@g00622 
END FUNCTION ## sql_get_qbe_count_stateinfo #@g00623 


############################################################
# FUNCTION sql_opn_pky_scr_cursstateinfo(p_qry_stmt) #@g00626 
#
#
############################################################
FUNCTION sql_opn_pky_scr_cursstateinfo(p_qry_stmt) #@g00626 
	## Build the query generated by CONSTRUCT BY NAME,		                                                                       	#@G00627
	## Declare AND OPEN the CURSOR		                                                                                           	#@G00628
	## inbound param: query predicate		                                                                                        	#@G00629
	## outbound parameter: query STATUS		                                                                                      	#@G00630
	DEFINE p_qry_stmt STRING #@g00631 
	DEFINE l_str_rec_stateinfo STRING #@g00632 
	DEFINE l_rows_count INTEGER #@g00633 
	DEFINE l_sql_stmt_status INTEGER #@g00634 

	# define primary_key record		                                                                                             	#@G00636
	DEFINE l_pky RECORD #@g00637 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00637 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00638 
	END RECORD #@g00639 

	# display the selected columns		                                                                                          	#@G00641

	LET l_str_rec_stateinfo = "SELECT cmpy_code,dun_code ", #@g00643 
	" FROM stateinfo ", #@g00644 
	"WHERE ",p_qry_stmt clipped, #@g00645 
	" ORDER BY cmpy_code,dun_code " #@g00646 

	PREPARE rech_crs_ FROM l_str_rec_stateinfo #@g00648 

	# crs_scrl_crs_ : the first CURSOR selects all the primary keys (NOT all the table columns)		                             	#@G00650

	DECLARE crs_scrl_crs_ SCROLL CURSOR with HOLD FOR rech_crs_ #@g00652 

	WHENEVER ERROR CONTINUE #@g00654 
	OPEN crs_scrl_crs_ #@g00655 
	WHENEVER ERROR CALL error_mngmt #@g00656 

	RETURN sqlca.sqlcode #@g00658 
END FUNCTION ## sql_opn_pky_scr_cursstateinfo #@g00659 

############################################################
# FUNCTION sql_nxtprev_stateinfo(p_offset) #@g00662 
#
#
############################################################
FUNCTION sql_nxtprev_stateinfo(p_offset) #@g00662 
	## sql_nxtprev_stateinfo : FETCH NEXT OR PREVIOUS RECORD		                                                                 	#@G00663
	DEFINE p_offset SMALLINT #@g00664 
	DEFINE l_sql_stmt_status,l_record_found INTEGER #@g00665 
	DEFINE l_rec_pky RECORD #@g00666 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00666 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00667 
	END RECORD #@g00668 
	DEFINE l_rec_frm_a163 RECORD #@g00669 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00669 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00669 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00669 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00669 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00669 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00669 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00669 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00669 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00669 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00669 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00669 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00669 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00670 
	END RECORD #@g00671 

	WHENEVER ERROR CONTINUE #@g00673 
	FETCH relative p_offset crs_scrl_crs_ INTO l_rec_pky.* #@g00674 
	WHENEVER ERROR CALL error_mngmt #@g00675 

	CASE #@g00677 
		WHEN sqlca.sqlcode = 100 #@g00678 
			LET l_record_found = 0 #@g00679 

		WHEN sqlca.sqlcode < 0 #@g00681 
			LET l_record_found = -1 #@g00682 
		OTHERWISE #@g00683 
			LET l_sql_stmt_status = 1 #@g00684 
			LET l_record_found = 1 #@g00685 
			#CALL sql_FETCH_full_row_stateinfo (l_rec_pky.*)		                                                                             	#@G00686
			#RETURNING l_record_found,l_rec_frm_a163.*		                                                                                     	#@G00687

	END CASE #@g00689 
	RETURN l_record_found,l_rec_pky.* #@g00690 
END FUNCTION ## sql_nxtprev_stateinfo #@g00691 


############################################################
# FUNCTION sql_fetch_full_row_stateinfo(p_rec_pky_stateinfo) #@g00694  
#
#
############################################################
FUNCTION sql_fetch_full_row_stateinfo(p_rec_pky_stateinfo) #@g00694 
	# sql_FETCH_full_row_stateinfo : read a complete row accessing by primary key		                                            	#@G00695
	# inbound parameter : primary key		                                                                                        	#@G00696
	# outbound parameter: l_sql_stmt_status AND row contents		                                                                   	#@G00697
	DEFINE l_sql_stmt_status SMALLINT #@g00698 
	DEFINE p_rec_pky_stateinfo RECORD #@g00699 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00699 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00700 
	END RECORD #@g00701 
	DEFINE l_rec_tbl_a163 RECORD #@g00702 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00702 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00702 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00702 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00702 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00702 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00702 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00702 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00702 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00702 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00702 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00702 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00702 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00702 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00703 
	END RECORD #@g00704 
	DEFINE l_rec_frm_a163 RECORD #@g00705 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00705 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00705 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00705 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00705 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00705 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00705 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00705 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00705 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00705 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00705 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00705 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00705 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00706 
	END RECORD #@g00707 

	#@G00708

	# read the table, access on primary key		                                                                                 	#@G00710
	WHENEVER ERROR CONTINUE #@g00711 
	OPEN crs_row_stateinfo #@g00712 
	USING p_rec_pky_stateinfo.* #@g00713 

	FETCH crs_row_stateinfo INTO l_rec_tbl_a163.* #@g00715 

	WHENEVER ERROR CALL error_mngmt #@g00717 
	CASE #@g00718 
		WHEN sqlca.sqlcode = 100 #@g00719 
			LET l_sql_stmt_status = 0 #@g00720 
		WHEN sqlca.sqlcode < 0 #@g00721 
			LET l_sql_stmt_status = -1 #@g00722 
		OTHERWISE #@g00723 
			LET l_sql_stmt_status = 1 #@g00724 
			CALL set_form_record_a163_a163(l_rec_tbl_a163.*) #@g00725 
			RETURNING l_rec_frm_a163.* #@g00726 
	END CASE #@g00727 
	RETURN l_sql_stmt_status,l_rec_frm_a163.* #@g00728 
END FUNCTION ## sql_fetch_full_row_stateinfo #@g00729 


############################################################
# FUNCTION sql_insert_stateinfo(p_rec_tbl_a163) #@g00732 
#
#
############################################################
FUNCTION sql_insert_stateinfo(p_rec_tbl_a163) #@g00732 
	## INSERT in table stateinfo 		                                                                                            	#@G00733
	DEFINE l_sql_stmt_status INTEGER #@g00734 
	DEFINE l_rows_count SMALLINT #@g00735 
	DEFINE l_rec_pky RECORD #@g00736 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00736 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00737 
	END RECORD #@g00738 
	DEFINE p_rec_tbl_a163 RECORD #@g00739 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00739 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00739 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00739 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00739 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00739 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00739 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00739 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00739 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00739 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00739 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00739 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00739 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00739 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00740 
	END RECORD #@g00741 
	WHENEVER ERROR CONTINUE #@g00742 
	EXECUTE s_ins_stateinfo #@g00743 
	USING p_rec_tbl_a163.cmpy_code, #@g00743 
	p_rec_tbl_a163.dun_code, #@g00743 
	p_rec_tbl_a163.all1_text, #@g00743 
	p_rec_tbl_a163.all2_text, #@g00743 
	p_rec_tbl_a163.cur1_text, #@g00743 
	p_rec_tbl_a163.cur2_text, #@g00743 
	p_rec_tbl_a163.over1_1_text, #@g00743 
	p_rec_tbl_a163.over1_2_text, #@g00743 
	p_rec_tbl_a163.over30_1_text, #@g00743 
	p_rec_tbl_a163.over30_2_text, #@g00743 
	p_rec_tbl_a163.over60_1_text, #@g00743 
	p_rec_tbl_a163.over60_2_text, #@g00743 
	p_rec_tbl_a163.over90_1_text, #@g00743 
	p_rec_tbl_a163.over90_2_text #@g00744 
	WHENEVER ERROR CALL error_mngmt #@g00745 

	IF sqlca.sqlcode < 0 THEN #@g00747 
		LET l_sql_stmt_status = -1 #@g00748 
	ELSE #@g00749 
		LET l_sql_stmt_status = 0 #@g00750 
		#@G00751

	END IF #@g00753 
	RETURN l_sql_stmt_status,l_rec_pky.* #@g00754 
END FUNCTION ## sql_insert_stateinfo #@g00755 


############################################################
# FUNCTION sql_edit_stateinfo(p_rec_pky,p_rec_tbl_a163) #@g00758 
#
#
############################################################
FUNCTION sql_edit_stateinfo(p_rec_pky,p_rec_tbl_a163) #@g00758 
	## sql_Edit_stateinfo :UPDATE stateinfo record		                                                                         	#@G00759
	DEFINE l_sql_stmt_status INTEGER #@g00760 
	DEFINE p_rec_pky RECORD #@g00761 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00761 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00762 
	END RECORD #@g00763 
	DEFINE p_rec_tbl_a163 RECORD #@g00764 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00764 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00764 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00764 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00764 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00764 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00764 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00764 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00764 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00764 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00764 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00764 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00764 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00764 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00765 
	END RECORD #@g00766 

	WHENEVER ERROR CONTINUE #@g00768 
	EXECUTE s_upd_stateinfo #@g00769 
	USING p_rec_tbl_a163.all1_text, #@g00769 
	p_rec_tbl_a163.all2_text, #@g00769 
	p_rec_tbl_a163.cur1_text, #@g00769 
	p_rec_tbl_a163.cur2_text, #@g00769 
	p_rec_tbl_a163.over1_1_text, #@g00769 
	p_rec_tbl_a163.over1_2_text, #@g00769 
	p_rec_tbl_a163.over30_1_text, #@g00769 
	p_rec_tbl_a163.over30_2_text, #@g00769 
	p_rec_tbl_a163.over60_1_text, #@g00769 
	p_rec_tbl_a163.over60_2_text, #@g00769 
	p_rec_tbl_a163.over90_1_text, #@g00769 
	p_rec_tbl_a163.over90_2_text , #@g00770 
	p_rec_pky.* #@g00771 

	WHENEVER ERROR CALL error_mngmt #@g00773 
	IF sqlca.sqlcode < 0 THEN #@g00774 

		LET l_sql_stmt_status = -1 #@g00776 
	ELSE #@g00777 
		LET l_sql_stmt_status = 0 #@g00778 
	END IF #@g00779 
	RETURN l_sql_stmt_status #@g00780 
END FUNCTION ## sql_edit_stateinfo #@g00781 


############################################################
# FUNCTION sql_delete_stateinfo(p_rec_pky) #@g00784 
#
#
############################################################
FUNCTION sql_delete_stateinfo(p_rec_pky) #@g00784 
	## sql_Delete_stateinfo :delete current row in table stateinfo 		                                                          	#@G00785
	DEFINE l_sql_stmt_status SMALLINT #@g00786 
	DEFINE p_rec_pky RECORD #@g00787 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00787 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00788 
	END RECORD #@g00789 

	WHENEVER ERROR CONTINUE #@g00791 
	EXECUTE s_del_stateinfo #@g00792 
	USING p_rec_pky.* #@g00793 

	WHENEVER ERROR CALL error_mngmt #@g00795 
	IF sqlca.sqlcode < 0 THEN #@g00796 
		LET l_sql_stmt_status = -1 #@g00797 
	ELSE #@g00798 
		LET l_sql_stmt_status=0 #@g00799 
	END IF #@g00800 
	RETURN l_sql_stmt_status #@g00801 
END FUNCTION ## sql_delete_stateinfo #@g00802 


############################################################
# FUNCTION sql_status_pk_stateinfo(p_rec_pky) #@g00805 
#
#
############################################################
FUNCTION sql_status_pk_stateinfo(p_rec_pky) #@g00805 
	##   sql_status_pk_stateinfo : Check if primary key exists		                                                               	#@G00806
	## inbound parameter : record of primary key		                                                                             	#@G00807
	## outbound parameter:  STATUS > 0  if exists, 0 if no record, < 0 if error		                                              	#@G00808
	DEFINE p_rec_pky RECORD #@g00809 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00809 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00810 
	END RECORD #@g00811 
	DEFINE l_pk_status INTEGER #@g00812 

	WHENEVER ERROR CONTINUE #@g00814 
	OPEN crs_pky_stateinfo USING p_rec_pky.* #@g00815 
	FETCH crs_pky_stateinfo #@g00816 
	WHENEVER ERROR CALL error_mngmt #@g00817 

	CASE sqlca.sqlcode #@g00819 
		WHEN 0 #@g00820 
			LET l_pk_status = 1 #@g00821 
		WHEN 100 #@g00822 
			LET l_pk_status = 0 #@g00823 
		WHEN sqlca.sqlerrd[2] = 104 #@g00824 
			LET l_pk_status = -1 # RECORD locked #@g00825 
		WHEN sqlca.sqlcode < 0 #@g00826 
			LET l_pk_status = sqlca.sqlcode #@g00827 
	END CASE #@g00828 

	RETURN l_pk_status #@g00830 
END FUNCTION ## sql_status_pk_stateinfo #@g00831 


############################################################
# FUNCTION set_form_record_a163_a163(p_rec_tbl_contents) #@g00834 
#
#
############################################################
FUNCTION set_form_record_a163_a163(p_rec_tbl_contents) #@g00834 
	## set_form_record_A163_A163: assigns table VALUES TO form fields VALUES		                                                 	#@G00835
	DEFINE l_rec_frm_contents RECORD #@g00836 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00836 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00836 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00836 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00836 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00836 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00836 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00836 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00836 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00836 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00836 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00836 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00836 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00837 
	END RECORD #@g00838 

	DEFINE p_rec_tbl_contents RECORD #@g00840 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00840 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00840 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00840 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00840 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00840 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00840 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00840 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00840 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00840 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00840 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00840 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00840 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00840 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00841 
	END RECORD #@g00842 

	INITIALIZE l_rec_frm_contents.* TO NULL #@g00844 
	LET l_rec_frm_contents.dun_code = p_rec_tbl_contents.dun_code #@g00845 
	LET l_rec_frm_contents.all1_text = p_rec_tbl_contents.all1_text #@g00846 
	LET l_rec_frm_contents.all2_text = p_rec_tbl_contents.all2_text #@g00847 
	LET l_rec_frm_contents.cur1_text = p_rec_tbl_contents.cur1_text #@g00848 
	LET l_rec_frm_contents.cur2_text = p_rec_tbl_contents.cur2_text #@g00849 
	LET l_rec_frm_contents.over1_1_text = p_rec_tbl_contents.over1_1_text #@g00850 
	LET l_rec_frm_contents.over1_2_text = p_rec_tbl_contents.over1_2_text #@g00851 
	LET l_rec_frm_contents.over30_1_text = p_rec_tbl_contents.over30_1_text #@g00852 
	LET l_rec_frm_contents.over30_2_text = p_rec_tbl_contents.over30_2_text #@g00853 
	LET l_rec_frm_contents.over60_1_text = p_rec_tbl_contents.over60_1_text #@g00854 
	LET l_rec_frm_contents.over60_2_text = p_rec_tbl_contents.over60_2_text #@g00855 
	LET l_rec_frm_contents.over90_1_text = p_rec_tbl_contents.over90_1_text #@g00856 
	LET l_rec_frm_contents.over90_2_text = p_rec_tbl_contents.over90_2_text #@g00857 
	#@G00858
	RETURN l_rec_frm_contents.* #@g00859 
END FUNCTION ## set_form_recorda163_a163 #@g00860 


############################################################
# FUNCTION set_table_record_a163_stateinfo(p_sql_stmt,p_rec_frm_contents) #@g00863 
#
#
############################################################
FUNCTION set_table_record_a163_stateinfo(p_sql_stmt,p_rec_frm_contents) #@g00863 
	## set_table_record_A163_stateinfo: assigns form fields value TO table VALUES		                                            	#@G00864
	DEFINE p_sql_stmt SMALLINT # 1 => insert, 2 => UPDATE #@g00865 
	DEFINE l_rec_pky RECORD #@g00866 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00866 
		dun_code LIKE stateinfo.dun_code # nchar(3) #@g00867 
	END RECORD #@g00868 

	DEFINE p_rec_frm_contents RECORD #@g00870 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00870 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00870 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00870 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00870 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00870 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00870 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00870 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00870 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00870 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00870 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00870 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00870 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00871 
	END RECORD #@g00872 

	DEFINE l_rec_tbl_contents RECORD #@g00874 
		cmpy_code LIKE stateinfo.cmpy_code, # CHAR(2) #@g00874 
		dun_code LIKE stateinfo.dun_code, # nchar(3) #@g00874 
		all1_text LIKE stateinfo.all1_text, # nvarchar(35) #@g00874 
		all2_text LIKE stateinfo.all2_text, # nvarchar(35) #@g00874 
		cur1_text LIKE stateinfo.cur1_text, # nvarchar(35) #@g00874 
		cur2_text LIKE stateinfo.cur2_text, # nvarchar(35) #@g00874 
		over1_1_text LIKE stateinfo.over1_1_text, # nvarchar(35) #@g00874 
		over1_2_text LIKE stateinfo.over1_2_text, # nvarchar(35) #@g00874 
		over30_1_text LIKE stateinfo.over30_1_text, # nvarchar(35) #@g00874 
		over30_2_text LIKE stateinfo.over30_2_text, # nvarchar(35) #@g00874 
		over60_1_text LIKE stateinfo.over60_1_text, # nvarchar(35) #@g00874 
		over60_2_text LIKE stateinfo.over60_2_text, # nvarchar(35) #@g00874 
		over90_1_text LIKE stateinfo.over90_1_text, # nvarchar(35) #@g00874 
		over90_2_text LIKE stateinfo.over90_2_text # nvarchar(35) #@g00875 
	END RECORD #@g00876 

	INITIALIZE l_rec_tbl_contents.* TO NULL #@g00878 
	IF p_sql_stmt = 1 THEN #@g00879 
		LET l_rec_tbl_contents.cmpy_code = modu_rec_stateinfo.cmpy_code #@g00880 

		LET l_rec_tbl_contents.dun_code = p_rec_frm_contents.dun_code #@g00881 
	END IF #@g00882 
	LET l_rec_tbl_contents.all1_text = p_rec_frm_contents.all1_text #@g00883 
	LET l_rec_tbl_contents.all2_text = p_rec_frm_contents.all2_text #@g00884 
	LET l_rec_tbl_contents.cur1_text = p_rec_frm_contents.cur1_text #@g00885 
	LET l_rec_tbl_contents.cur2_text = p_rec_frm_contents.cur2_text #@g00886 
	LET l_rec_tbl_contents.over1_1_text = p_rec_frm_contents.over1_1_text #@g00887 
	LET l_rec_tbl_contents.over1_2_text = p_rec_frm_contents.over1_2_text #@g00888 
	LET l_rec_tbl_contents.over30_1_text = p_rec_frm_contents.over30_1_text #@g00889 
	LET l_rec_tbl_contents.over30_2_text = p_rec_frm_contents.over30_2_text #@g00890 
	LET l_rec_tbl_contents.over60_1_text = p_rec_frm_contents.over60_1_text #@g00891 
	LET l_rec_tbl_contents.over60_2_text = p_rec_frm_contents.over60_2_text #@g00892 
	LET l_rec_tbl_contents.over90_1_text = p_rec_frm_contents.over90_1_text #@g00893 
	LET l_rec_tbl_contents.over90_2_text = p_rec_frm_contents.over90_2_text #@g00894 
	#@G00895

	RETURN l_rec_tbl_contents.* #@g00897 
END FUNCTION ## set_table_recorda163_stateinfo #@g00898 

#@G00900

#@G00902

#@G00904

#@G00906


#Statement Messages

###########################################################################
# This program IS free software; you can redistribute it AND/OR modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, OR (at your
# option) any later version.
#
# This program IS distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License FOR more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; IF NOT, write TO the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
###########################################################################

#KandooERP runs on Querix Lycia www.querix.com
#Adapted by eric@begooden.it,hoelzl@querix.com

#table stateinfo
#  (
#    cmpy_code CHAR(2),
#    dun_code nchar(3),
#    all1_text nvarchar(35),
#    all2_text nvarchar(35),
#    cur1_text nvarchar(35),
#    cur2_text nvarchar(35),
#    over1_1_text nvarchar(35),
#    over1_2_text nvarchar(35),
#    over30_1_text nvarchar(35),
#    over30_2_text nvarchar(35),
#    over60_1_text nvarchar(35),
#    over60_2_text nvarchar(35),
#    over90_1_text nvarchar(35),
#    over90_2_text nvarchar(35)
#  )



{
# \file
# \brief module AZ5 allows the user TO maintain dunning MESSAGEs which will be
# printed on customer statements depending on account aging.

GLOBALS "../ar/A_AR_GLOBALS.4gl"

#Module Scope Variables
DEFINE modu_stateinfo RECORD LIKE stateinfo.*
#DEFINE glob_rec_kandoouser RECORD LIKE kandoouser.*	 #huho - seems NOT required/used
#DEFINE ans CHAR(1)															 #huho - seems NOT required/used
#DEFINE err_flag SMALLINT													#huho - seems NOT required/used
#DEFINE cnt SMALLINT														 #huho - seems NOT required/used

#huho
DEFINE CursorStatus SMALLINT  --blooxxxy code... need this TO fix some issues. navigation etc.. must be disabled WHEN no data are the TO be FETCHed

#END GLOBALS


#######################################################################################
# MAIN
#
#
#######################################################################################
MAIN

#Initial UI Init
	CALL setModuleId("AZ5")
	CALL ui_init(0)

   defer interrupt
   defer quit

	CALL authenticate(getModuleId())

	CALL fgl_winmessage("Eric Task","Hi Eric, this code IS terrible, even so, it would be so simple.. codeGenerate it please","info")
   CALL getitem()
   CLOSE WINDOW A163
END MAIN


#######################################################################################
# FUNCTION getitem()
#
#
#######################################################################################
FUNCTION getitem()
	DEFINE itemCount INT
	LET itemCount = 0  --how many records are currently in the table
	LET cursorStatus = FALSE

   OPEN WINDOW A163 WITH FORM "A163"
	CALL windecoration_a("A163")

   MENU " Statement Messages"

		BEFORE MENU
			CALL publish_toolbar("kandoo","AZ5","menu-statement-MESSAGEs")
			HIDE OPTION "Next"
			HIDE OPTION "Previous"
			HIDE OPTION "EDIT"
			HIDE OPTION "DELETE"

		ON ACTION "WEB-HELP"
			CALL onlineHelp(getModuleId(),NULL)

		ON ACTION "actToolbarManager"
		 	CALL setupToolbar()

		ON ACTION "ADD"
#COMMAND "ADD" " Insert a Statement Message"
         IF addor() > 0 THEN -- NOT user cancel OR error
						SHOW OPTION "Change"
						SHOW OPTION "DELETE"
					END IF

		ON ACTION "Inquire"
#COMMAND "Inquire" " Inquire a Statement Message"
         LET cursorStatus = inquior()
         IF cursorStatus = TRUE THEN
			      SHOW OPTION "Next"
						SHOW OPTION "Previous"
						SHOW OPTION "Change"
						SHOW OPTION "DELETE"

            NEXT OPTION "Next"
         END IF

		ON ACTION "Next"
#COMMAND "Next" "Next Statement Message"
         CALL nextor()
         NEXT OPTION "Next"

		ON ACTION "Previous"
#COMMAND "Previous" "Previous Statement Message"
         CALL prevor()
         NEXT OPTION "Previous"

		ON ACTION "EDIT"
#COMMAND "Change" " Change a Statement Message"
         IF changor() THEN
#SHOW OPTION "Next"
#SHOW OPTION "Previous"
#SHOW OPTION "Change"
#SHOW OPTION "DELETE"
            close c_stateinfo
   					OPEN c_stateinfo
         END IF
         NEXT OPTION "Inquire"

		ON ACTION "DELETE"
#COMMAND "DELETE" " Delete a Statement Message"
         IF deletor() THEN

#IF cursorStatus = FALSE THEN
#IF itemCount > 0 THEN
#	SHOW OPTION "Change"
#	SHOW OPTION "DELETE"
#END IF
#IF itemCount > 1 THEN
#	SHOW OPTION "Change"
#	SHOW OPTION "DELETE"
#  SHOW OPTION "Next"
#	SHOW OPTION "Previous"
#END IF

         END IF
         NEXT OPTION "Exit"

      COMMAND KEY(interrupt,"E")"Exit" " Exit TO menus"
         EXIT PROGRAM



   END MENU
END FUNCTION


#######################################################################################
# FUNCTION inquior()
#
#
#######################################################################################
FUNCTION inquior()
   DEFINE l_where_clause CHAR(200),
          sql_stmt     CHAR(250)

   CLEAR FORM
   INITIALIZE modu_stateinfo.* TO NULL

   CONSTRUCT BY NAME l_where_clause on stateinfo.dun_code

		BEFORE CONSTRUCT
			CALL publish_toolbar("kandoo","AZ5","construct-stateinfo")

		ON ACTION "WEB-HELP"
			CALL onlineHelp(getModuleId(),NULL)
			ON ACTION "actToolbarManager"
		 	CALL setupToolbar()

	END CONSTRUCT


   IF int_flag OR quit_flag THEN
      LET int_flag = FALSE
      LET quit_flag = FALSE
      RETURN FALSE
   END IF

   LET sql_stmt = "SELECT * FROM stateinfo WHERE ",
                  "stateinfo.cmpy_code = \"",glob_rec_kandoouser.cmpy_code,"\" ",
                  " AND ", l_where_clause clipped," "

   PREPARE ex_stmt FROM sql_stmt

   DECLARE c_stateinfo scroll CURSOR FOR ex_stmt

   OPEN c_stateinfo


   FETCH c_stateinfo INTO modu_stateinfo.*
      IF STATUS = NOTFOUND THEN
         ERROR "No records found."
         RETURN FALSE
      ELSE
        CALL displayor()
        RETURN TRUE
      END IF

END FUNCTION


#######################################################################################
# FUNCTION displayor()
#
#
#######################################################################################
FUNCTION displayor()

  DISPLAY BY NAME modu_stateinfo.dun_code,
   modu_stateinfo.all1_text,
   modu_stateinfo.all2_text


   DISPLAY BY NAME modu_stateinfo.cur1_text,
   modu_stateinfo.cur2_text


   DISPLAY BY NAME modu_stateinfo.over1_1_text,
   modu_stateinfo.over1_2_text


   DISPLAY BY NAME modu_stateinfo.over30_1_text,
   modu_stateinfo.over30_2_text


   DISPLAY BY NAME modu_stateinfo.over60_1_text,
   modu_stateinfo.over60_2_text


   DISPLAY BY NAME modu_stateinfo.over90_1_text,
   modu_stateinfo.over90_2_text

END FUNCTION


#######################################################################################
# FUNCTION nextor()
#
#
#######################################################################################
FUNCTION nextor()

   FETCH next c_stateinfo INTO modu_stateinfo.*
      IF STATUS = NOTFOUND THEN
         ERROR "You are AT the END of the list"
      ELSE
         CALL displayor()
      END IF

END FUNCTION


#######################################################################################
# FUNCTION prevor()
#
#
#######################################################################################
FUNCTION prevor()

   FETCH previous c_stateinfo INTO modu_stateinfo.*
      IF STATUS = NOTFOUND THEN
         ERROR "You are AT the beginning of the list"
      ELSE
         CALL displayor()
      END IF

END FUNCTION


#######################################################################################
# FUNCTION changor()
#
#
#######################################################################################
FUNCTION changor()



   LET modu_stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code
   INPUT BY NAME modu_stateinfo.all1_text,
                 modu_stateinfo.all2_text,
                 modu_stateinfo.cur1_text,
                 modu_stateinfo.cur2_text,
                 modu_stateinfo.over1_1_text,
                 modu_stateinfo.over1_2_text,
                 modu_stateinfo.over30_1_text,
                 modu_stateinfo.over30_2_text,
                 modu_stateinfo.over60_1_text,
                 modu_stateinfo.over60_2_text,
                 modu_stateinfo.over90_1_text,
                 modu_stateinfo.over90_2_text WITHOUT DEFAULTS


		BEFORE INPUT
			CALL publish_toolbar("kandoo","AZ5","inp-stateinfo-1")

		ON ACTION "WEB-HELP"
			CALL onlineHelp(getModuleId(),NULL)

		ON ACTION "actToolbarManager"
		 	CALL setupToolbar()

   AFTER INPUT
      IF NOT(int_flag OR quit_flag) THEN
         LET modu_stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code
         UPDATE stateinfo SET * = modu_stateinfo.*
            WHERE dun_code = modu_stateinfo.dun_code AND
            cmpy_code = glob_rec_kandoouser.cmpy_code
      END IF



   END INPUT

   IF int_flag OR quit_flag THEN
      LET int_flag = FALSE
      LET quit_flag = FALSE
      RETURN FALSE
   END IF
   RETURN TRUE
END FUNCTION


#######################################################################################
# FUNCTION deletor()
#
#
#######################################################################################
FUNCTION deletor()

   SELECT unique(1) FROM customer
    WHERE cmpy_code = glob_rec_kandoouser.cmpy_code
      AND customer.dun_code = modu_stateinfo.dun_code

   IF STATUS != NOTFOUND THEN
      ERROR kandoomsg2("A",9560,"") #9560 Statement Code cannot be deleted as customer IS currently using ...
      RETURN FALSE
   ELSE

      IF kandoomsg("U",8020,1) = "Y" THEN #8020 Confirm TO delete 1 records? (Y/N)
         DELETE FROM stateinfo
          WHERE stateinfo.dun_code = modu_stateinfo.dun_code AND
                stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code
         IF STATUS = NOTFOUND THEN
            ERROR kandoomsg2("U",9125,"")9125 An error has occurred.  Please re-enter information.
            EXIT PROGRAM
         END IF

      END IF

      CLEAR FORM
   END IF

   RETURN TRUE
END FUNCTION


#######################################################################################
# FUNCTION addor()
#
#
#######################################################################################
FUNCTION addor()
   INPUT BY NAME modu_stateinfo.dun_code,
                 modu_stateinfo.all1_text,
                 modu_stateinfo.all2_text,
                 modu_stateinfo.cur1_text,
                 modu_stateinfo.cur2_text,
                 modu_stateinfo.over1_1_text,
                 modu_stateinfo.over1_2_text,
                 modu_stateinfo.over30_1_text,
                 modu_stateinfo.over30_2_text,
                 modu_stateinfo.over60_1_text,
                 modu_stateinfo.over60_2_text,
                 modu_stateinfo.over90_1_text,
                 modu_stateinfo.over90_2_text



		BEFORE INPUT
			CALL publish_toolbar("kandoo","AZ5","inp-stateinfo-2")

		ON ACTION "WEB-HELP"
			CALL onlineHelp(getModuleId(),NULL)

		ON ACTION "actToolbarManager"
		 	CALL setupToolbar()

   AFTER FIELD dun_code
      IF modu_stateinfo.dun_code IS NULL THEN
         ERROR kandoomsg2("U",9102,"") #9102 Value must be entered.
         NEXT FIELD dun_code
      END IF
      SELECT unique(1) FROM stateinfo
       WHERE stateinfo.dun_code = modu_stateinfo.dun_code
         AND stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code
      IF NOT(STATUS = NOTFOUND) THEN
         ERROR kandoomsg2("A",9558,"") #9558 The Dunning ID already exists;  Please Re-enter.
         NEXT FIELD dun_code
      END IF



END INPUT

	IF int_flag OR quit_flag THEN
	   LET int_flag = FALSE
	   LET quit_flag = FALSE
	   RETURN 0
	ELSE
	   LET modu_stateinfo.cmpy_code = glob_rec_kandoouser.cmpy_code
	   INSERT INTO stateinfo VALUES (modu_stateinfo.*)

	   IF sqlca.sqlcode < 0 THEN
	   	RETURN -1
	   ELSE
	   	RETURN 1
	   END IF
	END IF

END FUNCTION
}

